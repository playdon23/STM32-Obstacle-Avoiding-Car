
MASINA_TEST_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a14  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08009bb8  08009bb8  0000abb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fbc  08009fbc  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009fbc  08009fbc  0000afbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fc4  08009fc4  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fc4  08009fc4  0000afc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fc8  08009fc8  0000afc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009fcc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c98  200001d8  0800a1a4  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e70  0800a1a4  0000be70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161cc  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030fc  00000000  00000000  000213d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  000244d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001019  00000000  00000000  00025980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000046cc  00000000  00000000  00026999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cee  00000000  00000000  0002b065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099b4e  00000000  00000000  00040d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da8a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068f8  00000000  00000000  000da8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000e11dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009b9c 	.word	0x08009b9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08009b9c 	.word	0x08009b9c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f88:	f001 f808 	bl	8001f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8c:	f000 f834 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f90:	f000 faa0 	bl	80014d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f94:	f000 fa74 	bl	8001480 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000f98:	f000 fa26 	bl	80013e8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000f9c:	f000 f9ae 	bl	80012fc <MX_TIM3_Init>
  MX_TIM2_Init();
 8000fa0:	f000 f936 	bl	8001210 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000fa4:	f000 f894 	bl	80010d0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000fa8:	2104      	movs	r1, #4
 8000faa:	480d      	ldr	r0, [pc, #52]	@ (8000fe0 <main+0x5c>)
 8000fac:	f002 f868 	bl	8003080 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	480c      	ldr	r0, [pc, #48]	@ (8000fe4 <main+0x60>)
 8000fb4:	f002 f864 	bl	8003080 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8000fb8:	2108      	movs	r1, #8
 8000fba:	480b      	ldr	r0, [pc, #44]	@ (8000fe8 <main+0x64>)
 8000fbc:	f002 f860 	bl	8003080 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fc0:	f003 fa70 	bl	80044a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fc4:	4a09      	ldr	r2, [pc, #36]	@ (8000fec <main+0x68>)
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4809      	ldr	r0, [pc, #36]	@ (8000ff0 <main+0x6c>)
 8000fca:	f003 fab5 	bl	8004538 <osThreadNew>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4a08      	ldr	r2, [pc, #32]	@ (8000ff4 <main+0x70>)
 8000fd2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fd4:	f003 fa8a 	bl	80044ec <osKernelStart>
 8000fd8:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//  }
  /* USER CODE END 3 */
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000284 	.word	0x20000284
 8000fe4:	200001f4 	.word	0x200001f4
 8000fe8:	2000023c 	.word	0x2000023c
 8000fec:	08009c08 	.word	0x08009c08
 8000ff0:	080019f9 	.word	0x080019f9
 8000ff4:	2000035c 	.word	0x2000035c

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	@ 0x50
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	2230      	movs	r2, #48	@ 0x30
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f006 fcfb 	bl	8007a02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	4b29      	ldr	r3, [pc, #164]	@ (80010c8 <SystemClock_Config+0xd0>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001024:	4a28      	ldr	r2, [pc, #160]	@ (80010c8 <SystemClock_Config+0xd0>)
 8001026:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800102a:	6413      	str	r3, [r2, #64]	@ 0x40
 800102c:	4b26      	ldr	r3, [pc, #152]	@ (80010c8 <SystemClock_Config+0xd0>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <SystemClock_Config+0xd4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001044:	4a21      	ldr	r2, [pc, #132]	@ (80010cc <SystemClock_Config+0xd4>)
 8001046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <SystemClock_Config+0xd4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001058:	2302      	movs	r3, #2
 800105a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105c:	2301      	movs	r3, #1
 800105e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001060:	2310      	movs	r3, #16
 8001062:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001064:	2302      	movs	r3, #2
 8001066:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001068:	2300      	movs	r3, #0
 800106a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800106c:	2310      	movs	r3, #16
 800106e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001070:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001074:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001076:	2304      	movs	r3, #4
 8001078:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800107a:	2307      	movs	r3, #7
 800107c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fabc 	bl	8002600 <HAL_RCC_OscConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800108e:	f000 fcf5 	bl	8001a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001092:	230f      	movs	r3, #15
 8001094:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001096:	2302      	movs	r3, #2
 8001098:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800109e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2102      	movs	r1, #2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 fd1e 	bl	8002af0 <HAL_RCC_ClockConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010ba:	f000 fcdf 	bl	8001a7c <Error_Handler>
  }
}
 80010be:	bf00      	nop
 80010c0:	3750      	adds	r7, #80	@ 0x50
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40007000 	.word	0x40007000

080010d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b096      	sub	sp, #88	@ 0x58
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
 80010fe:	615a      	str	r2, [r3, #20]
 8001100:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2220      	movs	r2, #32
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f006 fc7a 	bl	8007a02 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800110e:	4b3e      	ldr	r3, [pc, #248]	@ (8001208 <MX_TIM1_Init+0x138>)
 8001110:	4a3e      	ldr	r2, [pc, #248]	@ (800120c <MX_TIM1_Init+0x13c>)
 8001112:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 89;
 8001114:	4b3c      	ldr	r3, [pc, #240]	@ (8001208 <MX_TIM1_Init+0x138>)
 8001116:	2259      	movs	r2, #89	@ 0x59
 8001118:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b3b      	ldr	r3, [pc, #236]	@ (8001208 <MX_TIM1_Init+0x138>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001120:	4b39      	ldr	r3, [pc, #228]	@ (8001208 <MX_TIM1_Init+0x138>)
 8001122:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001126:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001128:	4b37      	ldr	r3, [pc, #220]	@ (8001208 <MX_TIM1_Init+0x138>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800112e:	4b36      	ldr	r3, [pc, #216]	@ (8001208 <MX_TIM1_Init+0x138>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001134:	4b34      	ldr	r3, [pc, #208]	@ (8001208 <MX_TIM1_Init+0x138>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800113a:	4833      	ldr	r0, [pc, #204]	@ (8001208 <MX_TIM1_Init+0x138>)
 800113c:	f001 fef8 	bl	8002f30 <HAL_TIM_Base_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001146:	f000 fc99 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800114e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001150:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001154:	4619      	mov	r1, r3
 8001156:	482c      	ldr	r0, [pc, #176]	@ (8001208 <MX_TIM1_Init+0x138>)
 8001158:	f002 f904 	bl	8003364 <HAL_TIM_ConfigClockSource>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001162:	f000 fc8b 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001166:	4828      	ldr	r0, [pc, #160]	@ (8001208 <MX_TIM1_Init+0x138>)
 8001168:	f001 ff31 	bl	8002fce <HAL_TIM_PWM_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001172:	f000 fc83 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800117e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001182:	4619      	mov	r1, r3
 8001184:	4820      	ldr	r0, [pc, #128]	@ (8001208 <MX_TIM1_Init+0x138>)
 8001186:	f002 fc8d 	bl	8003aa4 <HAL_TIMEx_MasterConfigSynchronization>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001190:	f000 fc74 	bl	8001a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001194:	2360      	movs	r3, #96	@ 0x60
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011a0:	2300      	movs	r3, #0
 80011a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011a8:	2300      	movs	r3, #0
 80011aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b4:	2208      	movs	r2, #8
 80011b6:	4619      	mov	r1, r3
 80011b8:	4813      	ldr	r0, [pc, #76]	@ (8001208 <MX_TIM1_Init+0x138>)
 80011ba:	f002 f811 	bl	80031e0 <HAL_TIM_PWM_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80011c4:	f000 fc5a 	bl	8001a7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	4807      	ldr	r0, [pc, #28]	@ (8001208 <MX_TIM1_Init+0x138>)
 80011ec:	f002 fcc8 	bl	8003b80 <HAL_TIMEx_ConfigBreakDeadTime>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80011f6:	f000 fc41 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011fa:	4803      	ldr	r0, [pc, #12]	@ (8001208 <MX_TIM1_Init+0x138>)
 80011fc:	f000 fcd2 	bl	8001ba4 <HAL_TIM_MspPostInit>

}
 8001200:	bf00      	nop
 8001202:	3758      	adds	r7, #88	@ 0x58
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200001f4 	.word	0x200001f4
 800120c:	40010000 	.word	0x40010000

08001210 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08e      	sub	sp, #56	@ 0x38
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	615a      	str	r2, [r3, #20]
 800123e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001240:	4b2d      	ldr	r3, [pc, #180]	@ (80012f8 <MX_TIM2_Init+0xe8>)
 8001242:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001246:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 8001248:	4b2b      	ldr	r3, [pc, #172]	@ (80012f8 <MX_TIM2_Init+0xe8>)
 800124a:	2259      	movs	r2, #89	@ 0x59
 800124c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <MX_TIM2_Init+0xe8>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8001254:	4b28      	ldr	r3, [pc, #160]	@ (80012f8 <MX_TIM2_Init+0xe8>)
 8001256:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800125a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b26      	ldr	r3, [pc, #152]	@ (80012f8 <MX_TIM2_Init+0xe8>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b25      	ldr	r3, [pc, #148]	@ (80012f8 <MX_TIM2_Init+0xe8>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001268:	4823      	ldr	r0, [pc, #140]	@ (80012f8 <MX_TIM2_Init+0xe8>)
 800126a:	f001 fe61 	bl	8002f30 <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001274:	f000 fc02 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001282:	4619      	mov	r1, r3
 8001284:	481c      	ldr	r0, [pc, #112]	@ (80012f8 <MX_TIM2_Init+0xe8>)
 8001286:	f002 f86d 	bl	8003364 <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001290:	f000 fbf4 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001294:	4818      	ldr	r0, [pc, #96]	@ (80012f8 <MX_TIM2_Init+0xe8>)
 8001296:	f001 fe9a 	bl	8002fce <HAL_TIM_PWM_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80012a0:	f000 fbec 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ac:	f107 0320 	add.w	r3, r7, #32
 80012b0:	4619      	mov	r1, r3
 80012b2:	4811      	ldr	r0, [pc, #68]	@ (80012f8 <MX_TIM2_Init+0xe8>)
 80012b4:	f002 fbf6 	bl	8003aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80012be:	f000 fbdd 	bl	8001a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c2:	2360      	movs	r3, #96	@ 0x60
 80012c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2208      	movs	r2, #8
 80012d6:	4619      	mov	r1, r3
 80012d8:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <MX_TIM2_Init+0xe8>)
 80012da:	f001 ff81 	bl	80031e0 <HAL_TIM_PWM_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80012e4:	f000 fbca 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012e8:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <MX_TIM2_Init+0xe8>)
 80012ea:	f000 fc5b 	bl	8001ba4 <HAL_TIM_MspPostInit>

}
 80012ee:	bf00      	nop
 80012f0:	3738      	adds	r7, #56	@ 0x38
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000023c 	.word	0x2000023c

080012fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08e      	sub	sp, #56	@ 0x38
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001302:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001310:	f107 0320 	add.w	r3, r7, #32
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	615a      	str	r2, [r3, #20]
 800132a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800132c:	4b2c      	ldr	r3, [pc, #176]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 800132e:	4a2d      	ldr	r2, [pc, #180]	@ (80013e4 <MX_TIM3_Init+0xe8>)
 8001330:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001332:	4b2b      	ldr	r3, [pc, #172]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 8001334:	2253      	movs	r2, #83	@ 0x53
 8001336:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b29      	ldr	r3, [pc, #164]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800133e:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 8001340:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001344:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b26      	ldr	r3, [pc, #152]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b24      	ldr	r3, [pc, #144]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001352:	4823      	ldr	r0, [pc, #140]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 8001354:	f001 fdec 	bl	8002f30 <HAL_TIM_Base_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800135e:	f000 fb8d 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001362:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001366:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001368:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800136c:	4619      	mov	r1, r3
 800136e:	481c      	ldr	r0, [pc, #112]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 8001370:	f001 fff8 	bl	8003364 <HAL_TIM_ConfigClockSource>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800137a:	f000 fb7f 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800137e:	4818      	ldr	r0, [pc, #96]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 8001380:	f001 fe25 	bl	8002fce <HAL_TIM_PWM_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800138a:	f000 fb77 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001396:	f107 0320 	add.w	r3, r7, #32
 800139a:	4619      	mov	r1, r3
 800139c:	4810      	ldr	r0, [pc, #64]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 800139e:	f002 fb81 	bl	8003aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013a8:	f000 fb68 	bl	8001a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ac:	2360      	movs	r3, #96	@ 0x60
 80013ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2204      	movs	r2, #4
 80013c0:	4619      	mov	r1, r3
 80013c2:	4807      	ldr	r0, [pc, #28]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 80013c4:	f001 ff0c 	bl	80031e0 <HAL_TIM_PWM_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013ce:	f000 fb55 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013d2:	4803      	ldr	r0, [pc, #12]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 80013d4:	f000 fbe6 	bl	8001ba4 <HAL_TIM_MspPostInit>

}
 80013d8:	bf00      	nop
 80013da:	3738      	adds	r7, #56	@ 0x38
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000284 	.word	0x20000284
 80013e4:	40000400 	.word	0x40000400

080013e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fc:	463b      	mov	r3, r7
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001404:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <MX_TIM4_Init+0x90>)
 8001406:	4a1d      	ldr	r2, [pc, #116]	@ (800147c <MX_TIM4_Init+0x94>)
 8001408:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800140a:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <MX_TIM4_Init+0x90>)
 800140c:	2253      	movs	r2, #83	@ 0x53
 800140e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001410:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <MX_TIM4_Init+0x90>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001416:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <MX_TIM4_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141c:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <MX_TIM4_Init+0x90>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <MX_TIM4_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001428:	4813      	ldr	r0, [pc, #76]	@ (8001478 <MX_TIM4_Init+0x90>)
 800142a:	f001 fd81 	bl	8002f30 <HAL_TIM_Base_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001434:	f000 fb22 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001438:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800143c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	4619      	mov	r1, r3
 8001444:	480c      	ldr	r0, [pc, #48]	@ (8001478 <MX_TIM4_Init+0x90>)
 8001446:	f001 ff8d 	bl	8003364 <HAL_TIM_ConfigClockSource>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001450:	f000 fb14 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	@ (8001478 <MX_TIM4_Init+0x90>)
 8001462:	f002 fb1f 	bl	8003aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 800146c:	f000 fb06 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200002cc 	.word	0x200002cc
 800147c:	40000800 	.word	0x40000800

08001480 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 8001486:	4a12      	ldr	r2, [pc, #72]	@ (80014d0 <MX_USART2_UART_Init+0x50>)
 8001488:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 800148c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001490:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 80014b8:	f002 fbb4 	bl	8003c24 <HAL_UART_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014c2:	f000 fadb 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000314 	.word	0x20000314
 80014d0:	40004400 	.word	0x40004400

080014d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b3e      	ldr	r3, [pc, #248]	@ (80015e8 <MX_GPIO_Init+0x114>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a3d      	ldr	r2, [pc, #244]	@ (80015e8 <MX_GPIO_Init+0x114>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b3b      	ldr	r3, [pc, #236]	@ (80015e8 <MX_GPIO_Init+0x114>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b37      	ldr	r3, [pc, #220]	@ (80015e8 <MX_GPIO_Init+0x114>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a36      	ldr	r2, [pc, #216]	@ (80015e8 <MX_GPIO_Init+0x114>)
 8001510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b34      	ldr	r3, [pc, #208]	@ (80015e8 <MX_GPIO_Init+0x114>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b30      	ldr	r3, [pc, #192]	@ (80015e8 <MX_GPIO_Init+0x114>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a2f      	ldr	r2, [pc, #188]	@ (80015e8 <MX_GPIO_Init+0x114>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b2d      	ldr	r3, [pc, #180]	@ (80015e8 <MX_GPIO_Init+0x114>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b29      	ldr	r3, [pc, #164]	@ (80015e8 <MX_GPIO_Init+0x114>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a28      	ldr	r2, [pc, #160]	@ (80015e8 <MX_GPIO_Init+0x114>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b26      	ldr	r3, [pc, #152]	@ (80015e8 <MX_GPIO_Init+0x114>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|TRIG_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8001560:	4822      	ldr	r0, [pc, #136]	@ (80015ec <MX_GPIO_Init+0x118>)
 8001562:	f001 f833 	bl	80025cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2130      	movs	r1, #48	@ 0x30
 800156a:	4821      	ldr	r0, [pc, #132]	@ (80015f0 <MX_GPIO_Init+0x11c>)
 800156c:	f001 f82e 	bl	80025cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001570:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001576:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	481b      	ldr	r0, [pc, #108]	@ (80015f4 <MX_GPIO_Init+0x120>)
 8001588:	f000 fe84 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 TRIG_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|TRIG_Pin;
 800158c:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4811      	ldr	r0, [pc, #68]	@ (80015ec <MX_GPIO_Init+0x118>)
 80015a6:	f000 fe75 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 80015aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	480b      	ldr	r0, [pc, #44]	@ (80015ec <MX_GPIO_Init+0x118>)
 80015c0:	f000 fe68 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015c4:	2330      	movs	r3, #48	@ 0x30
 80015c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4805      	ldr	r0, [pc, #20]	@ (80015f0 <MX_GPIO_Init+0x11c>)
 80015dc:	f000 fe5a 	bl	8002294 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	@ 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40020800 	.word	0x40020800

080015f8 <SetServoAngle>:

/* USER CODE BEGIN 4 */
void SetServoAngle(uint8_t angle)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]


    uint16_t pulse = 500 + (angle * 2000) / 180;
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001608:	fb02 f303 	mul.w	r3, r2, r3
 800160c:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <SetServoAngle+0x40>)
 800160e:	fb82 1203 	smull	r1, r2, r2, r3
 8001612:	441a      	add	r2, r3
 8001614:	11d2      	asrs	r2, r2, #7
 8001616:	17db      	asrs	r3, r3, #31
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	b29b      	uxth	r3, r3
 800161c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001620:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse);
 8001622:	4b06      	ldr	r3, [pc, #24]	@ (800163c <SetServoAngle+0x44>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	89fa      	ldrh	r2, [r7, #14]
 8001628:	639a      	str	r2, [r3, #56]	@ 0x38



}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	b60b60b7 	.word	0xb60b60b7
 800163c:	20000284 	.word	0x20000284

08001640 <usDelay>:



/* USER CODE END 4 */
void usDelay(uint32_t uSec)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d801      	bhi.n	8001652 <usDelay+0x12>
 800164e:	2302      	movs	r3, #2
 8001650:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1;
 8001652:	4a13      	ldr	r2, [pc, #76]	@ (80016a0 <usDelay+0x60>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	62d3      	str	r3, [r2, #44]	@ 0x2c
	usTIM->EGR = 1;
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <usDelay+0x60>)
 800165c:	2201      	movs	r2, #1
 800165e:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <usDelay+0x60>)
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	4a0e      	ldr	r2, [pc, #56]	@ (80016a0 <usDelay+0x60>)
 8001666:	f023 0301 	bic.w	r3, r3, #1
 800166a:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <usDelay+0x60>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0b      	ldr	r2, [pc, #44]	@ (80016a0 <usDelay+0x60>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8001678:	bf00      	nop
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <usDelay+0x60>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b01      	cmp	r3, #1
 8001684:	d1f9      	bne.n	800167a <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <usDelay+0x60>)
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	4a05      	ldr	r2, [pc, #20]	@ (80016a0 <usDelay+0x60>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6113      	str	r3, [r2, #16]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40000800 	.word	0x40000800
 80016a4:	00000000 	.word	0x00000000

080016a8 <Measure_Distance>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
float Measure_Distance(void)
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016b2:	4831      	ldr	r0, [pc, #196]	@ (8001778 <Measure_Distance+0xd0>)
 80016b4:	f000 ff8a 	bl	80025cc <HAL_GPIO_WritePin>
	usDelay(3);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f7ff ffc1 	bl	8001640 <usDelay>

	// 1. Output 10 usec TRIG
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 80016be:	2201      	movs	r2, #1
 80016c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016c4:	482c      	ldr	r0, [pc, #176]	@ (8001778 <Measure_Distance+0xd0>)
 80016c6:	f000 ff81 	bl	80025cc <HAL_GPIO_WritePin>
	usDelay(10);
 80016ca:	200a      	movs	r0, #10
 80016cc:	f7ff ffb8 	bl	8001640 <usDelay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016d6:	4828      	ldr	r0, [pc, #160]	@ (8001778 <Measure_Distance+0xd0>)
 80016d8:	f000 ff78 	bl	80025cc <HAL_GPIO_WritePin>

	// 2. Wait for ECHO pin rising edge
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET);
 80016dc:	bf00      	nop
 80016de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016e2:	4825      	ldr	r0, [pc, #148]	@ (8001778 <Measure_Distance+0xd0>)
 80016e4:	f000 ff5a 	bl	800259c <HAL_GPIO_ReadPin>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f7      	beq.n	80016de <Measure_Distance+0x36>

	// 3. Start measuring ECHO pulse width in usec
	numTicks = 0;
 80016ee:	4b23      	ldr	r3, [pc, #140]	@ (800177c <Measure_Distance+0xd4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 80016f4:	e007      	b.n	8001706 <Measure_Distance+0x5e>
	{
		numTicks++;
 80016f6:	4b21      	ldr	r3, [pc, #132]	@ (800177c <Measure_Distance+0xd4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	4a1f      	ldr	r2, [pc, #124]	@ (800177c <Measure_Distance+0xd4>)
 80016fe:	6013      	str	r3, [r2, #0]
		usDelay(2); //2.8usec
 8001700:	2002      	movs	r0, #2
 8001702:	f7ff ff9d 	bl	8001640 <usDelay>
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8001706:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800170a:	481b      	ldr	r0, [pc, #108]	@ (8001778 <Measure_Distance+0xd0>)
 800170c:	f000 ff46 	bl	800259c <HAL_GPIO_ReadPin>
 8001710:	4603      	mov	r3, r0
 8001712:	2b01      	cmp	r3, #1
 8001714:	d0ef      	beq.n	80016f6 <Measure_Distance+0x4e>
	};

	// 4. Estimate distance in cm
     	distance = (numTicks + 0.0f) * 2.8 * speedOfSound;
 8001716:	4b19      	ldr	r3, [pc, #100]	@ (800177c <Measure_Distance+0xd4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001722:	ee17 0a90 	vmov	r0, s15
 8001726:	f7fe ff17 	bl	8000558 <__aeabi_f2d>
 800172a:	a311      	add	r3, pc, #68	@ (adr r3, 8001770 <Measure_Distance+0xc8>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7fe ff6a 	bl	8000608 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4614      	mov	r4, r2
 800173a:	461d      	mov	r5, r3
 800173c:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <Measure_Distance+0xd8>)
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe ff0a 	bl	8000558 <__aeabi_f2d>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4620      	mov	r0, r4
 800174a:	4629      	mov	r1, r5
 800174c:	f7fe ff5c 	bl	8000608 <__aeabi_dmul>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff fa2e 	bl	8000bb8 <__aeabi_d2f>
 800175c:	4603      	mov	r3, r0
 800175e:	4a09      	ldr	r2, [pc, #36]	@ (8001784 <Measure_Distance+0xdc>)
 8001760:	6013      	str	r3, [r2, #0]

	// 5. Print to UART terminal for debugging
	//sprintf(uartBuf, "Distance (cm) = %.1f\r\n", distance);
	//HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);

	 return distance;
 8001762:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <Measure_Distance+0xdc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	ee07 3a90 	vmov	s15, r3
}
 800176a:	eeb0 0a67 	vmov.f32	s0, s15
 800176e:	bdb0      	pop	{r4, r5, r7, pc}
 8001770:	66666666 	.word	0x66666666
 8001774:	40066666 	.word	0x40066666
 8001778:	40020000 	.word	0x40020000
 800177c:	20000364 	.word	0x20000364
 8001780:	3c8c7e28 	.word	0x3c8c7e28
 8001784:	20000360 	.word	0x20000360

08001788 <StartMotors>:



void StartMotors()
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800178c:	2201      	movs	r2, #1
 800178e:	2110      	movs	r1, #16
 8001790:	480e      	ldr	r0, [pc, #56]	@ (80017cc <StartMotors+0x44>)
 8001792:	f000 ff1b 	bl	80025cc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2120      	movs	r1, #32
 800179a:	480c      	ldr	r0, [pc, #48]	@ (80017cc <StartMotors+0x44>)
 800179c:	f000 ff16 	bl	80025cc <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 1000);
 80017a0:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <StartMotors+0x48>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017a8:	63da      	str	r2, [r3, #60]	@ 0x3c

		    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80017aa:	2201      	movs	r2, #1
 80017ac:	2140      	movs	r1, #64	@ 0x40
 80017ae:	4809      	ldr	r0, [pc, #36]	@ (80017d4 <StartMotors+0x4c>)
 80017b0:	f000 ff0c 	bl	80025cc <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2180      	movs	r1, #128	@ 0x80
 80017b8:	4806      	ldr	r0, [pc, #24]	@ (80017d4 <StartMotors+0x4c>)
 80017ba:	f000 ff07 	bl	80025cc <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 1000);
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <StartMotors+0x50>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017c6:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40020400 	.word	0x40020400
 80017d0:	2000023c 	.word	0x2000023c
 80017d4:	40020000 	.word	0x40020000
 80017d8:	200001f4 	.word	0x200001f4

080017dc <stopMotors>:


void stopMotors()
		{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2110      	movs	r1, #16
 80017e4:	4809      	ldr	r0, [pc, #36]	@ (800180c <stopMotors+0x30>)
 80017e6:	f000 fef1 	bl	80025cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2120      	movs	r1, #32
 80017ee:	4807      	ldr	r0, [pc, #28]	@ (800180c <stopMotors+0x30>)
 80017f0:	f000 feec 	bl	80025cc <HAL_GPIO_WritePin>

		    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2140      	movs	r1, #64	@ 0x40
 80017f8:	4805      	ldr	r0, [pc, #20]	@ (8001810 <stopMotors+0x34>)
 80017fa:	f000 fee7 	bl	80025cc <HAL_GPIO_WritePin>
		   	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2180      	movs	r1, #128	@ 0x80
 8001802:	4803      	ldr	r0, [pc, #12]	@ (8001810 <stopMotors+0x34>)
 8001804:	f000 fee2 	bl	80025cc <HAL_GPIO_WritePin>

		}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40020400 	.word	0x40020400
 8001810:	40020000 	.word	0x40020000

08001814 <back>:



void back()
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2110      	movs	r1, #16
 800181c:	480e      	ldr	r0, [pc, #56]	@ (8001858 <back+0x44>)
 800181e:	f000 fed5 	bl	80025cc <HAL_GPIO_WritePin>
	 		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001822:	2201      	movs	r2, #1
 8001824:	2120      	movs	r1, #32
 8001826:	480c      	ldr	r0, [pc, #48]	@ (8001858 <back+0x44>)
 8001828:	f000 fed0 	bl	80025cc <HAL_GPIO_WritePin>
			    __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 900);
 800182c:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <back+0x48>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8001834:	63da      	str	r2, [r3, #60]	@ 0x3c

			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2140      	movs	r1, #64	@ 0x40
 800183a:	4809      	ldr	r0, [pc, #36]	@ (8001860 <back+0x4c>)
 800183c:	f000 fec6 	bl	80025cc <HAL_GPIO_WritePin>
			  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001840:	2201      	movs	r2, #1
 8001842:	2180      	movs	r1, #128	@ 0x80
 8001844:	4806      	ldr	r0, [pc, #24]	@ (8001860 <back+0x4c>)
 8001846:	f000 fec1 	bl	80025cc <HAL_GPIO_WritePin>
			    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 900);
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <back+0x50>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8001852:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40020400 	.word	0x40020400
 800185c:	2000023c 	.word	0x2000023c
 8001860:	40020000 	.word	0x40020000
 8001864:	200001f4 	.word	0x200001f4

08001868 <Right>:


void Right()
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800186c:	2201      	movs	r2, #1
 800186e:	2110      	movs	r1, #16
 8001870:	480e      	ldr	r0, [pc, #56]	@ (80018ac <Right+0x44>)
 8001872:	f000 feab 	bl	80025cc <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2120      	movs	r1, #32
 800187a:	480c      	ldr	r0, [pc, #48]	@ (80018ac <Right+0x44>)
 800187c:	f000 fea6 	bl	80025cc <HAL_GPIO_WritePin>
	   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 900);
 8001880:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <Right+0x48>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8001888:	63da      	str	r2, [r3, #60]	@ 0x3c

	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2140      	movs	r1, #64	@ 0x40
 800188e:	4809      	ldr	r0, [pc, #36]	@ (80018b4 <Right+0x4c>)
 8001890:	f000 fe9c 	bl	80025cc <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001894:	2201      	movs	r2, #1
 8001896:	2180      	movs	r1, #128	@ 0x80
 8001898:	4806      	ldr	r0, [pc, #24]	@ (80018b4 <Right+0x4c>)
 800189a:	f000 fe97 	bl	80025cc <HAL_GPIO_WritePin>
	   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 900);
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <Right+0x50>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80018a6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40020400 	.word	0x40020400
 80018b0:	2000023c 	.word	0x2000023c
 80018b4:	40020000 	.word	0x40020000
 80018b8:	200001f4 	.word	0x200001f4

080018bc <left>:


void left()
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2110      	movs	r1, #16
 80018c4:	480e      	ldr	r0, [pc, #56]	@ (8001900 <left+0x44>)
 80018c6:	f000 fe81 	bl	80025cc <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80018ca:	2201      	movs	r2, #1
 80018cc:	2120      	movs	r1, #32
 80018ce:	480c      	ldr	r0, [pc, #48]	@ (8001900 <left+0x44>)
 80018d0:	f000 fe7c 	bl	80025cc <HAL_GPIO_WritePin>
	   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 900);
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <left+0x48>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80018dc:	63da      	str	r2, [r3, #60]	@ 0x3c

	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80018de:	2201      	movs	r2, #1
 80018e0:	2140      	movs	r1, #64	@ 0x40
 80018e2:	4809      	ldr	r0, [pc, #36]	@ (8001908 <left+0x4c>)
 80018e4:	f000 fe72 	bl	80025cc <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2180      	movs	r1, #128	@ 0x80
 80018ec:	4806      	ldr	r0, [pc, #24]	@ (8001908 <left+0x4c>)
 80018ee:	f000 fe6d 	bl	80025cc <HAL_GPIO_WritePin>
	   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 900);
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <left+0x50>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80018fa:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40020400 	.word	0x40020400
 8001904:	2000023c 	.word	0x2000023c
 8001908:	40020000 	.word	0x40020000
 800190c:	200001f4 	.word	0x200001f4

08001910 <ScanServoForClearPath>:



uint8_t ScanServoForClearPath()
{
 8001910:	b5b0      	push	{r4, r5, r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af04      	add	r7, sp, #16
	float currentDistance;
	 float maxDistance = 0;
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
	uint8_t bestAngle = 90;
 800191c:	235a      	movs	r3, #90	@ 0x5a
 800191e:	71fb      	strb	r3, [r7, #7]

    for (uint8_t angle = 90; angle <= 180; angle += 10)
 8001920:	235a      	movs	r3, #90	@ 0x5a
 8001922:	71bb      	strb	r3, [r7, #6]
 8001924:	e01a      	b.n	800195c <ScanServoForClearPath+0x4c>
    {
        SetServoAngle(angle);
 8001926:	79bb      	ldrb	r3, [r7, #6]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fe65 	bl	80015f8 <SetServoAngle>
        HAL_Delay(100);
 800192e:	2064      	movs	r0, #100	@ 0x64
 8001930:	f000 fba6 	bl	8002080 <HAL_Delay>

        currentDistance = Measure_Distance();
 8001934:	f7ff feb8 	bl	80016a8 <Measure_Distance>
 8001938:	ed87 0a03 	vstr	s0, [r7, #12]
        if (currentDistance > maxDistance)
 800193c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001940:	edd7 7a02 	vldr	s15, [r7, #8]
 8001944:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194c:	dd03      	ble.n	8001956 <ScanServoForClearPath+0x46>
        {
            maxDistance = currentDistance;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	60bb      	str	r3, [r7, #8]
            bestAngle = angle;
 8001952:	79bb      	ldrb	r3, [r7, #6]
 8001954:	71fb      	strb	r3, [r7, #7]
    for (uint8_t angle = 90; angle <= 180; angle += 10)
 8001956:	79bb      	ldrb	r3, [r7, #6]
 8001958:	330a      	adds	r3, #10
 800195a:	71bb      	strb	r3, [r7, #6]
 800195c:	79bb      	ldrb	r3, [r7, #6]
 800195e:	2bb4      	cmp	r3, #180	@ 0xb4
 8001960:	d9e1      	bls.n	8001926 <ScanServoForClearPath+0x16>
        }
    }

    // 2. Scanare invers 180 la 0 (opțional – pt finețe)
    for (uint8_t angle = 180; angle >= 10; angle -= 10)
 8001962:	23b4      	movs	r3, #180	@ 0xb4
 8001964:	717b      	strb	r3, [r7, #5]
 8001966:	e01a      	b.n	800199e <ScanServoForClearPath+0x8e>
    {
        SetServoAngle(angle);
 8001968:	797b      	ldrb	r3, [r7, #5]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fe44 	bl	80015f8 <SetServoAngle>
       HAL_Delay(100);
 8001970:	2064      	movs	r0, #100	@ 0x64
 8001972:	f000 fb85 	bl	8002080 <HAL_Delay>

        currentDistance = Measure_Distance();
 8001976:	f7ff fe97 	bl	80016a8 <Measure_Distance>
 800197a:	ed87 0a03 	vstr	s0, [r7, #12]
        if (currentDistance > maxDistance)
 800197e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001982:	edd7 7a02 	vldr	s15, [r7, #8]
 8001986:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198e:	dd03      	ble.n	8001998 <ScanServoForClearPath+0x88>
        {
            maxDistance = currentDistance;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	60bb      	str	r3, [r7, #8]
            bestAngle = angle;
 8001994:	797b      	ldrb	r3, [r7, #5]
 8001996:	71fb      	strb	r3, [r7, #7]
    for (uint8_t angle = 180; angle >= 10; angle -= 10)
 8001998:	797b      	ldrb	r3, [r7, #5]
 800199a:	3b0a      	subs	r3, #10
 800199c:	717b      	strb	r3, [r7, #5]
 800199e:	797b      	ldrb	r3, [r7, #5]
 80019a0:	2b09      	cmp	r3, #9
 80019a2:	d8e1      	bhi.n	8001968 <ScanServoForClearPath+0x58>
        }
    }


       sprintf(uartBuf, "Distance: %.2f, Max: %.2f, BestAngle: %d\r\n", currentDistance, maxDistance, bestAngle);
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7fe fdd7 	bl	8000558 <__aeabi_f2d>
 80019aa:	4604      	mov	r4, r0
 80019ac:	460d      	mov	r5, r1
 80019ae:	68b8      	ldr	r0, [r7, #8]
 80019b0:	f7fe fdd2 	bl	8000558 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	79f9      	ldrb	r1, [r7, #7]
 80019ba:	9102      	str	r1, [sp, #8]
 80019bc:	e9cd 2300 	strd	r2, r3, [sp]
 80019c0:	4622      	mov	r2, r4
 80019c2:	462b      	mov	r3, r5
 80019c4:	4909      	ldr	r1, [pc, #36]	@ (80019ec <ScanServoForClearPath+0xdc>)
 80019c6:	480a      	ldr	r0, [pc, #40]	@ (80019f0 <ScanServoForClearPath+0xe0>)
 80019c8:	f005 ffb6 	bl	8007938 <siprintf>
       HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 80019cc:	4808      	ldr	r0, [pc, #32]	@ (80019f0 <ScanServoForClearPath+0xe0>)
 80019ce:	f7fe fc57 	bl	8000280 <strlen>
 80019d2:	4603      	mov	r3, r0
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	2364      	movs	r3, #100	@ 0x64
 80019d8:	4905      	ldr	r1, [pc, #20]	@ (80019f0 <ScanServoForClearPath+0xe0>)
 80019da:	4806      	ldr	r0, [pc, #24]	@ (80019f4 <ScanServoForClearPath+0xe4>)
 80019dc:	f002 f972 	bl	8003cc4 <HAL_UART_Transmit>

    return bestAngle;
 80019e0:	79fb      	ldrb	r3, [r7, #7]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bdb0      	pop	{r4, r5, r7, pc}
 80019ea:	bf00      	nop
 80019ec:	08009bc4 	.word	0x08009bc4
 80019f0:	20000368 	.word	0x20000368
 80019f4:	20000314 	.word	0x20000314

080019f8 <StartDefaultTask>:


/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	    if (Measure_Distance() < 10)
 8001a00:	f7ff fe52 	bl	80016a8 <Measure_Distance>
 8001a04:	eef0 7a40 	vmov.f32	s15, s0
 8001a08:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	d52f      	bpl.n	8001a76 <StartDefaultTask+0x7e>
	    {

	        back();
 8001a16:	f7ff fefd 	bl	8001814 <back>
	        HAL_Delay(500);
 8001a1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a1e:	f000 fb2f 	bl	8002080 <HAL_Delay>

	        stopMotors();
 8001a22:	f7ff fedb 	bl	80017dc <stopMotors>
	        HAL_Delay(1000);
 8001a26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a2a:	f000 fb29 	bl	8002080 <HAL_Delay>

	        int8_t bestAngle = ScanServoForClearPath();
 8001a2e:	f7ff ff6f 	bl	8001910 <ScanServoForClearPath>
 8001a32:	4603      	mov	r3, r0
 8001a34:	73fb      	strb	r3, [r7, #15]
	        SetServoAngle(90);
 8001a36:	205a      	movs	r0, #90	@ 0x5a
 8001a38:	f7ff fdde 	bl	80015f8 <SetServoAngle>
	        HAL_Delay(200);
 8001a3c:	20c8      	movs	r0, #200	@ 0xc8
 8001a3e:	f000 fb1f 	bl	8002080 <HAL_Delay>

	        if (bestAngle <= 20)
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	2b14      	cmp	r3, #20
 8001a48:	dc08      	bgt.n	8001a5c <StartDefaultTask+0x64>
	        {
	            left();
 8001a4a:	f7ff ff37 	bl	80018bc <left>
	            HAL_Delay(500); // întoarce-te un pic
 8001a4e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a52:	f000 fb15 	bl	8002080 <HAL_Delay>
	            stopMotors();
 8001a56:	f7ff fec1 	bl	80017dc <stopMotors>
 8001a5a:	e7d1      	b.n	8001a00 <StartDefaultTask+0x8>
	        }
	        else if (bestAngle >= 25)
 8001a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a60:	2b18      	cmp	r3, #24
 8001a62:	ddcd      	ble.n	8001a00 <StartDefaultTask+0x8>
	        {
	            Right();
 8001a64:	f7ff ff00 	bl	8001868 <Right>
	            HAL_Delay(500);
 8001a68:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a6c:	f000 fb08 	bl	8002080 <HAL_Delay>
	            stopMotors();
 8001a70:	f7ff feb4 	bl	80017dc <stopMotors>
 8001a74:	e7c4      	b.n	8001a00 <StartDefaultTask+0x8>

	    }
	    else
	    {
	        // Dacă nu e obstacol, mergi înainte
	        StartMotors();
 8001a76:	f7ff fe87 	bl	8001788 <StartMotors>
	    if (Measure_Distance() < 10)
 8001a7a:	e7c1      	b.n	8001a00 <StartDefaultTask+0x8>

08001a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
}
 8001a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <Error_Handler+0x8>

08001a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <HAL_MspInit+0x54>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	4a11      	ldr	r2, [pc, #68]	@ (8001adc <HAL_MspInit+0x54>)
 8001a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <HAL_MspInit+0x54>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <HAL_MspInit+0x54>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <HAL_MspInit+0x54>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aba:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <HAL_MspInit+0x54>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	210f      	movs	r1, #15
 8001aca:	f06f 0001 	mvn.w	r0, #1
 8001ace:	f000 fbb8 	bl	8002242 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800

08001ae0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a29      	ldr	r2, [pc, #164]	@ (8001b94 <HAL_TIM_Base_MspInit+0xb4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d10e      	bne.n	8001b10 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	4b28      	ldr	r3, [pc, #160]	@ (8001b98 <HAL_TIM_Base_MspInit+0xb8>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	4a27      	ldr	r2, [pc, #156]	@ (8001b98 <HAL_TIM_Base_MspInit+0xb8>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b02:	4b25      	ldr	r3, [pc, #148]	@ (8001b98 <HAL_TIM_Base_MspInit+0xb8>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b0e:	e03a      	b.n	8001b86 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b18:	d10e      	bne.n	8001b38 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b98 <HAL_TIM_Base_MspInit+0xb8>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	4a1d      	ldr	r2, [pc, #116]	@ (8001b98 <HAL_TIM_Base_MspInit+0xb8>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <HAL_TIM_Base_MspInit+0xb8>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
}
 8001b36:	e026      	b.n	8001b86 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a17      	ldr	r2, [pc, #92]	@ (8001b9c <HAL_TIM_Base_MspInit+0xbc>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d10e      	bne.n	8001b60 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <HAL_TIM_Base_MspInit+0xb8>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	4a13      	ldr	r2, [pc, #76]	@ (8001b98 <HAL_TIM_Base_MspInit+0xb8>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b52:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <HAL_TIM_Base_MspInit+0xb8>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
}
 8001b5e:	e012      	b.n	8001b86 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba0 <HAL_TIM_Base_MspInit+0xc0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d10d      	bne.n	8001b86 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <HAL_TIM_Base_MspInit+0xb8>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	4a09      	ldr	r2, [pc, #36]	@ (8001b98 <HAL_TIM_Base_MspInit+0xb8>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7a:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <HAL_TIM_Base_MspInit+0xb8>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
}
 8001b86:	bf00      	nop
 8001b88:	371c      	adds	r7, #28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40010000 	.word	0x40010000
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40000400 	.word	0x40000400
 8001ba0:	40000800 	.word	0x40000800

08001ba4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	@ 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a37      	ldr	r2, [pc, #220]	@ (8001ca0 <HAL_TIM_MspPostInit+0xfc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d11f      	bne.n	8001c06 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b36      	ldr	r3, [pc, #216]	@ (8001ca4 <HAL_TIM_MspPostInit+0x100>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	4a35      	ldr	r2, [pc, #212]	@ (8001ca4 <HAL_TIM_MspPostInit+0x100>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd6:	4b33      	ldr	r3, [pc, #204]	@ (8001ca4 <HAL_TIM_MspPostInit+0x100>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001be2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	482a      	ldr	r0, [pc, #168]	@ (8001ca8 <HAL_TIM_MspPostInit+0x104>)
 8001c00:	f000 fb48 	bl	8002294 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c04:	e047      	b.n	8001c96 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c0e:	d11f      	bne.n	8001c50 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	4b23      	ldr	r3, [pc, #140]	@ (8001ca4 <HAL_TIM_MspPostInit+0x100>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c18:	4a22      	ldr	r2, [pc, #136]	@ (8001ca4 <HAL_TIM_MspPostInit+0x100>)
 8001c1a:	f043 0302 	orr.w	r3, r3, #2
 8001c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c20:	4b20      	ldr	r3, [pc, #128]	@ (8001ca4 <HAL_TIM_MspPostInit+0x100>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	4818      	ldr	r0, [pc, #96]	@ (8001cac <HAL_TIM_MspPostInit+0x108>)
 8001c4a:	f000 fb23 	bl	8002294 <HAL_GPIO_Init>
}
 8001c4e:	e022      	b.n	8001c96 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a16      	ldr	r2, [pc, #88]	@ (8001cb0 <HAL_TIM_MspPostInit+0x10c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d11d      	bne.n	8001c96 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <HAL_TIM_MspPostInit+0x100>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	4a10      	ldr	r2, [pc, #64]	@ (8001ca4 <HAL_TIM_MspPostInit+0x100>)
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <HAL_TIM_MspPostInit+0x100>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c76:	2380      	movs	r3, #128	@ 0x80
 8001c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c86:	2302      	movs	r3, #2
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4808      	ldr	r0, [pc, #32]	@ (8001cb4 <HAL_TIM_MspPostInit+0x110>)
 8001c92:	f000 faff 	bl	8002294 <HAL_GPIO_Init>
}
 8001c96:	bf00      	nop
 8001c98:	3728      	adds	r7, #40	@ 0x28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40020800 	.word	0x40020800

08001cb8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	@ 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a19      	ldr	r2, [pc, #100]	@ (8001d3c <HAL_UART_MspInit+0x84>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d12b      	bne.n	8001d32 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <HAL_UART_MspInit+0x88>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	4a17      	ldr	r2, [pc, #92]	@ (8001d40 <HAL_UART_MspInit+0x88>)
 8001ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <HAL_UART_MspInit+0x88>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <HAL_UART_MspInit+0x88>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a10      	ldr	r2, [pc, #64]	@ (8001d40 <HAL_UART_MspInit+0x88>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <HAL_UART_MspInit+0x88>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d12:	230c      	movs	r3, #12
 8001d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d22:	2307      	movs	r3, #7
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4805      	ldr	r0, [pc, #20]	@ (8001d44 <HAL_UART_MspInit+0x8c>)
 8001d2e:	f000 fab1 	bl	8002294 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d32:	bf00      	nop
 8001d34:	3728      	adds	r7, #40	@ 0x28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40004400 	.word	0x40004400
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020000 	.word	0x40020000

08001d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <NMI_Handler+0x4>

08001d50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <HardFault_Handler+0x4>

08001d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <MemManage_Handler+0x4>

08001d60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <BusFault_Handler+0x4>

08001d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <UsageFault_Handler+0x4>

08001d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d82:	f000 f95d 	bl	8002040 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d86:	f004 f83f 	bl	8005e08 <xTaskGetSchedulerState>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d001      	beq.n	8001d94 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001d90:	f004 fe3a 	bl	8006a08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return 1;
 8001d9c:	2301      	movs	r3, #1
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_kill>:

int _kill(int pid, int sig)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001db2:	f005 fe79 	bl	8007aa8 <__errno>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2216      	movs	r2, #22
 8001dba:	601a      	str	r2, [r3, #0]
  return -1;
 8001dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_exit>:

void _exit (int status)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ffe7 	bl	8001da8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dda:	bf00      	nop
 8001ddc:	e7fd      	b.n	8001dda <_exit+0x12>

08001dde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	e00a      	b.n	8001e06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001df0:	f3af 8000 	nop.w
 8001df4:	4601      	mov	r1, r0
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	60ba      	str	r2, [r7, #8]
 8001dfc:	b2ca      	uxtb	r2, r1
 8001dfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3301      	adds	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	dbf0      	blt.n	8001df0 <_read+0x12>
  }

  return len;
 8001e0e:	687b      	ldr	r3, [r7, #4]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	e009      	b.n	8001e3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	60ba      	str	r2, [r7, #8]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	dbf1      	blt.n	8001e2a <_write+0x12>
  }
  return len;
 8001e46:	687b      	ldr	r3, [r7, #4]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <_close>:

int _close(int file)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e78:	605a      	str	r2, [r3, #4]
  return 0;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <_isatty>:

int _isatty(int file)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e90:	2301      	movs	r3, #1
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b085      	sub	sp, #20
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec0:	4a14      	ldr	r2, [pc, #80]	@ (8001f14 <_sbrk+0x5c>)
 8001ec2:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <_sbrk+0x60>)
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ecc:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d102      	bne.n	8001eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <_sbrk+0x64>)
 8001ed6:	4a12      	ldr	r2, [pc, #72]	@ (8001f20 <_sbrk+0x68>)
 8001ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eda:	4b10      	ldr	r3, [pc, #64]	@ (8001f1c <_sbrk+0x64>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d207      	bcs.n	8001ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee8:	f005 fdde 	bl	8007aa8 <__errno>
 8001eec:	4603      	mov	r3, r0
 8001eee:	220c      	movs	r2, #12
 8001ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef6:	e009      	b.n	8001f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef8:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <_sbrk+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001efe:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <_sbrk+0x64>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	4a05      	ldr	r2, [pc, #20]	@ (8001f1c <_sbrk+0x64>)
 8001f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20018000 	.word	0x20018000
 8001f18:	00000400 	.word	0x00000400
 8001f1c:	200003cc 	.word	0x200003cc
 8001f20:	20004e70 	.word	0x20004e70

08001f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f28:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <SystemInit+0x20>)
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f2e:	4a05      	ldr	r2, [pc, #20]	@ (8001f44 <SystemInit+0x20>)
 8001f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f4c:	f7ff ffea 	bl	8001f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f50:	480c      	ldr	r0, [pc, #48]	@ (8001f84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f52:	490d      	ldr	r1, [pc, #52]	@ (8001f88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f54:	4a0d      	ldr	r2, [pc, #52]	@ (8001f8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f58:	e002      	b.n	8001f60 <LoopCopyDataInit>

08001f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5e:	3304      	adds	r3, #4

08001f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f64:	d3f9      	bcc.n	8001f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f66:	4a0a      	ldr	r2, [pc, #40]	@ (8001f90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f68:	4c0a      	ldr	r4, [pc, #40]	@ (8001f94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f6c:	e001      	b.n	8001f72 <LoopFillZerobss>

08001f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f70:	3204      	adds	r2, #4

08001f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f74:	d3fb      	bcc.n	8001f6e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001f76:	f005 fd9d 	bl	8007ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f7a:	f7ff f803 	bl	8000f84 <main>
  bx  lr    
 8001f7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f88:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001f8c:	08009fcc 	.word	0x08009fcc
  ldr r2, =_sbss
 8001f90:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f94:	20004e70 	.word	0x20004e70

08001f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f98:	e7fe      	b.n	8001f98 <ADC_IRQHandler>
	...

08001f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <HAL_Init+0x40>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8001fdc <HAL_Init+0x40>)
 8001fa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <HAL_Init+0x40>)
 8001fb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb8:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <HAL_Init+0x40>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a07      	ldr	r2, [pc, #28]	@ (8001fdc <HAL_Init+0x40>)
 8001fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f000 f931 	bl	800222c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fca:	200f      	movs	r0, #15
 8001fcc:	f000 f808 	bl	8001fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd0:	f7ff fd5a 	bl	8001a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023c00 	.word	0x40023c00

08001fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe8:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <HAL_InitTick+0x54>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <HAL_InitTick+0x58>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f93b 	bl	800227a <HAL_SYSTICK_Config>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00e      	b.n	800202c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b0f      	cmp	r3, #15
 8002012:	d80a      	bhi.n	800202a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002014:	2200      	movs	r2, #0
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f000 f911 	bl	8002242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002020:	4a06      	ldr	r2, [pc, #24]	@ (800203c <HAL_InitTick+0x5c>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000000 	.word	0x20000000
 8002038:	20000008 	.word	0x20000008
 800203c:	20000004 	.word	0x20000004

08002040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_IncTick+0x20>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <HAL_IncTick+0x24>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a04      	ldr	r2, [pc, #16]	@ (8002064 <HAL_IncTick+0x24>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000008 	.word	0x20000008
 8002064:	200003d0 	.word	0x200003d0

08002068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
   return uwTick;
 800206c:	4b03      	ldr	r3, [pc, #12]	@ (800207c <HAL_GetTick+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	200003d0 	.word	0x200003d0

08002080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002088:	f7ff ffee 	bl	8002068 <HAL_GetTick>
 800208c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d005      	beq.n	80020a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800209a:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <HAL_Delay+0x44>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020a6:	bf00      	nop
 80020a8:	f7ff ffde 	bl	8002068 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d8f7      	bhi.n	80020a8 <HAL_Delay+0x28>
  {
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000008 	.word	0x20000008

080020c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fa:	4a04      	ldr	r2, [pc, #16]	@ (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	60d3      	str	r3, [r2, #12]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002114:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <__NVIC_GetPriorityGrouping+0x18>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	f003 0307 	and.w	r3, r3, #7
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	2b00      	cmp	r3, #0
 800213e:	db0a      	blt.n	8002156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	b2da      	uxtb	r2, r3
 8002144:	490c      	ldr	r1, [pc, #48]	@ (8002178 <__NVIC_SetPriority+0x4c>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	0112      	lsls	r2, r2, #4
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	440b      	add	r3, r1
 8002150:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002154:	e00a      	b.n	800216c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4908      	ldr	r1, [pc, #32]	@ (800217c <__NVIC_SetPriority+0x50>)
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	3b04      	subs	r3, #4
 8002164:	0112      	lsls	r2, r2, #4
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	440b      	add	r3, r1
 800216a:	761a      	strb	r2, [r3, #24]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000e100 	.word	0xe000e100
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	@ 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f1c3 0307 	rsb	r3, r3, #7
 800219a:	2b04      	cmp	r3, #4
 800219c:	bf28      	it	cs
 800219e:	2304      	movcs	r3, #4
 80021a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3304      	adds	r3, #4
 80021a6:	2b06      	cmp	r3, #6
 80021a8:	d902      	bls.n	80021b0 <NVIC_EncodePriority+0x30>
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3b03      	subs	r3, #3
 80021ae:	e000      	b.n	80021b2 <NVIC_EncodePriority+0x32>
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	f04f 32ff 	mov.w	r2, #4294967295
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43da      	mvns	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	401a      	ands	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c8:	f04f 31ff 	mov.w	r1, #4294967295
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	43d9      	mvns	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	4313      	orrs	r3, r2
         );
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3724      	adds	r7, #36	@ 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021f8:	d301      	bcc.n	80021fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00f      	b.n	800221e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002228 <SysTick_Config+0x40>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002206:	210f      	movs	r1, #15
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f7ff ff8e 	bl	800212c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <SysTick_Config+0x40>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002216:	4b04      	ldr	r3, [pc, #16]	@ (8002228 <SysTick_Config+0x40>)
 8002218:	2207      	movs	r2, #7
 800221a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	e000e010 	.word	0xe000e010

0800222c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ff47 	bl	80020c8 <__NVIC_SetPriorityGrouping>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002254:	f7ff ff5c 	bl	8002110 <__NVIC_GetPriorityGrouping>
 8002258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	6978      	ldr	r0, [r7, #20]
 8002260:	f7ff ff8e 	bl	8002180 <NVIC_EncodePriority>
 8002264:	4602      	mov	r2, r0
 8002266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff5d 	bl	800212c <__NVIC_SetPriority>
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ffb0 	bl	80021e8 <SysTick_Config>
 8002288:	4603      	mov	r3, r0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	@ 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	e159      	b.n	8002564 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b0:	2201      	movs	r2, #1
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	f040 8148 	bne.w	800255e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d005      	beq.n	80022e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d130      	bne.n	8002348 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	2203      	movs	r2, #3
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800231c:	2201      	movs	r2, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	f003 0201 	and.w	r2, r3, #1
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b03      	cmp	r3, #3
 8002352:	d017      	beq.n	8002384 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d123      	bne.n	80023d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	08da      	lsrs	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3208      	adds	r2, #8
 8002398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	220f      	movs	r2, #15
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	08da      	lsrs	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3208      	adds	r2, #8
 80023d2:	69b9      	ldr	r1, [r7, #24]
 80023d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0203 	and.w	r2, r3, #3
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80a2 	beq.w	800255e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	4b57      	ldr	r3, [pc, #348]	@ (800257c <HAL_GPIO_Init+0x2e8>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002422:	4a56      	ldr	r2, [pc, #344]	@ (800257c <HAL_GPIO_Init+0x2e8>)
 8002424:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002428:	6453      	str	r3, [r2, #68]	@ 0x44
 800242a:	4b54      	ldr	r3, [pc, #336]	@ (800257c <HAL_GPIO_Init+0x2e8>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002436:	4a52      	ldr	r2, [pc, #328]	@ (8002580 <HAL_GPIO_Init+0x2ec>)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a49      	ldr	r2, [pc, #292]	@ (8002584 <HAL_GPIO_Init+0x2f0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d019      	beq.n	8002496 <HAL_GPIO_Init+0x202>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a48      	ldr	r2, [pc, #288]	@ (8002588 <HAL_GPIO_Init+0x2f4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_GPIO_Init+0x1fe>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a47      	ldr	r2, [pc, #284]	@ (800258c <HAL_GPIO_Init+0x2f8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00d      	beq.n	800248e <HAL_GPIO_Init+0x1fa>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a46      	ldr	r2, [pc, #280]	@ (8002590 <HAL_GPIO_Init+0x2fc>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d007      	beq.n	800248a <HAL_GPIO_Init+0x1f6>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a45      	ldr	r2, [pc, #276]	@ (8002594 <HAL_GPIO_Init+0x300>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_GPIO_Init+0x1f2>
 8002482:	2304      	movs	r3, #4
 8002484:	e008      	b.n	8002498 <HAL_GPIO_Init+0x204>
 8002486:	2307      	movs	r3, #7
 8002488:	e006      	b.n	8002498 <HAL_GPIO_Init+0x204>
 800248a:	2303      	movs	r3, #3
 800248c:	e004      	b.n	8002498 <HAL_GPIO_Init+0x204>
 800248e:	2302      	movs	r3, #2
 8002490:	e002      	b.n	8002498 <HAL_GPIO_Init+0x204>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <HAL_GPIO_Init+0x204>
 8002496:	2300      	movs	r3, #0
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	f002 0203 	and.w	r2, r2, #3
 800249e:	0092      	lsls	r2, r2, #2
 80024a0:	4093      	lsls	r3, r2
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024a8:	4935      	ldr	r1, [pc, #212]	@ (8002580 <HAL_GPIO_Init+0x2ec>)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b6:	4b38      	ldr	r3, [pc, #224]	@ (8002598 <HAL_GPIO_Init+0x304>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024da:	4a2f      	ldr	r2, [pc, #188]	@ (8002598 <HAL_GPIO_Init+0x304>)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002598 <HAL_GPIO_Init+0x304>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002504:	4a24      	ldr	r2, [pc, #144]	@ (8002598 <HAL_GPIO_Init+0x304>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800250a:	4b23      	ldr	r3, [pc, #140]	@ (8002598 <HAL_GPIO_Init+0x304>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800252e:	4a1a      	ldr	r2, [pc, #104]	@ (8002598 <HAL_GPIO_Init+0x304>)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002534:	4b18      	ldr	r3, [pc, #96]	@ (8002598 <HAL_GPIO_Init+0x304>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002558:	4a0f      	ldr	r2, [pc, #60]	@ (8002598 <HAL_GPIO_Init+0x304>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3301      	adds	r3, #1
 8002562:	61fb      	str	r3, [r7, #28]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	2b0f      	cmp	r3, #15
 8002568:	f67f aea2 	bls.w	80022b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	3724      	adds	r7, #36	@ 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	40013800 	.word	0x40013800
 8002584:	40020000 	.word	0x40020000
 8002588:	40020400 	.word	0x40020400
 800258c:	40020800 	.word	0x40020800
 8002590:	40020c00 	.word	0x40020c00
 8002594:	40021000 	.word	0x40021000
 8002598:	40013c00 	.word	0x40013c00

0800259c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	887b      	ldrh	r3, [r7, #2]
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
 80025b8:	e001      	b.n	80025be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025be:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]
 80025d8:	4613      	mov	r3, r2
 80025da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025dc:	787b      	ldrb	r3, [r7, #1]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e8:	e003      	b.n	80025f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ea:	887b      	ldrh	r3, [r7, #2]
 80025ec:	041a      	lsls	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	619a      	str	r2, [r3, #24]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e267      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d075      	beq.n	800270a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800261e:	4b88      	ldr	r3, [pc, #544]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b04      	cmp	r3, #4
 8002628:	d00c      	beq.n	8002644 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262a:	4b85      	ldr	r3, [pc, #532]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002632:	2b08      	cmp	r3, #8
 8002634:	d112      	bne.n	800265c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002636:	4b82      	ldr	r3, [pc, #520]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002642:	d10b      	bne.n	800265c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	4b7e      	ldr	r3, [pc, #504]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d05b      	beq.n	8002708 <HAL_RCC_OscConfig+0x108>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d157      	bne.n	8002708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e242      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002664:	d106      	bne.n	8002674 <HAL_RCC_OscConfig+0x74>
 8002666:	4b76      	ldr	r3, [pc, #472]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a75      	ldr	r2, [pc, #468]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e01d      	b.n	80026b0 <HAL_RCC_OscConfig+0xb0>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0x98>
 800267e:	4b70      	ldr	r3, [pc, #448]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a6f      	ldr	r2, [pc, #444]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 8002684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b6d      	ldr	r3, [pc, #436]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6c      	ldr	r2, [pc, #432]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0xb0>
 8002698:	4b69      	ldr	r3, [pc, #420]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a68      	ldr	r2, [pc, #416]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 800269e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b66      	ldr	r3, [pc, #408]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a65      	ldr	r2, [pc, #404]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 80026aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d013      	beq.n	80026e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff fcd6 	bl	8002068 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c0:	f7ff fcd2 	bl	8002068 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	@ 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e207      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0xc0>
 80026de:	e014      	b.n	800270a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7ff fcc2 	bl	8002068 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e8:	f7ff fcbe 	bl	8002068 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	@ 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e1f3      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fa:	4b51      	ldr	r3, [pc, #324]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0xe8>
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d063      	beq.n	80027de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002716:	4b4a      	ldr	r3, [pc, #296]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002722:	4b47      	ldr	r3, [pc, #284]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800272a:	2b08      	cmp	r3, #8
 800272c:	d11c      	bne.n	8002768 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272e:	4b44      	ldr	r3, [pc, #272]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d116      	bne.n	8002768 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273a:	4b41      	ldr	r3, [pc, #260]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_RCC_OscConfig+0x152>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d001      	beq.n	8002752 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e1c7      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002752:	4b3b      	ldr	r3, [pc, #236]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4937      	ldr	r1, [pc, #220]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002766:	e03a      	b.n	80027de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002770:	4b34      	ldr	r3, [pc, #208]	@ (8002844 <HAL_RCC_OscConfig+0x244>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7ff fc77 	bl	8002068 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277e:	f7ff fc73 	bl	8002068 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e1a8      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002790:	4b2b      	ldr	r3, [pc, #172]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279c:	4b28      	ldr	r3, [pc, #160]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4925      	ldr	r1, [pc, #148]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]
 80027b0:	e015      	b.n	80027de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b2:	4b24      	ldr	r3, [pc, #144]	@ (8002844 <HAL_RCC_OscConfig+0x244>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7ff fc56 	bl	8002068 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c0:	f7ff fc52 	bl	8002068 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e187      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d036      	beq.n	8002858 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d016      	beq.n	8002820 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f2:	4b15      	ldr	r3, [pc, #84]	@ (8002848 <HAL_RCC_OscConfig+0x248>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7ff fc36 	bl	8002068 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002800:	f7ff fc32 	bl	8002068 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e167      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002812:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <HAL_RCC_OscConfig+0x240>)
 8002814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x200>
 800281e:	e01b      	b.n	8002858 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002820:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <HAL_RCC_OscConfig+0x248>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002826:	f7ff fc1f 	bl	8002068 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282c:	e00e      	b.n	800284c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800282e:	f7ff fc1b 	bl	8002068 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d907      	bls.n	800284c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e150      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
 8002840:	40023800 	.word	0x40023800
 8002844:	42470000 	.word	0x42470000
 8002848:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	4b88      	ldr	r3, [pc, #544]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 800284e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1ea      	bne.n	800282e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8097 	beq.w	8002994 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286a:	4b81      	ldr	r3, [pc, #516]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10f      	bne.n	8002896 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002884:	6413      	str	r3, [r2, #64]	@ 0x40
 8002886:	4b7a      	ldr	r3, [pc, #488]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002892:	2301      	movs	r3, #1
 8002894:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002896:	4b77      	ldr	r3, [pc, #476]	@ (8002a74 <HAL_RCC_OscConfig+0x474>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d118      	bne.n	80028d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a2:	4b74      	ldr	r3, [pc, #464]	@ (8002a74 <HAL_RCC_OscConfig+0x474>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a73      	ldr	r2, [pc, #460]	@ (8002a74 <HAL_RCC_OscConfig+0x474>)
 80028a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ae:	f7ff fbdb 	bl	8002068 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b6:	f7ff fbd7 	bl	8002068 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e10c      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002a74 <HAL_RCC_OscConfig+0x474>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d106      	bne.n	80028ea <HAL_RCC_OscConfig+0x2ea>
 80028dc:	4b64      	ldr	r3, [pc, #400]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e0:	4a63      	ldr	r2, [pc, #396]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e8:	e01c      	b.n	8002924 <HAL_RCC_OscConfig+0x324>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x30c>
 80028f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80028fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002902:	4a5b      	ldr	r2, [pc, #364]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6713      	str	r3, [r2, #112]	@ 0x70
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0x324>
 800290c:	4b58      	ldr	r3, [pc, #352]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002910:	4a57      	ldr	r2, [pc, #348]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002912:	f023 0301 	bic.w	r3, r3, #1
 8002916:	6713      	str	r3, [r2, #112]	@ 0x70
 8002918:	4b55      	ldr	r3, [pc, #340]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291c:	4a54      	ldr	r2, [pc, #336]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 800291e:	f023 0304 	bic.w	r3, r3, #4
 8002922:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d015      	beq.n	8002958 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7ff fb9c 	bl	8002068 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002932:	e00a      	b.n	800294a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7ff fb98 	bl	8002068 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e0cb      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294a:	4b49      	ldr	r3, [pc, #292]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0ee      	beq.n	8002934 <HAL_RCC_OscConfig+0x334>
 8002956:	e014      	b.n	8002982 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002958:	f7ff fb86 	bl	8002068 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295e:	e00a      	b.n	8002976 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002960:	f7ff fb82 	bl	8002068 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e0b5      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002976:	4b3e      	ldr	r3, [pc, #248]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1ee      	bne.n	8002960 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002982:	7dfb      	ldrb	r3, [r7, #23]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d105      	bne.n	8002994 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002988:	4b39      	ldr	r3, [pc, #228]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	4a38      	ldr	r2, [pc, #224]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 800298e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002992:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80a1 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800299e:	4b34      	ldr	r3, [pc, #208]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d05c      	beq.n	8002a64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d141      	bne.n	8002a36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b2:	4b31      	ldr	r3, [pc, #196]	@ (8002a78 <HAL_RCC_OscConfig+0x478>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7ff fb56 	bl	8002068 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c0:	f7ff fb52 	bl	8002068 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e087      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d2:	4b27      	ldr	r3, [pc, #156]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69da      	ldr	r2, [r3, #28]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	019b      	lsls	r3, r3, #6
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f4:	085b      	lsrs	r3, r3, #1
 80029f6:	3b01      	subs	r3, #1
 80029f8:	041b      	lsls	r3, r3, #16
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a00:	061b      	lsls	r3, r3, #24
 8002a02:	491b      	ldr	r1, [pc, #108]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a08:	4b1b      	ldr	r3, [pc, #108]	@ (8002a78 <HAL_RCC_OscConfig+0x478>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7ff fb2b 	bl	8002068 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a16:	f7ff fb27 	bl	8002068 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e05c      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a28:	4b11      	ldr	r3, [pc, #68]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x416>
 8002a34:	e054      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a36:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <HAL_RCC_OscConfig+0x478>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7ff fb14 	bl	8002068 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a44:	f7ff fb10 	bl	8002068 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e045      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a56:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x444>
 8002a62:	e03d      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d107      	bne.n	8002a7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e038      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40007000 	.word	0x40007000
 8002a78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002aec <HAL_RCC_OscConfig+0x4ec>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d028      	beq.n	8002adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d121      	bne.n	8002adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d11a      	bne.n	8002adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002aac:	4013      	ands	r3, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ab2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d111      	bne.n	8002adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac2:	085b      	lsrs	r3, r3, #1
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d107      	bne.n	8002adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800

08002af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0cc      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b04:	4b68      	ldr	r3, [pc, #416]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d90c      	bls.n	8002b2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b65      	ldr	r3, [pc, #404]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b63      	ldr	r3, [pc, #396]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0b8      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b44:	4b59      	ldr	r3, [pc, #356]	@ (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4a58      	ldr	r2, [pc, #352]	@ (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b5c:	4b53      	ldr	r3, [pc, #332]	@ (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a52      	ldr	r2, [pc, #328]	@ (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b68:	4b50      	ldr	r3, [pc, #320]	@ (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	494d      	ldr	r1, [pc, #308]	@ (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d044      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8e:	4b47      	ldr	r3, [pc, #284]	@ (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d119      	bne.n	8002bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e07f      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d003      	beq.n	8002bae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bae:	4b3f      	ldr	r3, [pc, #252]	@ (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e06f      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e067      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bce:	4b37      	ldr	r3, [pc, #220]	@ (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f023 0203 	bic.w	r2, r3, #3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4934      	ldr	r1, [pc, #208]	@ (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be0:	f7ff fa42 	bl	8002068 <HAL_GetTick>
 8002be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	e00a      	b.n	8002bfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be8:	f7ff fa3e 	bl	8002068 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e04f      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 020c 	and.w	r2, r3, #12
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d1eb      	bne.n	8002be8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c10:	4b25      	ldr	r3, [pc, #148]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d20c      	bcs.n	8002c38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	4b22      	ldr	r3, [pc, #136]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c26:	4b20      	ldr	r3, [pc, #128]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e032      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c44:	4b19      	ldr	r3, [pc, #100]	@ (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4916      	ldr	r1, [pc, #88]	@ (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d009      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c62:	4b12      	ldr	r3, [pc, #72]	@ (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	490e      	ldr	r1, [pc, #56]	@ (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c76:	f000 f821 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	490a      	ldr	r1, [pc, #40]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	5ccb      	ldrb	r3, [r1, r3]
 8002c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8e:	4a09      	ldr	r2, [pc, #36]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c92:	4b09      	ldr	r3, [pc, #36]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff f9a2 	bl	8001fe0 <HAL_InitTick>

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023c00 	.word	0x40023c00
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	08009c2c 	.word	0x08009c2c
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	20000004 	.word	0x20000004

08002cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc0:	b094      	sub	sp, #80	@ 0x50
 8002cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd4:	4b79      	ldr	r3, [pc, #484]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 030c 	and.w	r3, r3, #12
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d00d      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x40>
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	f200 80e1 	bhi.w	8002ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d003      	beq.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cee:	e0db      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf0:	4b73      	ldr	r3, [pc, #460]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cf4:	e0db      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cf6:	4b73      	ldr	r3, [pc, #460]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cfa:	e0d8      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cfc:	4b6f      	ldr	r3, [pc, #444]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d06:	4b6d      	ldr	r3, [pc, #436]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d063      	beq.n	8002dda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d12:	4b6a      	ldr	r3, [pc, #424]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	099b      	lsrs	r3, r3, #6
 8002d18:	2200      	movs	r2, #0
 8002d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d24:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d26:	2300      	movs	r3, #0
 8002d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d2e:	4622      	mov	r2, r4
 8002d30:	462b      	mov	r3, r5
 8002d32:	f04f 0000 	mov.w	r0, #0
 8002d36:	f04f 0100 	mov.w	r1, #0
 8002d3a:	0159      	lsls	r1, r3, #5
 8002d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d40:	0150      	lsls	r0, r2, #5
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4621      	mov	r1, r4
 8002d48:	1a51      	subs	r1, r2, r1
 8002d4a:	6139      	str	r1, [r7, #16]
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d60:	4659      	mov	r1, fp
 8002d62:	018b      	lsls	r3, r1, #6
 8002d64:	4651      	mov	r1, sl
 8002d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d6a:	4651      	mov	r1, sl
 8002d6c:	018a      	lsls	r2, r1, #6
 8002d6e:	4651      	mov	r1, sl
 8002d70:	ebb2 0801 	subs.w	r8, r2, r1
 8002d74:	4659      	mov	r1, fp
 8002d76:	eb63 0901 	sbc.w	r9, r3, r1
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d8e:	4690      	mov	r8, r2
 8002d90:	4699      	mov	r9, r3
 8002d92:	4623      	mov	r3, r4
 8002d94:	eb18 0303 	adds.w	r3, r8, r3
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	462b      	mov	r3, r5
 8002d9c:	eb49 0303 	adc.w	r3, r9, r3
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dae:	4629      	mov	r1, r5
 8002db0:	024b      	lsls	r3, r1, #9
 8002db2:	4621      	mov	r1, r4
 8002db4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002db8:	4621      	mov	r1, r4
 8002dba:	024a      	lsls	r2, r1, #9
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dcc:	f7fd ff44 	bl	8000c58 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd8:	e058      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dda:	4b38      	ldr	r3, [pc, #224]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	099b      	lsrs	r3, r3, #6
 8002de0:	2200      	movs	r2, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	4611      	mov	r1, r2
 8002de6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dea:	623b      	str	r3, [r7, #32]
 8002dec:	2300      	movs	r3, #0
 8002dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002df4:	4642      	mov	r2, r8
 8002df6:	464b      	mov	r3, r9
 8002df8:	f04f 0000 	mov.w	r0, #0
 8002dfc:	f04f 0100 	mov.w	r1, #0
 8002e00:	0159      	lsls	r1, r3, #5
 8002e02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e06:	0150      	lsls	r0, r2, #5
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4641      	mov	r1, r8
 8002e0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e12:	4649      	mov	r1, r9
 8002e14:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e2c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e30:	eb63 050b 	sbc.w	r5, r3, fp
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	00eb      	lsls	r3, r5, #3
 8002e3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e42:	00e2      	lsls	r2, r4, #3
 8002e44:	4614      	mov	r4, r2
 8002e46:	461d      	mov	r5, r3
 8002e48:	4643      	mov	r3, r8
 8002e4a:	18e3      	adds	r3, r4, r3
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	464b      	mov	r3, r9
 8002e50:	eb45 0303 	adc.w	r3, r5, r3
 8002e54:	607b      	str	r3, [r7, #4]
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e62:	4629      	mov	r1, r5
 8002e64:	028b      	lsls	r3, r1, #10
 8002e66:	4621      	mov	r1, r4
 8002e68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	028a      	lsls	r2, r1, #10
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e76:	2200      	movs	r2, #0
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	61fa      	str	r2, [r7, #28]
 8002e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e80:	f7fd feea 	bl	8000c58 <__aeabi_uldivmod>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4613      	mov	r3, r2
 8002e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	3301      	adds	r3, #1
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ea6:	e002      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea8:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3750      	adds	r7, #80	@ 0x50
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	00f42400 	.word	0x00f42400
 8002ec4:	007a1200 	.word	0x007a1200

08002ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ecc:	4b03      	ldr	r3, [pc, #12]	@ (8002edc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000000 	.word	0x20000000

08002ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ee4:	f7ff fff0 	bl	8002ec8 <HAL_RCC_GetHCLKFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b05      	ldr	r3, [pc, #20]	@ (8002f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	0a9b      	lsrs	r3, r3, #10
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	4903      	ldr	r1, [pc, #12]	@ (8002f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40023800 	.word	0x40023800
 8002f04:	08009c3c 	.word	0x08009c3c

08002f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f0c:	f7ff ffdc 	bl	8002ec8 <HAL_RCC_GetHCLKFreq>
 8002f10:	4602      	mov	r2, r0
 8002f12:	4b05      	ldr	r3, [pc, #20]	@ (8002f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	0b5b      	lsrs	r3, r3, #13
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	4903      	ldr	r1, [pc, #12]	@ (8002f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f1e:	5ccb      	ldrb	r3, [r1, r3]
 8002f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	08009c3c 	.word	0x08009c3c

08002f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e041      	b.n	8002fc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fe fdc2 	bl	8001ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f000 fac0 	bl	80034f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e041      	b.n	8003064 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d106      	bne.n	8002ffa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f839 	bl	800306c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3304      	adds	r3, #4
 800300a:	4619      	mov	r1, r3
 800300c:	4610      	mov	r0, r2
 800300e:	f000 fa71 	bl	80034f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d109      	bne.n	80030a4 <HAL_TIM_PWM_Start+0x24>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b01      	cmp	r3, #1
 800309a:	bf14      	ite	ne
 800309c:	2301      	movne	r3, #1
 800309e:	2300      	moveq	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	e022      	b.n	80030ea <HAL_TIM_PWM_Start+0x6a>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d109      	bne.n	80030be <HAL_TIM_PWM_Start+0x3e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	bf14      	ite	ne
 80030b6:	2301      	movne	r3, #1
 80030b8:	2300      	moveq	r3, #0
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	e015      	b.n	80030ea <HAL_TIM_PWM_Start+0x6a>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d109      	bne.n	80030d8 <HAL_TIM_PWM_Start+0x58>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	bf14      	ite	ne
 80030d0:	2301      	movne	r3, #1
 80030d2:	2300      	moveq	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	e008      	b.n	80030ea <HAL_TIM_PWM_Start+0x6a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	bf14      	ite	ne
 80030e4:	2301      	movne	r3, #1
 80030e6:	2300      	moveq	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e068      	b.n	80031c4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <HAL_TIM_PWM_Start+0x82>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003100:	e013      	b.n	800312a <HAL_TIM_PWM_Start+0xaa>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d104      	bne.n	8003112 <HAL_TIM_PWM_Start+0x92>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003110:	e00b      	b.n	800312a <HAL_TIM_PWM_Start+0xaa>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b08      	cmp	r3, #8
 8003116:	d104      	bne.n	8003122 <HAL_TIM_PWM_Start+0xa2>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003120:	e003      	b.n	800312a <HAL_TIM_PWM_Start+0xaa>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2202      	movs	r2, #2
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2201      	movs	r2, #1
 8003130:	6839      	ldr	r1, [r7, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fc90 	bl	8003a58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a23      	ldr	r2, [pc, #140]	@ (80031cc <HAL_TIM_PWM_Start+0x14c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d107      	bne.n	8003152 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003150:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1d      	ldr	r2, [pc, #116]	@ (80031cc <HAL_TIM_PWM_Start+0x14c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d018      	beq.n	800318e <HAL_TIM_PWM_Start+0x10e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003164:	d013      	beq.n	800318e <HAL_TIM_PWM_Start+0x10e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a19      	ldr	r2, [pc, #100]	@ (80031d0 <HAL_TIM_PWM_Start+0x150>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00e      	beq.n	800318e <HAL_TIM_PWM_Start+0x10e>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a17      	ldr	r2, [pc, #92]	@ (80031d4 <HAL_TIM_PWM_Start+0x154>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_TIM_PWM_Start+0x10e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a16      	ldr	r2, [pc, #88]	@ (80031d8 <HAL_TIM_PWM_Start+0x158>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d004      	beq.n	800318e <HAL_TIM_PWM_Start+0x10e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a14      	ldr	r2, [pc, #80]	@ (80031dc <HAL_TIM_PWM_Start+0x15c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d111      	bne.n	80031b2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b06      	cmp	r3, #6
 800319e:	d010      	beq.n	80031c2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b0:	e007      	b.n	80031c2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0201 	orr.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40010000 	.word	0x40010000
 80031d0:	40000400 	.word	0x40000400
 80031d4:	40000800 	.word	0x40000800
 80031d8:	40000c00 	.word	0x40000c00
 80031dc:	40014000 	.word	0x40014000

080031e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e0ae      	b.n	800335c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b0c      	cmp	r3, #12
 800320a:	f200 809f 	bhi.w	800334c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800320e:	a201      	add	r2, pc, #4	@ (adr r2, 8003214 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003214:	08003249 	.word	0x08003249
 8003218:	0800334d 	.word	0x0800334d
 800321c:	0800334d 	.word	0x0800334d
 8003220:	0800334d 	.word	0x0800334d
 8003224:	08003289 	.word	0x08003289
 8003228:	0800334d 	.word	0x0800334d
 800322c:	0800334d 	.word	0x0800334d
 8003230:	0800334d 	.word	0x0800334d
 8003234:	080032cb 	.word	0x080032cb
 8003238:	0800334d 	.word	0x0800334d
 800323c:	0800334d 	.word	0x0800334d
 8003240:	0800334d 	.word	0x0800334d
 8003244:	0800330b 	.word	0x0800330b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 f9dc 	bl	800360c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0208 	orr.w	r2, r2, #8
 8003262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0204 	bic.w	r2, r2, #4
 8003272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6999      	ldr	r1, [r3, #24]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	619a      	str	r2, [r3, #24]
      break;
 8003286:	e064      	b.n	8003352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fa22 	bl	80036d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6999      	ldr	r1, [r3, #24]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	021a      	lsls	r2, r3, #8
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	619a      	str	r2, [r3, #24]
      break;
 80032c8:	e043      	b.n	8003352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fa6d 	bl	80037b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69da      	ldr	r2, [r3, #28]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0208 	orr.w	r2, r2, #8
 80032e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0204 	bic.w	r2, r2, #4
 80032f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69d9      	ldr	r1, [r3, #28]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	61da      	str	r2, [r3, #28]
      break;
 8003308:	e023      	b.n	8003352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fab7 	bl	8003884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69da      	ldr	r2, [r3, #28]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69da      	ldr	r2, [r3, #28]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69d9      	ldr	r1, [r3, #28]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	021a      	lsls	r2, r3, #8
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	61da      	str	r2, [r3, #28]
      break;
 800334a:	e002      	b.n	8003352 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	75fb      	strb	r3, [r7, #23]
      break;
 8003350:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800335a:	7dfb      	ldrb	r3, [r7, #23]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_TIM_ConfigClockSource+0x1c>
 800337c:	2302      	movs	r3, #2
 800337e:	e0b4      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x186>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800339e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033b8:	d03e      	beq.n	8003438 <HAL_TIM_ConfigClockSource+0xd4>
 80033ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033be:	f200 8087 	bhi.w	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
 80033c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033c6:	f000 8086 	beq.w	80034d6 <HAL_TIM_ConfigClockSource+0x172>
 80033ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ce:	d87f      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
 80033d0:	2b70      	cmp	r3, #112	@ 0x70
 80033d2:	d01a      	beq.n	800340a <HAL_TIM_ConfigClockSource+0xa6>
 80033d4:	2b70      	cmp	r3, #112	@ 0x70
 80033d6:	d87b      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
 80033d8:	2b60      	cmp	r3, #96	@ 0x60
 80033da:	d050      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x11a>
 80033dc:	2b60      	cmp	r3, #96	@ 0x60
 80033de:	d877      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
 80033e0:	2b50      	cmp	r3, #80	@ 0x50
 80033e2:	d03c      	beq.n	800345e <HAL_TIM_ConfigClockSource+0xfa>
 80033e4:	2b50      	cmp	r3, #80	@ 0x50
 80033e6:	d873      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
 80033e8:	2b40      	cmp	r3, #64	@ 0x40
 80033ea:	d058      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x13a>
 80033ec:	2b40      	cmp	r3, #64	@ 0x40
 80033ee:	d86f      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
 80033f0:	2b30      	cmp	r3, #48	@ 0x30
 80033f2:	d064      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x15a>
 80033f4:	2b30      	cmp	r3, #48	@ 0x30
 80033f6:	d86b      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
 80033f8:	2b20      	cmp	r3, #32
 80033fa:	d060      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x15a>
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d867      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003400:	2b00      	cmp	r3, #0
 8003402:	d05c      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x15a>
 8003404:	2b10      	cmp	r3, #16
 8003406:	d05a      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x15a>
 8003408:	e062      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800341a:	f000 fafd 	bl	8003a18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800342c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	609a      	str	r2, [r3, #8]
      break;
 8003436:	e04f      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003448:	f000 fae6 	bl	8003a18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800345a:	609a      	str	r2, [r3, #8]
      break;
 800345c:	e03c      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800346a:	461a      	mov	r2, r3
 800346c:	f000 fa5a 	bl	8003924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2150      	movs	r1, #80	@ 0x50
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fab3 	bl	80039e2 <TIM_ITRx_SetConfig>
      break;
 800347c:	e02c      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800348a:	461a      	mov	r2, r3
 800348c:	f000 fa79 	bl	8003982 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2160      	movs	r1, #96	@ 0x60
 8003496:	4618      	mov	r0, r3
 8003498:	f000 faa3 	bl	80039e2 <TIM_ITRx_SetConfig>
      break;
 800349c:	e01c      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034aa:	461a      	mov	r2, r3
 80034ac:	f000 fa3a 	bl	8003924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2140      	movs	r1, #64	@ 0x40
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fa93 	bl	80039e2 <TIM_ITRx_SetConfig>
      break;
 80034bc:	e00c      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4619      	mov	r1, r3
 80034c8:	4610      	mov	r0, r2
 80034ca:	f000 fa8a 	bl	80039e2 <TIM_ITRx_SetConfig>
      break;
 80034ce:	e003      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
      break;
 80034d4:	e000      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a3a      	ldr	r2, [pc, #232]	@ (80035f0 <TIM_Base_SetConfig+0xfc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00f      	beq.n	800352c <TIM_Base_SetConfig+0x38>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003512:	d00b      	beq.n	800352c <TIM_Base_SetConfig+0x38>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a37      	ldr	r2, [pc, #220]	@ (80035f4 <TIM_Base_SetConfig+0x100>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d007      	beq.n	800352c <TIM_Base_SetConfig+0x38>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a36      	ldr	r2, [pc, #216]	@ (80035f8 <TIM_Base_SetConfig+0x104>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d003      	beq.n	800352c <TIM_Base_SetConfig+0x38>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a35      	ldr	r2, [pc, #212]	@ (80035fc <TIM_Base_SetConfig+0x108>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d108      	bne.n	800353e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a2b      	ldr	r2, [pc, #172]	@ (80035f0 <TIM_Base_SetConfig+0xfc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01b      	beq.n	800357e <TIM_Base_SetConfig+0x8a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800354c:	d017      	beq.n	800357e <TIM_Base_SetConfig+0x8a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a28      	ldr	r2, [pc, #160]	@ (80035f4 <TIM_Base_SetConfig+0x100>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <TIM_Base_SetConfig+0x8a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a27      	ldr	r2, [pc, #156]	@ (80035f8 <TIM_Base_SetConfig+0x104>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00f      	beq.n	800357e <TIM_Base_SetConfig+0x8a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a26      	ldr	r2, [pc, #152]	@ (80035fc <TIM_Base_SetConfig+0x108>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00b      	beq.n	800357e <TIM_Base_SetConfig+0x8a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a25      	ldr	r2, [pc, #148]	@ (8003600 <TIM_Base_SetConfig+0x10c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d007      	beq.n	800357e <TIM_Base_SetConfig+0x8a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a24      	ldr	r2, [pc, #144]	@ (8003604 <TIM_Base_SetConfig+0x110>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d003      	beq.n	800357e <TIM_Base_SetConfig+0x8a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a23      	ldr	r2, [pc, #140]	@ (8003608 <TIM_Base_SetConfig+0x114>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d108      	bne.n	8003590 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a0e      	ldr	r2, [pc, #56]	@ (80035f0 <TIM_Base_SetConfig+0xfc>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d103      	bne.n	80035c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d105      	bne.n	80035e2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f023 0201 	bic.w	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	611a      	str	r2, [r3, #16]
  }
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40010000 	.word	0x40010000
 80035f4:	40000400 	.word	0x40000400
 80035f8:	40000800 	.word	0x40000800
 80035fc:	40000c00 	.word	0x40000c00
 8003600:	40014000 	.word	0x40014000
 8003604:	40014400 	.word	0x40014400
 8003608:	40014800 	.word	0x40014800

0800360c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f023 0201 	bic.w	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800363a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0303 	bic.w	r3, r3, #3
 8003642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f023 0302 	bic.w	r3, r3, #2
 8003654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a1c      	ldr	r2, [pc, #112]	@ (80036d4 <TIM_OC1_SetConfig+0xc8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d10c      	bne.n	8003682 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f023 0308 	bic.w	r3, r3, #8
 800366e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f023 0304 	bic.w	r3, r3, #4
 8003680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a13      	ldr	r2, [pc, #76]	@ (80036d4 <TIM_OC1_SetConfig+0xc8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d111      	bne.n	80036ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	621a      	str	r2, [r3, #32]
}
 80036c8:	bf00      	nop
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	40010000 	.word	0x40010000

080036d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f023 0210 	bic.w	r2, r3, #16
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800370e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	021b      	lsls	r3, r3, #8
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f023 0320 	bic.w	r3, r3, #32
 8003722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a1e      	ldr	r2, [pc, #120]	@ (80037ac <TIM_OC2_SetConfig+0xd4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d10d      	bne.n	8003754 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800373e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003752:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a15      	ldr	r2, [pc, #84]	@ (80037ac <TIM_OC2_SetConfig+0xd4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d113      	bne.n	8003784 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003762:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800376a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	621a      	str	r2, [r3, #32]
}
 800379e:	bf00      	nop
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40010000 	.word	0x40010000

080037b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0303 	bic.w	r3, r3, #3
 80037e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a1d      	ldr	r2, [pc, #116]	@ (8003880 <TIM_OC3_SetConfig+0xd0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d10d      	bne.n	800382a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003814:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a14      	ldr	r2, [pc, #80]	@ (8003880 <TIM_OC3_SetConfig+0xd0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d113      	bne.n	800385a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	621a      	str	r2, [r3, #32]
}
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	40010000 	.word	0x40010000

08003884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	031b      	lsls	r3, r3, #12
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a10      	ldr	r2, [pc, #64]	@ (8003920 <TIM_OC4_SetConfig+0x9c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d109      	bne.n	80038f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	019b      	lsls	r3, r3, #6
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	621a      	str	r2, [r3, #32]
}
 8003912:	bf00      	nop
 8003914:	371c      	adds	r7, #28
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40010000 	.word	0x40010000

08003924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	f023 0201 	bic.w	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800394e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f023 030a 	bic.w	r3, r3, #10
 8003960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	621a      	str	r2, [r3, #32]
}
 8003976:	bf00      	nop
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003982:	b480      	push	{r7}
 8003984:	b087      	sub	sp, #28
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f023 0210 	bic.w	r2, r3, #16
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	031b      	lsls	r3, r3, #12
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	621a      	str	r2, [r3, #32]
}
 80039d6:	bf00      	nop
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b085      	sub	sp, #20
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f043 0307 	orr.w	r3, r3, #7
 8003a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	609a      	str	r2, [r3, #8]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	021a      	lsls	r2, r3, #8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	609a      	str	r2, [r3, #8]
}
 8003a4c:	bf00      	nop
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1a      	ldr	r2, [r3, #32]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a1a      	ldr	r2, [r3, #32]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f003 031f 	and.w	r3, r3, #31
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a90:	431a      	orrs	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	621a      	str	r2, [r3, #32]
}
 8003a96:	bf00      	nop
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e050      	b.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1c      	ldr	r2, [pc, #112]	@ (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d018      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b08:	d013      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a18      	ldr	r2, [pc, #96]	@ (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00e      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a16      	ldr	r2, [pc, #88]	@ (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d009      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a15      	ldr	r2, [pc, #84]	@ (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d004      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a13      	ldr	r2, [pc, #76]	@ (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d10c      	bne.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40010000 	.word	0x40010000
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800
 8003b78:	40000c00 	.word	0x40000c00
 8003b7c:	40014000 	.word	0x40014000

08003b80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e03d      	b.n	8003c18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e042      	b.n	8003cbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fe f834 	bl	8001cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2224      	movs	r2, #36	@ 0x24
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f973 	bl	8003f54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695a      	ldr	r2, [r3, #20]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08a      	sub	sp, #40	@ 0x28
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d175      	bne.n	8003dd0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_UART_Transmit+0x2c>
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e06e      	b.n	8003dd2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2221      	movs	r2, #33	@ 0x21
 8003cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d02:	f7fe f9b1 	bl	8002068 <HAL_GetTick>
 8003d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	88fa      	ldrh	r2, [r7, #6]
 8003d0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	88fa      	ldrh	r2, [r7, #6]
 8003d12:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d1c:	d108      	bne.n	8003d30 <HAL_UART_Transmit+0x6c>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d104      	bne.n	8003d30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	e003      	b.n	8003d38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d38:	e02e      	b.n	8003d98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2200      	movs	r2, #0
 8003d42:	2180      	movs	r1, #128	@ 0x80
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f848 	bl	8003dda <UART_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e03a      	b.n	8003dd2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10b      	bne.n	8003d7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	3302      	adds	r3, #2
 8003d76:	61bb      	str	r3, [r7, #24]
 8003d78:	e007      	b.n	8003d8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	781a      	ldrb	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	3301      	adds	r3, #1
 8003d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1cb      	bne.n	8003d3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2200      	movs	r2, #0
 8003daa:	2140      	movs	r1, #64	@ 0x40
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f814 	bl	8003dda <UART_WaitOnFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e006      	b.n	8003dd2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e000      	b.n	8003dd2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b086      	sub	sp, #24
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	603b      	str	r3, [r7, #0]
 8003de6:	4613      	mov	r3, r2
 8003de8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dea:	e03b      	b.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d037      	beq.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df4:	f7fe f938 	bl	8002068 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	6a3a      	ldr	r2, [r7, #32]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d302      	bcc.n	8003e0a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e03a      	b.n	8003e84 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d023      	beq.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b80      	cmp	r3, #128	@ 0x80
 8003e20:	d020      	beq.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b40      	cmp	r3, #64	@ 0x40
 8003e26:	d01d      	beq.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d116      	bne.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 f81d 	bl	8003e8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2208      	movs	r2, #8
 8003e56:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e00f      	b.n	8003e84 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d0b4      	beq.n	8003dec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b095      	sub	sp, #84	@ 0x54
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e9e:	e853 3f00 	ldrex	r3, [r3]
 8003ea2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003eb4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003eba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ebc:	e841 2300 	strex	r3, r2, [r1]
 8003ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e5      	bne.n	8003e94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3314      	adds	r3, #20
 8003ece:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	e853 3f00 	ldrex	r3, [r3]
 8003ed6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3314      	adds	r3, #20
 8003ee6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ee8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ef0:	e841 2300 	strex	r3, r2, [r1]
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e5      	bne.n	8003ec8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d119      	bne.n	8003f38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	e853 3f00 	ldrex	r3, [r3]
 8003f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f023 0310 	bic.w	r3, r3, #16
 8003f1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	330c      	adds	r3, #12
 8003f22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f24:	61ba      	str	r2, [r7, #24]
 8003f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f28:	6979      	ldr	r1, [r7, #20]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	613b      	str	r3, [r7, #16]
   return(result);
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e5      	bne.n	8003f04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f46:	bf00      	nop
 8003f48:	3754      	adds	r7, #84	@ 0x54
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
	...

08003f54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f58:	b0c0      	sub	sp, #256	@ 0x100
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f70:	68d9      	ldr	r1, [r3, #12]
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	ea40 0301 	orr.w	r3, r0, r1
 8003f7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fac:	f021 010c 	bic.w	r1, r1, #12
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fba:	430b      	orrs	r3, r1
 8003fbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fce:	6999      	ldr	r1, [r3, #24]
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	ea40 0301 	orr.w	r3, r0, r1
 8003fda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4b8f      	ldr	r3, [pc, #572]	@ (8004220 <UART_SetConfig+0x2cc>)
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d005      	beq.n	8003ff4 <UART_SetConfig+0xa0>
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b8d      	ldr	r3, [pc, #564]	@ (8004224 <UART_SetConfig+0x2d0>)
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d104      	bne.n	8003ffe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ff4:	f7fe ff88 	bl	8002f08 <HAL_RCC_GetPCLK2Freq>
 8003ff8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ffc:	e003      	b.n	8004006 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ffe:	f7fe ff6f 	bl	8002ee0 <HAL_RCC_GetPCLK1Freq>
 8004002:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004010:	f040 810c 	bne.w	800422c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004018:	2200      	movs	r2, #0
 800401a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800401e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004022:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004026:	4622      	mov	r2, r4
 8004028:	462b      	mov	r3, r5
 800402a:	1891      	adds	r1, r2, r2
 800402c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800402e:	415b      	adcs	r3, r3
 8004030:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004032:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004036:	4621      	mov	r1, r4
 8004038:	eb12 0801 	adds.w	r8, r2, r1
 800403c:	4629      	mov	r1, r5
 800403e:	eb43 0901 	adc.w	r9, r3, r1
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800404e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004056:	4690      	mov	r8, r2
 8004058:	4699      	mov	r9, r3
 800405a:	4623      	mov	r3, r4
 800405c:	eb18 0303 	adds.w	r3, r8, r3
 8004060:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004064:	462b      	mov	r3, r5
 8004066:	eb49 0303 	adc.w	r3, r9, r3
 800406a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800407a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800407e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004082:	460b      	mov	r3, r1
 8004084:	18db      	adds	r3, r3, r3
 8004086:	653b      	str	r3, [r7, #80]	@ 0x50
 8004088:	4613      	mov	r3, r2
 800408a:	eb42 0303 	adc.w	r3, r2, r3
 800408e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004090:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004094:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004098:	f7fc fdde 	bl	8000c58 <__aeabi_uldivmod>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4b61      	ldr	r3, [pc, #388]	@ (8004228 <UART_SetConfig+0x2d4>)
 80040a2:	fba3 2302 	umull	r2, r3, r3, r2
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	011c      	lsls	r4, r3, #4
 80040aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ae:	2200      	movs	r2, #0
 80040b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040bc:	4642      	mov	r2, r8
 80040be:	464b      	mov	r3, r9
 80040c0:	1891      	adds	r1, r2, r2
 80040c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040c4:	415b      	adcs	r3, r3
 80040c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040cc:	4641      	mov	r1, r8
 80040ce:	eb12 0a01 	adds.w	sl, r2, r1
 80040d2:	4649      	mov	r1, r9
 80040d4:	eb43 0b01 	adc.w	fp, r3, r1
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ec:	4692      	mov	sl, r2
 80040ee:	469b      	mov	fp, r3
 80040f0:	4643      	mov	r3, r8
 80040f2:	eb1a 0303 	adds.w	r3, sl, r3
 80040f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040fa:	464b      	mov	r3, r9
 80040fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004100:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004110:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004114:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004118:	460b      	mov	r3, r1
 800411a:	18db      	adds	r3, r3, r3
 800411c:	643b      	str	r3, [r7, #64]	@ 0x40
 800411e:	4613      	mov	r3, r2
 8004120:	eb42 0303 	adc.w	r3, r2, r3
 8004124:	647b      	str	r3, [r7, #68]	@ 0x44
 8004126:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800412a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800412e:	f7fc fd93 	bl	8000c58 <__aeabi_uldivmod>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4611      	mov	r1, r2
 8004138:	4b3b      	ldr	r3, [pc, #236]	@ (8004228 <UART_SetConfig+0x2d4>)
 800413a:	fba3 2301 	umull	r2, r3, r3, r1
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	2264      	movs	r2, #100	@ 0x64
 8004142:	fb02 f303 	mul.w	r3, r2, r3
 8004146:	1acb      	subs	r3, r1, r3
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800414e:	4b36      	ldr	r3, [pc, #216]	@ (8004228 <UART_SetConfig+0x2d4>)
 8004150:	fba3 2302 	umull	r2, r3, r3, r2
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800415c:	441c      	add	r4, r3
 800415e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004162:	2200      	movs	r2, #0
 8004164:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004168:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800416c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004170:	4642      	mov	r2, r8
 8004172:	464b      	mov	r3, r9
 8004174:	1891      	adds	r1, r2, r2
 8004176:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004178:	415b      	adcs	r3, r3
 800417a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800417c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004180:	4641      	mov	r1, r8
 8004182:	1851      	adds	r1, r2, r1
 8004184:	6339      	str	r1, [r7, #48]	@ 0x30
 8004186:	4649      	mov	r1, r9
 8004188:	414b      	adcs	r3, r1
 800418a:	637b      	str	r3, [r7, #52]	@ 0x34
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004198:	4659      	mov	r1, fp
 800419a:	00cb      	lsls	r3, r1, #3
 800419c:	4651      	mov	r1, sl
 800419e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041a2:	4651      	mov	r1, sl
 80041a4:	00ca      	lsls	r2, r1, #3
 80041a6:	4610      	mov	r0, r2
 80041a8:	4619      	mov	r1, r3
 80041aa:	4603      	mov	r3, r0
 80041ac:	4642      	mov	r2, r8
 80041ae:	189b      	adds	r3, r3, r2
 80041b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041b4:	464b      	mov	r3, r9
 80041b6:	460a      	mov	r2, r1
 80041b8:	eb42 0303 	adc.w	r3, r2, r3
 80041bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041d4:	460b      	mov	r3, r1
 80041d6:	18db      	adds	r3, r3, r3
 80041d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041da:	4613      	mov	r3, r2
 80041dc:	eb42 0303 	adc.w	r3, r2, r3
 80041e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80041ea:	f7fc fd35 	bl	8000c58 <__aeabi_uldivmod>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <UART_SetConfig+0x2d4>)
 80041f4:	fba3 1302 	umull	r1, r3, r3, r2
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	2164      	movs	r1, #100	@ 0x64
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	3332      	adds	r3, #50	@ 0x32
 8004206:	4a08      	ldr	r2, [pc, #32]	@ (8004228 <UART_SetConfig+0x2d4>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	f003 0207 	and.w	r2, r3, #7
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4422      	add	r2, r4
 800421a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800421c:	e106      	b.n	800442c <UART_SetConfig+0x4d8>
 800421e:	bf00      	nop
 8004220:	40011000 	.word	0x40011000
 8004224:	40011400 	.word	0x40011400
 8004228:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800422c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004230:	2200      	movs	r2, #0
 8004232:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004236:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800423a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800423e:	4642      	mov	r2, r8
 8004240:	464b      	mov	r3, r9
 8004242:	1891      	adds	r1, r2, r2
 8004244:	6239      	str	r1, [r7, #32]
 8004246:	415b      	adcs	r3, r3
 8004248:	627b      	str	r3, [r7, #36]	@ 0x24
 800424a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800424e:	4641      	mov	r1, r8
 8004250:	1854      	adds	r4, r2, r1
 8004252:	4649      	mov	r1, r9
 8004254:	eb43 0501 	adc.w	r5, r3, r1
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	00eb      	lsls	r3, r5, #3
 8004262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004266:	00e2      	lsls	r2, r4, #3
 8004268:	4614      	mov	r4, r2
 800426a:	461d      	mov	r5, r3
 800426c:	4643      	mov	r3, r8
 800426e:	18e3      	adds	r3, r4, r3
 8004270:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004274:	464b      	mov	r3, r9
 8004276:	eb45 0303 	adc.w	r3, r5, r3
 800427a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800427e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800428a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800429a:	4629      	mov	r1, r5
 800429c:	008b      	lsls	r3, r1, #2
 800429e:	4621      	mov	r1, r4
 80042a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042a4:	4621      	mov	r1, r4
 80042a6:	008a      	lsls	r2, r1, #2
 80042a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042ac:	f7fc fcd4 	bl	8000c58 <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4b60      	ldr	r3, [pc, #384]	@ (8004438 <UART_SetConfig+0x4e4>)
 80042b6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	011c      	lsls	r4, r3, #4
 80042be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042d0:	4642      	mov	r2, r8
 80042d2:	464b      	mov	r3, r9
 80042d4:	1891      	adds	r1, r2, r2
 80042d6:	61b9      	str	r1, [r7, #24]
 80042d8:	415b      	adcs	r3, r3
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042e0:	4641      	mov	r1, r8
 80042e2:	1851      	adds	r1, r2, r1
 80042e4:	6139      	str	r1, [r7, #16]
 80042e6:	4649      	mov	r1, r9
 80042e8:	414b      	adcs	r3, r1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042f8:	4659      	mov	r1, fp
 80042fa:	00cb      	lsls	r3, r1, #3
 80042fc:	4651      	mov	r1, sl
 80042fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004302:	4651      	mov	r1, sl
 8004304:	00ca      	lsls	r2, r1, #3
 8004306:	4610      	mov	r0, r2
 8004308:	4619      	mov	r1, r3
 800430a:	4603      	mov	r3, r0
 800430c:	4642      	mov	r2, r8
 800430e:	189b      	adds	r3, r3, r2
 8004310:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004314:	464b      	mov	r3, r9
 8004316:	460a      	mov	r2, r1
 8004318:	eb42 0303 	adc.w	r3, r2, r3
 800431c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	67bb      	str	r3, [r7, #120]	@ 0x78
 800432a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004338:	4649      	mov	r1, r9
 800433a:	008b      	lsls	r3, r1, #2
 800433c:	4641      	mov	r1, r8
 800433e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004342:	4641      	mov	r1, r8
 8004344:	008a      	lsls	r2, r1, #2
 8004346:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800434a:	f7fc fc85 	bl	8000c58 <__aeabi_uldivmod>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4611      	mov	r1, r2
 8004354:	4b38      	ldr	r3, [pc, #224]	@ (8004438 <UART_SetConfig+0x4e4>)
 8004356:	fba3 2301 	umull	r2, r3, r3, r1
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	2264      	movs	r2, #100	@ 0x64
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	1acb      	subs	r3, r1, r3
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	3332      	adds	r3, #50	@ 0x32
 8004368:	4a33      	ldr	r2, [pc, #204]	@ (8004438 <UART_SetConfig+0x4e4>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004374:	441c      	add	r4, r3
 8004376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800437a:	2200      	movs	r2, #0
 800437c:	673b      	str	r3, [r7, #112]	@ 0x70
 800437e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004380:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004384:	4642      	mov	r2, r8
 8004386:	464b      	mov	r3, r9
 8004388:	1891      	adds	r1, r2, r2
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	415b      	adcs	r3, r3
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004394:	4641      	mov	r1, r8
 8004396:	1851      	adds	r1, r2, r1
 8004398:	6039      	str	r1, [r7, #0]
 800439a:	4649      	mov	r1, r9
 800439c:	414b      	adcs	r3, r1
 800439e:	607b      	str	r3, [r7, #4]
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043ac:	4659      	mov	r1, fp
 80043ae:	00cb      	lsls	r3, r1, #3
 80043b0:	4651      	mov	r1, sl
 80043b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043b6:	4651      	mov	r1, sl
 80043b8:	00ca      	lsls	r2, r1, #3
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	4603      	mov	r3, r0
 80043c0:	4642      	mov	r2, r8
 80043c2:	189b      	adds	r3, r3, r2
 80043c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043c6:	464b      	mov	r3, r9
 80043c8:	460a      	mov	r2, r1
 80043ca:	eb42 0303 	adc.w	r3, r2, r3
 80043ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80043da:	667a      	str	r2, [r7, #100]	@ 0x64
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80043e8:	4649      	mov	r1, r9
 80043ea:	008b      	lsls	r3, r1, #2
 80043ec:	4641      	mov	r1, r8
 80043ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043f2:	4641      	mov	r1, r8
 80043f4:	008a      	lsls	r2, r1, #2
 80043f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80043fa:	f7fc fc2d 	bl	8000c58 <__aeabi_uldivmod>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4b0d      	ldr	r3, [pc, #52]	@ (8004438 <UART_SetConfig+0x4e4>)
 8004404:	fba3 1302 	umull	r1, r3, r3, r2
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	2164      	movs	r1, #100	@ 0x64
 800440c:	fb01 f303 	mul.w	r3, r1, r3
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	3332      	adds	r3, #50	@ 0x32
 8004416:	4a08      	ldr	r2, [pc, #32]	@ (8004438 <UART_SetConfig+0x4e4>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	f003 020f 	and.w	r2, r3, #15
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4422      	add	r2, r4
 800442a:	609a      	str	r2, [r3, #8]
}
 800442c:	bf00      	nop
 800442e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004432:	46bd      	mov	sp, r7
 8004434:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004438:	51eb851f 	.word	0x51eb851f

0800443c <__NVIC_SetPriority>:
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	6039      	str	r1, [r7, #0]
 8004446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444c:	2b00      	cmp	r3, #0
 800444e:	db0a      	blt.n	8004466 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	b2da      	uxtb	r2, r3
 8004454:	490c      	ldr	r1, [pc, #48]	@ (8004488 <__NVIC_SetPriority+0x4c>)
 8004456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445a:	0112      	lsls	r2, r2, #4
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	440b      	add	r3, r1
 8004460:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004464:	e00a      	b.n	800447c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	b2da      	uxtb	r2, r3
 800446a:	4908      	ldr	r1, [pc, #32]	@ (800448c <__NVIC_SetPriority+0x50>)
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	3b04      	subs	r3, #4
 8004474:	0112      	lsls	r2, r2, #4
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	440b      	add	r3, r1
 800447a:	761a      	strb	r2, [r3, #24]
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	e000e100 	.word	0xe000e100
 800448c:	e000ed00 	.word	0xe000ed00

08004490 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004494:	2100      	movs	r1, #0
 8004496:	f06f 0004 	mvn.w	r0, #4
 800449a:	f7ff ffcf 	bl	800443c <__NVIC_SetPriority>
#endif
}
 800449e:	bf00      	nop
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044aa:	f3ef 8305 	mrs	r3, IPSR
 80044ae:	603b      	str	r3, [r7, #0]
  return(result);
 80044b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80044b6:	f06f 0305 	mvn.w	r3, #5
 80044ba:	607b      	str	r3, [r7, #4]
 80044bc:	e00c      	b.n	80044d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80044be:	4b0a      	ldr	r3, [pc, #40]	@ (80044e8 <osKernelInitialize+0x44>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d105      	bne.n	80044d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80044c6:	4b08      	ldr	r3, [pc, #32]	@ (80044e8 <osKernelInitialize+0x44>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	607b      	str	r3, [r7, #4]
 80044d0:	e002      	b.n	80044d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80044d2:	f04f 33ff 	mov.w	r3, #4294967295
 80044d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044d8:	687b      	ldr	r3, [r7, #4]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	200003d4 	.word	0x200003d4

080044ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044f2:	f3ef 8305 	mrs	r3, IPSR
 80044f6:	603b      	str	r3, [r7, #0]
  return(result);
 80044f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <osKernelStart+0x1a>
    stat = osErrorISR;
 80044fe:	f06f 0305 	mvn.w	r3, #5
 8004502:	607b      	str	r3, [r7, #4]
 8004504:	e010      	b.n	8004528 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004506:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <osKernelStart+0x48>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d109      	bne.n	8004522 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800450e:	f7ff ffbf 	bl	8004490 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004512:	4b08      	ldr	r3, [pc, #32]	@ (8004534 <osKernelStart+0x48>)
 8004514:	2202      	movs	r2, #2
 8004516:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004518:	f001 f828 	bl	800556c <vTaskStartScheduler>
      stat = osOK;
 800451c:	2300      	movs	r3, #0
 800451e:	607b      	str	r3, [r7, #4]
 8004520:	e002      	b.n	8004528 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004522:	f04f 33ff 	mov.w	r3, #4294967295
 8004526:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004528:	687b      	ldr	r3, [r7, #4]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	200003d4 	.word	0x200003d4

08004538 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004538:	b580      	push	{r7, lr}
 800453a:	b08e      	sub	sp, #56	@ 0x38
 800453c:	af04      	add	r7, sp, #16
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004544:	2300      	movs	r3, #0
 8004546:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004548:	f3ef 8305 	mrs	r3, IPSR
 800454c:	617b      	str	r3, [r7, #20]
  return(result);
 800454e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004550:	2b00      	cmp	r3, #0
 8004552:	d17e      	bne.n	8004652 <osThreadNew+0x11a>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d07b      	beq.n	8004652 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800455a:	2380      	movs	r3, #128	@ 0x80
 800455c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800455e:	2318      	movs	r3, #24
 8004560:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004562:	2300      	movs	r3, #0
 8004564:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004566:	f04f 33ff 	mov.w	r3, #4294967295
 800456a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d045      	beq.n	80045fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <osThreadNew+0x48>
        name = attr->name;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d008      	beq.n	80045a6 <osThreadNew+0x6e>
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2b38      	cmp	r3, #56	@ 0x38
 8004598:	d805      	bhi.n	80045a6 <osThreadNew+0x6e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <osThreadNew+0x72>
        return (NULL);
 80045a6:	2300      	movs	r3, #0
 80045a8:	e054      	b.n	8004654 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	089b      	lsrs	r3, r3, #2
 80045b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00e      	beq.n	80045e0 <osThreadNew+0xa8>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2b5b      	cmp	r3, #91	@ 0x5b
 80045c8:	d90a      	bls.n	80045e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d006      	beq.n	80045e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <osThreadNew+0xa8>
        mem = 1;
 80045da:	2301      	movs	r3, #1
 80045dc:	61bb      	str	r3, [r7, #24]
 80045de:	e010      	b.n	8004602 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10c      	bne.n	8004602 <osThreadNew+0xca>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d108      	bne.n	8004602 <osThreadNew+0xca>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d104      	bne.n	8004602 <osThreadNew+0xca>
          mem = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	61bb      	str	r3, [r7, #24]
 80045fc:	e001      	b.n	8004602 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d110      	bne.n	800462a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004610:	9202      	str	r2, [sp, #8]
 8004612:	9301      	str	r3, [sp, #4]
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	6a3a      	ldr	r2, [r7, #32]
 800461c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 fdfe 	bl	8005220 <xTaskCreateStatic>
 8004624:	4603      	mov	r3, r0
 8004626:	613b      	str	r3, [r7, #16]
 8004628:	e013      	b.n	8004652 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d110      	bne.n	8004652 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	b29a      	uxth	r2, r3
 8004634:	f107 0310 	add.w	r3, r7, #16
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 fe4c 	bl	80052e0 <xTaskCreate>
 8004648:	4603      	mov	r3, r0
 800464a:	2b01      	cmp	r3, #1
 800464c:	d001      	beq.n	8004652 <osThreadNew+0x11a>
            hTask = NULL;
 800464e:	2300      	movs	r3, #0
 8004650:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004652:	693b      	ldr	r3, [r7, #16]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3728      	adds	r7, #40	@ 0x28
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4a07      	ldr	r2, [pc, #28]	@ (8004688 <vApplicationGetIdleTaskMemory+0x2c>)
 800466c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	4a06      	ldr	r2, [pc, #24]	@ (800468c <vApplicationGetIdleTaskMemory+0x30>)
 8004672:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2280      	movs	r2, #128	@ 0x80
 8004678:	601a      	str	r2, [r3, #0]
}
 800467a:	bf00      	nop
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	200003d8 	.word	0x200003d8
 800468c:	20000434 	.word	0x20000434

08004690 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4a07      	ldr	r2, [pc, #28]	@ (80046bc <vApplicationGetTimerTaskMemory+0x2c>)
 80046a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	4a06      	ldr	r2, [pc, #24]	@ (80046c0 <vApplicationGetTimerTaskMemory+0x30>)
 80046a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046ae:	601a      	str	r2, [r3, #0]
}
 80046b0:	bf00      	nop
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	20000634 	.word	0x20000634
 80046c0:	20000690 	.word	0x20000690

080046c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f103 0208 	add.w	r2, r3, #8
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f04f 32ff 	mov.w	r2, #4294967295
 80046dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f103 0208 	add.w	r2, r3, #8
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f103 0208 	add.w	r2, r3, #8
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800471e:	b480      	push	{r7}
 8004720:	b085      	sub	sp, #20
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	601a      	str	r2, [r3, #0]
}
 800475a:	bf00      	nop
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004766:	b480      	push	{r7}
 8004768:	b085      	sub	sp, #20
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d103      	bne.n	8004786 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	e00c      	b.n	80047a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3308      	adds	r3, #8
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	e002      	b.n	8004794 <vListInsert+0x2e>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	429a      	cmp	r2, r3
 800479e:	d2f6      	bcs.n	800478e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	601a      	str	r2, [r3, #0]
}
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6892      	ldr	r2, [r2, #8]
 80047ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6852      	ldr	r2, [r2, #4]
 80047f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	429a      	cmp	r2, r3
 8004802:	d103      	bne.n	800480c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	1e5a      	subs	r2, r3, #1
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10b      	bne.n	8004858 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004852:	bf00      	nop
 8004854:	bf00      	nop
 8004856:	e7fd      	b.n	8004854 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004858:	f002 f846 	bl	80068e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004864:	68f9      	ldr	r1, [r7, #12]
 8004866:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	441a      	add	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004888:	3b01      	subs	r3, #1
 800488a:	68f9      	ldr	r1, [r7, #12]
 800488c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	441a      	add	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	22ff      	movs	r2, #255	@ 0xff
 800489c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	22ff      	movs	r2, #255	@ 0xff
 80048a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d114      	bne.n	80048d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01a      	beq.n	80048ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3310      	adds	r3, #16
 80048ba:	4618      	mov	r0, r3
 80048bc:	f001 f8e4 	bl	8005a88 <xTaskRemoveFromEventList>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d012      	beq.n	80048ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048c6:	4b0d      	ldr	r3, [pc, #52]	@ (80048fc <xQueueGenericReset+0xd0>)
 80048c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	e009      	b.n	80048ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3310      	adds	r3, #16
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff fef1 	bl	80046c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3324      	adds	r3, #36	@ 0x24
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff feec 	bl	80046c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048ec:	f002 f82e 	bl	800694c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048f0:	2301      	movs	r3, #1
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	e000ed04 	.word	0xe000ed04

08004900 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08e      	sub	sp, #56	@ 0x38
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004926:	bf00      	nop
 8004928:	bf00      	nop
 800492a:	e7fd      	b.n	8004928 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10b      	bne.n	800494a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	e7fd      	b.n	8004946 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <xQueueGenericCreateStatic+0x56>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <xQueueGenericCreateStatic+0x5a>
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <xQueueGenericCreateStatic+0x5c>
 800495a:	2300      	movs	r3, #0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10b      	bne.n	8004978 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	623b      	str	r3, [r7, #32]
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	e7fd      	b.n	8004974 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <xQueueGenericCreateStatic+0x84>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <xQueueGenericCreateStatic+0x88>
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <xQueueGenericCreateStatic+0x8a>
 8004988:	2300      	movs	r3, #0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10b      	bne.n	80049a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	61fb      	str	r3, [r7, #28]
}
 80049a0:	bf00      	nop
 80049a2:	bf00      	nop
 80049a4:	e7fd      	b.n	80049a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049a6:	2350      	movs	r3, #80	@ 0x50
 80049a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b50      	cmp	r3, #80	@ 0x50
 80049ae:	d00b      	beq.n	80049c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	61bb      	str	r3, [r7, #24]
}
 80049c2:	bf00      	nop
 80049c4:	bf00      	nop
 80049c6:	e7fd      	b.n	80049c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80049ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00d      	beq.n	80049f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80049e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	4613      	mov	r3, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	68b9      	ldr	r1, [r7, #8]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f805 	bl	80049fa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3730      	adds	r7, #48	@ 0x30
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	607a      	str	r2, [r7, #4]
 8004a06:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d103      	bne.n	8004a16 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	e002      	b.n	8004a1c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a28:	2101      	movs	r1, #1
 8004a2a:	69b8      	ldr	r0, [r7, #24]
 8004a2c:	f7ff fefe 	bl	800482c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	78fa      	ldrb	r2, [r7, #3]
 8004a34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08e      	sub	sp, #56	@ 0x38
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10b      	bne.n	8004a74 <xQueueGenericSend+0x34>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a6e:	bf00      	nop
 8004a70:	bf00      	nop
 8004a72:	e7fd      	b.n	8004a70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d103      	bne.n	8004a82 <xQueueGenericSend+0x42>
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <xQueueGenericSend+0x46>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <xQueueGenericSend+0x48>
 8004a86:	2300      	movs	r3, #0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10b      	bne.n	8004aa4 <xQueueGenericSend+0x64>
	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
 8004aa2:	e7fd      	b.n	8004aa0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d103      	bne.n	8004ab2 <xQueueGenericSend+0x72>
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <xQueueGenericSend+0x76>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <xQueueGenericSend+0x78>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10b      	bne.n	8004ad4 <xQueueGenericSend+0x94>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	623b      	str	r3, [r7, #32]
}
 8004ace:	bf00      	nop
 8004ad0:	bf00      	nop
 8004ad2:	e7fd      	b.n	8004ad0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ad4:	f001 f998 	bl	8005e08 <xTaskGetSchedulerState>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <xQueueGenericSend+0xa4>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <xQueueGenericSend+0xa8>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e000      	b.n	8004aea <xQueueGenericSend+0xaa>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10b      	bne.n	8004b06 <xQueueGenericSend+0xc6>
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	61fb      	str	r3, [r7, #28]
}
 8004b00:	bf00      	nop
 8004b02:	bf00      	nop
 8004b04:	e7fd      	b.n	8004b02 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b06:	f001 feef 	bl	80068e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d302      	bcc.n	8004b1c <xQueueGenericSend+0xdc>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d129      	bne.n	8004b70 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	68b9      	ldr	r1, [r7, #8]
 8004b20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b22:	f000 fa0f 	bl	8004f44 <prvCopyDataToQueue>
 8004b26:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d010      	beq.n	8004b52 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b32:	3324      	adds	r3, #36	@ 0x24
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 ffa7 	bl	8005a88 <xTaskRemoveFromEventList>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d013      	beq.n	8004b68 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b40:	4b3f      	ldr	r3, [pc, #252]	@ (8004c40 <xQueueGenericSend+0x200>)
 8004b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	e00a      	b.n	8004b68 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d007      	beq.n	8004b68 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b58:	4b39      	ldr	r3, [pc, #228]	@ (8004c40 <xQueueGenericSend+0x200>)
 8004b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b68:	f001 fef0 	bl	800694c <vPortExitCritical>
				return pdPASS;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e063      	b.n	8004c38 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d103      	bne.n	8004b7e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b76:	f001 fee9 	bl	800694c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e05c      	b.n	8004c38 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b84:	f107 0314 	add.w	r3, r7, #20
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 ffe1 	bl	8005b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b92:	f001 fedb 	bl	800694c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b96:	f000 fd51 	bl	800563c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b9a:	f001 fea5 	bl	80068e8 <vPortEnterCritical>
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ba4:	b25b      	sxtb	r3, r3
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d103      	bne.n	8004bb4 <xQueueGenericSend+0x174>
 8004bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bba:	b25b      	sxtb	r3, r3
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d103      	bne.n	8004bca <xQueueGenericSend+0x18a>
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bca:	f001 febf 	bl	800694c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bce:	1d3a      	adds	r2, r7, #4
 8004bd0:	f107 0314 	add.w	r3, r7, #20
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 ffd0 	bl	8005b7c <xTaskCheckForTimeOut>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d124      	bne.n	8004c2c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004be2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004be4:	f000 faa6 	bl	8005134 <prvIsQueueFull>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d018      	beq.n	8004c20 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf0:	3310      	adds	r3, #16
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fef4 	bl	80059e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004bfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bfe:	f000 fa31 	bl	8005064 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c02:	f000 fd29 	bl	8005658 <xTaskResumeAll>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f47f af7c 	bne.w	8004b06 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c40 <xQueueGenericSend+0x200>)
 8004c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	e772      	b.n	8004b06 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c22:	f000 fa1f 	bl	8005064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c26:	f000 fd17 	bl	8005658 <xTaskResumeAll>
 8004c2a:	e76c      	b.n	8004b06 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c2e:	f000 fa19 	bl	8005064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c32:	f000 fd11 	bl	8005658 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3738      	adds	r7, #56	@ 0x38
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	e000ed04 	.word	0xe000ed04

08004c44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b090      	sub	sp, #64	@ 0x40
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10b      	bne.n	8004c74 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c6e:	bf00      	nop
 8004c70:	bf00      	nop
 8004c72:	e7fd      	b.n	8004c70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d103      	bne.n	8004c82 <xQueueGenericSendFromISR+0x3e>
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <xQueueGenericSendFromISR+0x42>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <xQueueGenericSendFromISR+0x44>
 8004c86:	2300      	movs	r3, #0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10b      	bne.n	8004ca4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c9e:	bf00      	nop
 8004ca0:	bf00      	nop
 8004ca2:	e7fd      	b.n	8004ca0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d103      	bne.n	8004cb2 <xQueueGenericSendFromISR+0x6e>
 8004caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <xQueueGenericSendFromISR+0x72>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <xQueueGenericSendFromISR+0x74>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10b      	bne.n	8004cd4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	623b      	str	r3, [r7, #32]
}
 8004cce:	bf00      	nop
 8004cd0:	bf00      	nop
 8004cd2:	e7fd      	b.n	8004cd0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cd4:	f001 fee8 	bl	8006aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cd8:	f3ef 8211 	mrs	r2, BASEPRI
 8004cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	61fa      	str	r2, [r7, #28]
 8004cee:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cf2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d302      	bcc.n	8004d06 <xQueueGenericSendFromISR+0xc2>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d12f      	bne.n	8004d66 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004d1c:	f000 f912 	bl	8004f44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d20:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d28:	d112      	bne.n	8004d50 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d016      	beq.n	8004d60 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d34:	3324      	adds	r3, #36	@ 0x24
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fea6 	bl	8005a88 <xTaskRemoveFromEventList>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00e      	beq.n	8004d60 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00b      	beq.n	8004d60 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	e007      	b.n	8004d60 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004d54:	3301      	adds	r3, #1
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	b25a      	sxtb	r2, r3
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004d60:	2301      	movs	r3, #1
 8004d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004d64:	e001      	b.n	8004d6a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d6c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3740      	adds	r7, #64	@ 0x40
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08c      	sub	sp, #48	@ 0x30
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10b      	bne.n	8004db2 <xQueueReceive+0x32>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	623b      	str	r3, [r7, #32]
}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	e7fd      	b.n	8004dae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d103      	bne.n	8004dc0 <xQueueReceive+0x40>
 8004db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <xQueueReceive+0x44>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <xQueueReceive+0x46>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <xQueueReceive+0x62>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	61fb      	str	r3, [r7, #28]
}
 8004ddc:	bf00      	nop
 8004dde:	bf00      	nop
 8004de0:	e7fd      	b.n	8004dde <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004de2:	f001 f811 	bl	8005e08 <xTaskGetSchedulerState>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <xQueueReceive+0x72>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <xQueueReceive+0x76>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <xQueueReceive+0x78>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10b      	bne.n	8004e14 <xQueueReceive+0x94>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	61bb      	str	r3, [r7, #24]
}
 8004e0e:	bf00      	nop
 8004e10:	bf00      	nop
 8004e12:	e7fd      	b.n	8004e10 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e14:	f001 fd68 	bl	80068e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01f      	beq.n	8004e64 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e28:	f000 f8f6 	bl	8005018 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	1e5a      	subs	r2, r3, #1
 8004e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e32:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00f      	beq.n	8004e5c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3e:	3310      	adds	r3, #16
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fe21 	bl	8005a88 <xTaskRemoveFromEventList>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e4c:	4b3c      	ldr	r3, [pc, #240]	@ (8004f40 <xQueueReceive+0x1c0>)
 8004e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e5c:	f001 fd76 	bl	800694c <vPortExitCritical>
				return pdPASS;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e069      	b.n	8004f38 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d103      	bne.n	8004e72 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e6a:	f001 fd6f 	bl	800694c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e062      	b.n	8004f38 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d106      	bne.n	8004e86 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e78:	f107 0310 	add.w	r3, r7, #16
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fe67 	bl	8005b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e82:	2301      	movs	r3, #1
 8004e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e86:	f001 fd61 	bl	800694c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e8a:	f000 fbd7 	bl	800563c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e8e:	f001 fd2b 	bl	80068e8 <vPortEnterCritical>
 8004e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e98:	b25b      	sxtb	r3, r3
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	d103      	bne.n	8004ea8 <xQueueReceive+0x128>
 8004ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004eae:	b25b      	sxtb	r3, r3
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb4:	d103      	bne.n	8004ebe <xQueueReceive+0x13e>
 8004eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ebe:	f001 fd45 	bl	800694c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ec2:	1d3a      	adds	r2, r7, #4
 8004ec4:	f107 0310 	add.w	r3, r7, #16
 8004ec8:	4611      	mov	r1, r2
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fe56 	bl	8005b7c <xTaskCheckForTimeOut>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d123      	bne.n	8004f1e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ed6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ed8:	f000 f916 	bl	8005108 <prvIsQueueEmpty>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d017      	beq.n	8004f12 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee4:	3324      	adds	r3, #36	@ 0x24
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	4611      	mov	r1, r2
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fd7a 	bl	80059e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ef0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ef2:	f000 f8b7 	bl	8005064 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ef6:	f000 fbaf 	bl	8005658 <xTaskResumeAll>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d189      	bne.n	8004e14 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004f00:	4b0f      	ldr	r3, [pc, #60]	@ (8004f40 <xQueueReceive+0x1c0>)
 8004f02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	e780      	b.n	8004e14 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f14:	f000 f8a6 	bl	8005064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f18:	f000 fb9e 	bl	8005658 <xTaskResumeAll>
 8004f1c:	e77a      	b.n	8004e14 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f20:	f000 f8a0 	bl	8005064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f24:	f000 fb98 	bl	8005658 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f2a:	f000 f8ed 	bl	8005108 <prvIsQueueEmpty>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f43f af6f 	beq.w	8004e14 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3730      	adds	r7, #48	@ 0x30
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	e000ed04 	.word	0xe000ed04

08004f44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10d      	bne.n	8004f7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d14d      	bne.n	8005006 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 ff68 	bl	8005e44 <xTaskPriorityDisinherit>
 8004f74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	609a      	str	r2, [r3, #8]
 8004f7c:	e043      	b.n	8005006 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d119      	bne.n	8004fb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6858      	ldr	r0, [r3, #4]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	68b9      	ldr	r1, [r7, #8]
 8004f90:	f002 fdb7 	bl	8007b02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9c:	441a      	add	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d32b      	bcc.n	8005006 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	605a      	str	r2, [r3, #4]
 8004fb6:	e026      	b.n	8005006 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	68d8      	ldr	r0, [r3, #12]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	f002 fd9d 	bl	8007b02 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd0:	425b      	negs	r3, r3
 8004fd2:	441a      	add	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d207      	bcs.n	8004ff4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fec:	425b      	negs	r3, r3
 8004fee:	441a      	add	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d105      	bne.n	8005006 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	3b01      	subs	r3, #1
 8005004:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800500e:	697b      	ldr	r3, [r7, #20]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d018      	beq.n	800505c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	441a      	add	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	429a      	cmp	r2, r3
 8005042:	d303      	bcc.n	800504c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68d9      	ldr	r1, [r3, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005054:	461a      	mov	r2, r3
 8005056:	6838      	ldr	r0, [r7, #0]
 8005058:	f002 fd53 	bl	8007b02 <memcpy>
	}
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800506c:	f001 fc3c 	bl	80068e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005076:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005078:	e011      	b.n	800509e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507e:	2b00      	cmp	r3, #0
 8005080:	d012      	beq.n	80050a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3324      	adds	r3, #36	@ 0x24
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fcfe 	bl	8005a88 <xTaskRemoveFromEventList>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005092:	f000 fdd7 	bl	8005c44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	3b01      	subs	r3, #1
 800509a:	b2db      	uxtb	r3, r3
 800509c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800509e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	dce9      	bgt.n	800507a <prvUnlockQueue+0x16>
 80050a6:	e000      	b.n	80050aa <prvUnlockQueue+0x46>
					break;
 80050a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	22ff      	movs	r2, #255	@ 0xff
 80050ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80050b2:	f001 fc4b 	bl	800694c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050b6:	f001 fc17 	bl	80068e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050c2:	e011      	b.n	80050e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d012      	beq.n	80050f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3310      	adds	r3, #16
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fcd9 	bl	8005a88 <xTaskRemoveFromEventList>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050dc:	f000 fdb2 	bl	8005c44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050e0:	7bbb      	ldrb	r3, [r7, #14]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	dce9      	bgt.n	80050c4 <prvUnlockQueue+0x60>
 80050f0:	e000      	b.n	80050f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	22ff      	movs	r2, #255	@ 0xff
 80050f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80050fc:	f001 fc26 	bl	800694c <vPortExitCritical>
}
 8005100:	bf00      	nop
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005110:	f001 fbea 	bl	80068e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005118:	2b00      	cmp	r3, #0
 800511a:	d102      	bne.n	8005122 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800511c:	2301      	movs	r3, #1
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	e001      	b.n	8005126 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005126:	f001 fc11 	bl	800694c <vPortExitCritical>

	return xReturn;
 800512a:	68fb      	ldr	r3, [r7, #12]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800513c:	f001 fbd4 	bl	80068e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005148:	429a      	cmp	r2, r3
 800514a:	d102      	bne.n	8005152 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800514c:	2301      	movs	r3, #1
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	e001      	b.n	8005156 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005156:	f001 fbf9 	bl	800694c <vPortExitCritical>

	return xReturn;
 800515a:	68fb      	ldr	r3, [r7, #12]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	e014      	b.n	800519e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005174:	4a0f      	ldr	r2, [pc, #60]	@ (80051b4 <vQueueAddToRegistry+0x50>)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10b      	bne.n	8005198 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005180:	490c      	ldr	r1, [pc, #48]	@ (80051b4 <vQueueAddToRegistry+0x50>)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800518a:	4a0a      	ldr	r2, [pc, #40]	@ (80051b4 <vQueueAddToRegistry+0x50>)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4413      	add	r3, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005196:	e006      	b.n	80051a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3301      	adds	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b07      	cmp	r3, #7
 80051a2:	d9e7      	bls.n	8005174 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000a90 	.word	0x20000a90

080051b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051c8:	f001 fb8e 	bl	80068e8 <vPortEnterCritical>
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051d2:	b25b      	sxtb	r3, r3
 80051d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d8:	d103      	bne.n	80051e2 <vQueueWaitForMessageRestricted+0x2a>
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051e8:	b25b      	sxtb	r3, r3
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	d103      	bne.n	80051f8 <vQueueWaitForMessageRestricted+0x40>
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051f8:	f001 fba8 	bl	800694c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005200:	2b00      	cmp	r3, #0
 8005202:	d106      	bne.n	8005212 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	3324      	adds	r3, #36	@ 0x24
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	4618      	mov	r0, r3
 800520e:	f000 fc0f 	bl	8005a30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005212:	6978      	ldr	r0, [r7, #20]
 8005214:	f7ff ff26 	bl	8005064 <prvUnlockQueue>
	}
 8005218:	bf00      	nop
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08e      	sub	sp, #56	@ 0x38
 8005224:	af04      	add	r7, sp, #16
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800522e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10b      	bne.n	800524c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	623b      	str	r3, [r7, #32]
}
 8005246:	bf00      	nop
 8005248:	bf00      	nop
 800524a:	e7fd      	b.n	8005248 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800524c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10b      	bne.n	800526a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	61fb      	str	r3, [r7, #28]
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	e7fd      	b.n	8005266 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800526a:	235c      	movs	r3, #92	@ 0x5c
 800526c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b5c      	cmp	r3, #92	@ 0x5c
 8005272:	d00b      	beq.n	800528c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	61bb      	str	r3, [r7, #24]
}
 8005286:	bf00      	nop
 8005288:	bf00      	nop
 800528a:	e7fd      	b.n	8005288 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800528c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800528e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01e      	beq.n	80052d2 <xTaskCreateStatic+0xb2>
 8005294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005296:	2b00      	cmp	r3, #0
 8005298:	d01b      	beq.n	80052d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800529a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052ac:	2300      	movs	r3, #0
 80052ae:	9303      	str	r3, [sp, #12]
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	9302      	str	r3, [sp, #8]
 80052b4:	f107 0314 	add.w	r3, r7, #20
 80052b8:	9301      	str	r3, [sp, #4]
 80052ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f850 	bl	800536a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80052cc:	f000 f8de 	bl	800548c <prvAddNewTaskToReadyList>
 80052d0:	e001      	b.n	80052d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052d6:	697b      	ldr	r3, [r7, #20]
	}
 80052d8:	4618      	mov	r0, r3
 80052da:	3728      	adds	r7, #40	@ 0x28
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08c      	sub	sp, #48	@ 0x30
 80052e4:	af04      	add	r7, sp, #16
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	4613      	mov	r3, r2
 80052ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052f0:	88fb      	ldrh	r3, [r7, #6]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f001 fc19 	bl	8006b2c <pvPortMalloc>
 80052fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00e      	beq.n	8005320 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005302:	205c      	movs	r0, #92	@ 0x5c
 8005304:	f001 fc12 	bl	8006b2c <pvPortMalloc>
 8005308:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	631a      	str	r2, [r3, #48]	@ 0x30
 8005316:	e005      	b.n	8005324 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005318:	6978      	ldr	r0, [r7, #20]
 800531a:	f001 fcd5 	bl	8006cc8 <vPortFree>
 800531e:	e001      	b.n	8005324 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005320:	2300      	movs	r3, #0
 8005322:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d017      	beq.n	800535a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005332:	88fa      	ldrh	r2, [r7, #6]
 8005334:	2300      	movs	r3, #0
 8005336:	9303      	str	r3, [sp, #12]
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	9302      	str	r3, [sp, #8]
 800533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f80e 	bl	800536a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800534e:	69f8      	ldr	r0, [r7, #28]
 8005350:	f000 f89c 	bl	800548c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005354:	2301      	movs	r3, #1
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	e002      	b.n	8005360 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800535a:	f04f 33ff 	mov.w	r3, #4294967295
 800535e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005360:	69bb      	ldr	r3, [r7, #24]
	}
 8005362:	4618      	mov	r0, r3
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b088      	sub	sp, #32
 800536e:	af00      	add	r7, sp, #0
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	607a      	str	r2, [r7, #4]
 8005376:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	461a      	mov	r2, r3
 8005382:	21a5      	movs	r1, #165	@ 0xa5
 8005384:	f002 fb3d 	bl	8007a02 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005392:	3b01      	subs	r3, #1
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	f023 0307 	bic.w	r3, r3, #7
 80053a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00b      	beq.n	80053c4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	617b      	str	r3, [r7, #20]
}
 80053be:	bf00      	nop
 80053c0:	bf00      	nop
 80053c2:	e7fd      	b.n	80053c0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01f      	beq.n	800540a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
 80053ce:	e012      	b.n	80053f6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	4413      	add	r3, r2
 80053d6:	7819      	ldrb	r1, [r3, #0]
 80053d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	4413      	add	r3, r2
 80053de:	3334      	adds	r3, #52	@ 0x34
 80053e0:	460a      	mov	r2, r1
 80053e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d006      	beq.n	80053fe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	3301      	adds	r3, #1
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	2b0f      	cmp	r3, #15
 80053fa:	d9e9      	bls.n	80053d0 <prvInitialiseNewTask+0x66>
 80053fc:	e000      	b.n	8005400 <prvInitialiseNewTask+0x96>
			{
				break;
 80053fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005408:	e003      	b.n	8005412 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800540a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005414:	2b37      	cmp	r3, #55	@ 0x37
 8005416:	d901      	bls.n	800541c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005418:	2337      	movs	r3, #55	@ 0x37
 800541a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800541c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005420:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005426:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542a:	2200      	movs	r2, #0
 800542c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005430:	3304      	adds	r3, #4
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff f966 	bl	8004704 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543a:	3318      	adds	r3, #24
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff f961 	bl	8004704 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005446:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800544e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005450:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005456:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545a:	2200      	movs	r2, #0
 800545c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800545e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	68f9      	ldr	r1, [r7, #12]
 800546a:	69b8      	ldr	r0, [r7, #24]
 800546c:	f001 f908 	bl	8006680 <pxPortInitialiseStack>
 8005470:	4602      	mov	r2, r0
 8005472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005474:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800547c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005482:	bf00      	nop
 8005484:	3720      	adds	r7, #32
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005494:	f001 fa28 	bl	80068e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005498:	4b2d      	ldr	r3, [pc, #180]	@ (8005550 <prvAddNewTaskToReadyList+0xc4>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	4a2c      	ldr	r2, [pc, #176]	@ (8005550 <prvAddNewTaskToReadyList+0xc4>)
 80054a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005554 <prvAddNewTaskToReadyList+0xc8>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d109      	bne.n	80054be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005554 <prvAddNewTaskToReadyList+0xc8>)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054b0:	4b27      	ldr	r3, [pc, #156]	@ (8005550 <prvAddNewTaskToReadyList+0xc4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d110      	bne.n	80054da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054b8:	f000 fbe8 	bl	8005c8c <prvInitialiseTaskLists>
 80054bc:	e00d      	b.n	80054da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054be:	4b26      	ldr	r3, [pc, #152]	@ (8005558 <prvAddNewTaskToReadyList+0xcc>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d109      	bne.n	80054da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054c6:	4b23      	ldr	r3, [pc, #140]	@ (8005554 <prvAddNewTaskToReadyList+0xc8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d802      	bhi.n	80054da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005554 <prvAddNewTaskToReadyList+0xc8>)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054da:	4b20      	ldr	r3, [pc, #128]	@ (800555c <prvAddNewTaskToReadyList+0xd0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3301      	adds	r3, #1
 80054e0:	4a1e      	ldr	r2, [pc, #120]	@ (800555c <prvAddNewTaskToReadyList+0xd0>)
 80054e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80054e4:	4b1d      	ldr	r3, [pc, #116]	@ (800555c <prvAddNewTaskToReadyList+0xd0>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005560 <prvAddNewTaskToReadyList+0xd4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d903      	bls.n	8005500 <prvAddNewTaskToReadyList+0x74>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fc:	4a18      	ldr	r2, [pc, #96]	@ (8005560 <prvAddNewTaskToReadyList+0xd4>)
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005504:	4613      	mov	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4a15      	ldr	r2, [pc, #84]	@ (8005564 <prvAddNewTaskToReadyList+0xd8>)
 800550e:	441a      	add	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3304      	adds	r3, #4
 8005514:	4619      	mov	r1, r3
 8005516:	4610      	mov	r0, r2
 8005518:	f7ff f901 	bl	800471e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800551c:	f001 fa16 	bl	800694c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005520:	4b0d      	ldr	r3, [pc, #52]	@ (8005558 <prvAddNewTaskToReadyList+0xcc>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00e      	beq.n	8005546 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005528:	4b0a      	ldr	r3, [pc, #40]	@ (8005554 <prvAddNewTaskToReadyList+0xc8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005532:	429a      	cmp	r2, r3
 8005534:	d207      	bcs.n	8005546 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005536:	4b0c      	ldr	r3, [pc, #48]	@ (8005568 <prvAddNewTaskToReadyList+0xdc>)
 8005538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005546:	bf00      	nop
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20000fa4 	.word	0x20000fa4
 8005554:	20000ad0 	.word	0x20000ad0
 8005558:	20000fb0 	.word	0x20000fb0
 800555c:	20000fc0 	.word	0x20000fc0
 8005560:	20000fac 	.word	0x20000fac
 8005564:	20000ad4 	.word	0x20000ad4
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08a      	sub	sp, #40	@ 0x28
 8005570:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005572:	2300      	movs	r3, #0
 8005574:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005576:	2300      	movs	r3, #0
 8005578:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800557a:	463a      	mov	r2, r7
 800557c:	1d39      	adds	r1, r7, #4
 800557e:	f107 0308 	add.w	r3, r7, #8
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff f86a 	bl	800465c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005588:	6839      	ldr	r1, [r7, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	9202      	str	r2, [sp, #8]
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	2300      	movs	r3, #0
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	2300      	movs	r3, #0
 8005598:	460a      	mov	r2, r1
 800559a:	4922      	ldr	r1, [pc, #136]	@ (8005624 <vTaskStartScheduler+0xb8>)
 800559c:	4822      	ldr	r0, [pc, #136]	@ (8005628 <vTaskStartScheduler+0xbc>)
 800559e:	f7ff fe3f 	bl	8005220 <xTaskCreateStatic>
 80055a2:	4603      	mov	r3, r0
 80055a4:	4a21      	ldr	r2, [pc, #132]	@ (800562c <vTaskStartScheduler+0xc0>)
 80055a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055a8:	4b20      	ldr	r3, [pc, #128]	@ (800562c <vTaskStartScheduler+0xc0>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055b0:	2301      	movs	r3, #1
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	e001      	b.n	80055ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d102      	bne.n	80055c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80055c0:	f000 fd04 	bl	8005fcc <xTimerCreateTimerTask>
 80055c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d116      	bne.n	80055fa <vTaskStartScheduler+0x8e>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	613b      	str	r3, [r7, #16]
}
 80055de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055e0:	4b13      	ldr	r3, [pc, #76]	@ (8005630 <vTaskStartScheduler+0xc4>)
 80055e2:	f04f 32ff 	mov.w	r2, #4294967295
 80055e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055e8:	4b12      	ldr	r3, [pc, #72]	@ (8005634 <vTaskStartScheduler+0xc8>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055ee:	4b12      	ldr	r3, [pc, #72]	@ (8005638 <vTaskStartScheduler+0xcc>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055f4:	f001 f8d4 	bl	80067a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055f8:	e00f      	b.n	800561a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d10b      	bne.n	800561a <vTaskStartScheduler+0xae>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	60fb      	str	r3, [r7, #12]
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop
 8005618:	e7fd      	b.n	8005616 <vTaskStartScheduler+0xaa>
}
 800561a:	bf00      	nop
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	08009bf0 	.word	0x08009bf0
 8005628:	08005c5d 	.word	0x08005c5d
 800562c:	20000fc8 	.word	0x20000fc8
 8005630:	20000fc4 	.word	0x20000fc4
 8005634:	20000fb0 	.word	0x20000fb0
 8005638:	20000fa8 	.word	0x20000fa8

0800563c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005640:	4b04      	ldr	r3, [pc, #16]	@ (8005654 <vTaskSuspendAll+0x18>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3301      	adds	r3, #1
 8005646:	4a03      	ldr	r2, [pc, #12]	@ (8005654 <vTaskSuspendAll+0x18>)
 8005648:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800564a:	bf00      	nop
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	20000fcc 	.word	0x20000fcc

08005658 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005662:	2300      	movs	r3, #0
 8005664:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005666:	4b42      	ldr	r3, [pc, #264]	@ (8005770 <xTaskResumeAll+0x118>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10b      	bne.n	8005686 <xTaskResumeAll+0x2e>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	603b      	str	r3, [r7, #0]
}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	e7fd      	b.n	8005682 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005686:	f001 f92f 	bl	80068e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800568a:	4b39      	ldr	r3, [pc, #228]	@ (8005770 <xTaskResumeAll+0x118>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3b01      	subs	r3, #1
 8005690:	4a37      	ldr	r2, [pc, #220]	@ (8005770 <xTaskResumeAll+0x118>)
 8005692:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005694:	4b36      	ldr	r3, [pc, #216]	@ (8005770 <xTaskResumeAll+0x118>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d162      	bne.n	8005762 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800569c:	4b35      	ldr	r3, [pc, #212]	@ (8005774 <xTaskResumeAll+0x11c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d05e      	beq.n	8005762 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056a4:	e02f      	b.n	8005706 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a6:	4b34      	ldr	r3, [pc, #208]	@ (8005778 <xTaskResumeAll+0x120>)
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3318      	adds	r3, #24
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff f890 	bl	80047d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3304      	adds	r3, #4
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff f88b 	bl	80047d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056c6:	4b2d      	ldr	r3, [pc, #180]	@ (800577c <xTaskResumeAll+0x124>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d903      	bls.n	80056d6 <xTaskResumeAll+0x7e>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d2:	4a2a      	ldr	r2, [pc, #168]	@ (800577c <xTaskResumeAll+0x124>)
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4a27      	ldr	r2, [pc, #156]	@ (8005780 <xTaskResumeAll+0x128>)
 80056e4:	441a      	add	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3304      	adds	r3, #4
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f7ff f816 	bl	800471e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f6:	4b23      	ldr	r3, [pc, #140]	@ (8005784 <xTaskResumeAll+0x12c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d302      	bcc.n	8005706 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005700:	4b21      	ldr	r3, [pc, #132]	@ (8005788 <xTaskResumeAll+0x130>)
 8005702:	2201      	movs	r2, #1
 8005704:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005706:	4b1c      	ldr	r3, [pc, #112]	@ (8005778 <xTaskResumeAll+0x120>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1cb      	bne.n	80056a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005714:	f000 fb58 	bl	8005dc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005718:	4b1c      	ldr	r3, [pc, #112]	@ (800578c <xTaskResumeAll+0x134>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d010      	beq.n	8005746 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005724:	f000 f846 	bl	80057b4 <xTaskIncrementTick>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800572e:	4b16      	ldr	r3, [pc, #88]	@ (8005788 <xTaskResumeAll+0x130>)
 8005730:	2201      	movs	r2, #1
 8005732:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3b01      	subs	r3, #1
 8005738:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1f1      	bne.n	8005724 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005740:	4b12      	ldr	r3, [pc, #72]	@ (800578c <xTaskResumeAll+0x134>)
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005746:	4b10      	ldr	r3, [pc, #64]	@ (8005788 <xTaskResumeAll+0x130>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800574e:	2301      	movs	r3, #1
 8005750:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005752:	4b0f      	ldr	r3, [pc, #60]	@ (8005790 <xTaskResumeAll+0x138>)
 8005754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005762:	f001 f8f3 	bl	800694c <vPortExitCritical>

	return xAlreadyYielded;
 8005766:	68bb      	ldr	r3, [r7, #8]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	20000fcc 	.word	0x20000fcc
 8005774:	20000fa4 	.word	0x20000fa4
 8005778:	20000f64 	.word	0x20000f64
 800577c:	20000fac 	.word	0x20000fac
 8005780:	20000ad4 	.word	0x20000ad4
 8005784:	20000ad0 	.word	0x20000ad0
 8005788:	20000fb8 	.word	0x20000fb8
 800578c:	20000fb4 	.word	0x20000fb4
 8005790:	e000ed04 	.word	0xe000ed04

08005794 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800579a:	4b05      	ldr	r3, [pc, #20]	@ (80057b0 <xTaskGetTickCount+0x1c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80057a0:	687b      	ldr	r3, [r7, #4]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20000fa8 	.word	0x20000fa8

080057b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057ba:	2300      	movs	r3, #0
 80057bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057be:	4b4f      	ldr	r3, [pc, #316]	@ (80058fc <xTaskIncrementTick+0x148>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f040 8090 	bne.w	80058e8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057c8:	4b4d      	ldr	r3, [pc, #308]	@ (8005900 <xTaskIncrementTick+0x14c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3301      	adds	r3, #1
 80057ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057d0:	4a4b      	ldr	r2, [pc, #300]	@ (8005900 <xTaskIncrementTick+0x14c>)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d121      	bne.n	8005820 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80057dc:	4b49      	ldr	r3, [pc, #292]	@ (8005904 <xTaskIncrementTick+0x150>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00b      	beq.n	80057fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80057e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	603b      	str	r3, [r7, #0]
}
 80057f8:	bf00      	nop
 80057fa:	bf00      	nop
 80057fc:	e7fd      	b.n	80057fa <xTaskIncrementTick+0x46>
 80057fe:	4b41      	ldr	r3, [pc, #260]	@ (8005904 <xTaskIncrementTick+0x150>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	4b40      	ldr	r3, [pc, #256]	@ (8005908 <xTaskIncrementTick+0x154>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a3e      	ldr	r2, [pc, #248]	@ (8005904 <xTaskIncrementTick+0x150>)
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	4a3e      	ldr	r2, [pc, #248]	@ (8005908 <xTaskIncrementTick+0x154>)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	4b3e      	ldr	r3, [pc, #248]	@ (800590c <xTaskIncrementTick+0x158>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3301      	adds	r3, #1
 8005818:	4a3c      	ldr	r2, [pc, #240]	@ (800590c <xTaskIncrementTick+0x158>)
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	f000 fad4 	bl	8005dc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005820:	4b3b      	ldr	r3, [pc, #236]	@ (8005910 <xTaskIncrementTick+0x15c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	429a      	cmp	r2, r3
 8005828:	d349      	bcc.n	80058be <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800582a:	4b36      	ldr	r3, [pc, #216]	@ (8005904 <xTaskIncrementTick+0x150>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d104      	bne.n	800583e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005834:	4b36      	ldr	r3, [pc, #216]	@ (8005910 <xTaskIncrementTick+0x15c>)
 8005836:	f04f 32ff 	mov.w	r2, #4294967295
 800583a:	601a      	str	r2, [r3, #0]
					break;
 800583c:	e03f      	b.n	80058be <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800583e:	4b31      	ldr	r3, [pc, #196]	@ (8005904 <xTaskIncrementTick+0x150>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	429a      	cmp	r2, r3
 8005854:	d203      	bcs.n	800585e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005856:	4a2e      	ldr	r2, [pc, #184]	@ (8005910 <xTaskIncrementTick+0x15c>)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800585c:	e02f      	b.n	80058be <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	3304      	adds	r3, #4
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe ffb8 	bl	80047d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	3318      	adds	r3, #24
 8005874:	4618      	mov	r0, r3
 8005876:	f7fe ffaf 	bl	80047d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800587e:	4b25      	ldr	r3, [pc, #148]	@ (8005914 <xTaskIncrementTick+0x160>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d903      	bls.n	800588e <xTaskIncrementTick+0xda>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588a:	4a22      	ldr	r2, [pc, #136]	@ (8005914 <xTaskIncrementTick+0x160>)
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4a1f      	ldr	r2, [pc, #124]	@ (8005918 <xTaskIncrementTick+0x164>)
 800589c:	441a      	add	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	3304      	adds	r3, #4
 80058a2:	4619      	mov	r1, r3
 80058a4:	4610      	mov	r0, r2
 80058a6:	f7fe ff3a 	bl	800471e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ae:	4b1b      	ldr	r3, [pc, #108]	@ (800591c <xTaskIncrementTick+0x168>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d3b8      	bcc.n	800582a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80058b8:	2301      	movs	r3, #1
 80058ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058bc:	e7b5      	b.n	800582a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058be:	4b17      	ldr	r3, [pc, #92]	@ (800591c <xTaskIncrementTick+0x168>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c4:	4914      	ldr	r1, [pc, #80]	@ (8005918 <xTaskIncrementTick+0x164>)
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	440b      	add	r3, r1
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d901      	bls.n	80058da <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80058d6:	2301      	movs	r3, #1
 80058d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058da:	4b11      	ldr	r3, [pc, #68]	@ (8005920 <xTaskIncrementTick+0x16c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d007      	beq.n	80058f2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80058e2:	2301      	movs	r3, #1
 80058e4:	617b      	str	r3, [r7, #20]
 80058e6:	e004      	b.n	80058f2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005924 <xTaskIncrementTick+0x170>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3301      	adds	r3, #1
 80058ee:	4a0d      	ldr	r2, [pc, #52]	@ (8005924 <xTaskIncrementTick+0x170>)
 80058f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058f2:	697b      	ldr	r3, [r7, #20]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	20000fcc 	.word	0x20000fcc
 8005900:	20000fa8 	.word	0x20000fa8
 8005904:	20000f5c 	.word	0x20000f5c
 8005908:	20000f60 	.word	0x20000f60
 800590c:	20000fbc 	.word	0x20000fbc
 8005910:	20000fc4 	.word	0x20000fc4
 8005914:	20000fac 	.word	0x20000fac
 8005918:	20000ad4 	.word	0x20000ad4
 800591c:	20000ad0 	.word	0x20000ad0
 8005920:	20000fb8 	.word	0x20000fb8
 8005924:	20000fb4 	.word	0x20000fb4

08005928 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800592e:	4b28      	ldr	r3, [pc, #160]	@ (80059d0 <vTaskSwitchContext+0xa8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005936:	4b27      	ldr	r3, [pc, #156]	@ (80059d4 <vTaskSwitchContext+0xac>)
 8005938:	2201      	movs	r2, #1
 800593a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800593c:	e042      	b.n	80059c4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800593e:	4b25      	ldr	r3, [pc, #148]	@ (80059d4 <vTaskSwitchContext+0xac>)
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005944:	4b24      	ldr	r3, [pc, #144]	@ (80059d8 <vTaskSwitchContext+0xb0>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	e011      	b.n	8005970 <vTaskSwitchContext+0x48>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10b      	bne.n	800596a <vTaskSwitchContext+0x42>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	607b      	str	r3, [r7, #4]
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	e7fd      	b.n	8005966 <vTaskSwitchContext+0x3e>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3b01      	subs	r3, #1
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	491a      	ldr	r1, [pc, #104]	@ (80059dc <vTaskSwitchContext+0xb4>)
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	440b      	add	r3, r1
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0e3      	beq.n	800594c <vTaskSwitchContext+0x24>
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4a13      	ldr	r2, [pc, #76]	@ (80059dc <vTaskSwitchContext+0xb4>)
 8005990:	4413      	add	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	3308      	adds	r3, #8
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d104      	bne.n	80059b4 <vTaskSwitchContext+0x8c>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	605a      	str	r2, [r3, #4]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	4a09      	ldr	r2, [pc, #36]	@ (80059e0 <vTaskSwitchContext+0xb8>)
 80059bc:	6013      	str	r3, [r2, #0]
 80059be:	4a06      	ldr	r2, [pc, #24]	@ (80059d8 <vTaskSwitchContext+0xb0>)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6013      	str	r3, [r2, #0]
}
 80059c4:	bf00      	nop
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	20000fcc 	.word	0x20000fcc
 80059d4:	20000fb8 	.word	0x20000fb8
 80059d8:	20000fac 	.word	0x20000fac
 80059dc:	20000ad4 	.word	0x20000ad4
 80059e0:	20000ad0 	.word	0x20000ad0

080059e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10b      	bne.n	8005a0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	60fb      	str	r3, [r7, #12]
}
 8005a06:	bf00      	nop
 8005a08:	bf00      	nop
 8005a0a:	e7fd      	b.n	8005a08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a0c:	4b07      	ldr	r3, [pc, #28]	@ (8005a2c <vTaskPlaceOnEventList+0x48>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3318      	adds	r3, #24
 8005a12:	4619      	mov	r1, r3
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7fe fea6 	bl	8004766 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	6838      	ldr	r0, [r7, #0]
 8005a1e:	f000 fa81 	bl	8005f24 <prvAddCurrentTaskToDelayedList>
}
 8005a22:	bf00      	nop
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000ad0 	.word	0x20000ad0

08005a30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10b      	bne.n	8005a5a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	617b      	str	r3, [r7, #20]
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	e7fd      	b.n	8005a56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a84 <vTaskPlaceOnEventListRestricted+0x54>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3318      	adds	r3, #24
 8005a60:	4619      	mov	r1, r3
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f7fe fe5b 	bl	800471e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a72:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	68b8      	ldr	r0, [r7, #8]
 8005a78:	f000 fa54 	bl	8005f24 <prvAddCurrentTaskToDelayedList>
	}
 8005a7c:	bf00      	nop
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	20000ad0 	.word	0x20000ad0

08005a88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10b      	bne.n	8005ab6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	60fb      	str	r3, [r7, #12]
}
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	e7fd      	b.n	8005ab2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	3318      	adds	r3, #24
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fe fe8c 	bl	80047d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b38 <xTaskRemoveFromEventList+0xb0>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d11d      	bne.n	8005b04 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	3304      	adds	r3, #4
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fe fe83 	bl	80047d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad6:	4b19      	ldr	r3, [pc, #100]	@ (8005b3c <xTaskRemoveFromEventList+0xb4>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d903      	bls.n	8005ae6 <xTaskRemoveFromEventList+0x5e>
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae2:	4a16      	ldr	r2, [pc, #88]	@ (8005b3c <xTaskRemoveFromEventList+0xb4>)
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aea:	4613      	mov	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4a13      	ldr	r2, [pc, #76]	@ (8005b40 <xTaskRemoveFromEventList+0xb8>)
 8005af4:	441a      	add	r2, r3
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	3304      	adds	r3, #4
 8005afa:	4619      	mov	r1, r3
 8005afc:	4610      	mov	r0, r2
 8005afe:	f7fe fe0e 	bl	800471e <vListInsertEnd>
 8005b02:	e005      	b.n	8005b10 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	3318      	adds	r3, #24
 8005b08:	4619      	mov	r1, r3
 8005b0a:	480e      	ldr	r0, [pc, #56]	@ (8005b44 <xTaskRemoveFromEventList+0xbc>)
 8005b0c:	f7fe fe07 	bl	800471e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b14:	4b0c      	ldr	r3, [pc, #48]	@ (8005b48 <xTaskRemoveFromEventList+0xc0>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d905      	bls.n	8005b2a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b22:	4b0a      	ldr	r3, [pc, #40]	@ (8005b4c <xTaskRemoveFromEventList+0xc4>)
 8005b24:	2201      	movs	r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	e001      	b.n	8005b2e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b2e:	697b      	ldr	r3, [r7, #20]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20000fcc 	.word	0x20000fcc
 8005b3c:	20000fac 	.word	0x20000fac
 8005b40:	20000ad4 	.word	0x20000ad4
 8005b44:	20000f64 	.word	0x20000f64
 8005b48:	20000ad0 	.word	0x20000ad0
 8005b4c:	20000fb8 	.word	0x20000fb8

08005b50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b58:	4b06      	ldr	r3, [pc, #24]	@ (8005b74 <vTaskInternalSetTimeOutState+0x24>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b60:	4b05      	ldr	r3, [pc, #20]	@ (8005b78 <vTaskInternalSetTimeOutState+0x28>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	605a      	str	r2, [r3, #4]
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	20000fbc 	.word	0x20000fbc
 8005b78:	20000fa8 	.word	0x20000fa8

08005b7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b088      	sub	sp, #32
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10b      	bne.n	8005ba4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	613b      	str	r3, [r7, #16]
}
 8005b9e:	bf00      	nop
 8005ba0:	bf00      	nop
 8005ba2:	e7fd      	b.n	8005ba0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10b      	bne.n	8005bc2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	60fb      	str	r3, [r7, #12]
}
 8005bbc:	bf00      	nop
 8005bbe:	bf00      	nop
 8005bc0:	e7fd      	b.n	8005bbe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005bc2:	f000 fe91 	bl	80068e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c3c <xTaskCheckForTimeOut+0xc0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bde:	d102      	bne.n	8005be6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005be0:	2300      	movs	r3, #0
 8005be2:	61fb      	str	r3, [r7, #28]
 8005be4:	e023      	b.n	8005c2e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4b15      	ldr	r3, [pc, #84]	@ (8005c40 <xTaskCheckForTimeOut+0xc4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d007      	beq.n	8005c02 <xTaskCheckForTimeOut+0x86>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d302      	bcc.n	8005c02 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	61fb      	str	r3, [r7, #28]
 8005c00:	e015      	b.n	8005c2e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d20b      	bcs.n	8005c24 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	1ad2      	subs	r2, r2, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff ff99 	bl	8005b50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61fb      	str	r3, [r7, #28]
 8005c22:	e004      	b.n	8005c2e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c2e:	f000 fe8d 	bl	800694c <vPortExitCritical>

	return xReturn;
 8005c32:	69fb      	ldr	r3, [r7, #28]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3720      	adds	r7, #32
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	20000fa8 	.word	0x20000fa8
 8005c40:	20000fbc 	.word	0x20000fbc

08005c44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c48:	4b03      	ldr	r3, [pc, #12]	@ (8005c58 <vTaskMissedYield+0x14>)
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
}
 8005c4e:	bf00      	nop
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	20000fb8 	.word	0x20000fb8

08005c5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c64:	f000 f852 	bl	8005d0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c68:	4b06      	ldr	r3, [pc, #24]	@ (8005c84 <prvIdleTask+0x28>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d9f9      	bls.n	8005c64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c70:	4b05      	ldr	r3, [pc, #20]	@ (8005c88 <prvIdleTask+0x2c>)
 8005c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c80:	e7f0      	b.n	8005c64 <prvIdleTask+0x8>
 8005c82:	bf00      	nop
 8005c84:	20000ad4 	.word	0x20000ad4
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c92:	2300      	movs	r3, #0
 8005c94:	607b      	str	r3, [r7, #4]
 8005c96:	e00c      	b.n	8005cb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4a12      	ldr	r2, [pc, #72]	@ (8005cec <prvInitialiseTaskLists+0x60>)
 8005ca4:	4413      	add	r3, r2
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fe fd0c 	bl	80046c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	607b      	str	r3, [r7, #4]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b37      	cmp	r3, #55	@ 0x37
 8005cb6:	d9ef      	bls.n	8005c98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005cb8:	480d      	ldr	r0, [pc, #52]	@ (8005cf0 <prvInitialiseTaskLists+0x64>)
 8005cba:	f7fe fd03 	bl	80046c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005cbe:	480d      	ldr	r0, [pc, #52]	@ (8005cf4 <prvInitialiseTaskLists+0x68>)
 8005cc0:	f7fe fd00 	bl	80046c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cc4:	480c      	ldr	r0, [pc, #48]	@ (8005cf8 <prvInitialiseTaskLists+0x6c>)
 8005cc6:	f7fe fcfd 	bl	80046c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cca:	480c      	ldr	r0, [pc, #48]	@ (8005cfc <prvInitialiseTaskLists+0x70>)
 8005ccc:	f7fe fcfa 	bl	80046c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005cd0:	480b      	ldr	r0, [pc, #44]	@ (8005d00 <prvInitialiseTaskLists+0x74>)
 8005cd2:	f7fe fcf7 	bl	80046c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d04 <prvInitialiseTaskLists+0x78>)
 8005cd8:	4a05      	ldr	r2, [pc, #20]	@ (8005cf0 <prvInitialiseTaskLists+0x64>)
 8005cda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d08 <prvInitialiseTaskLists+0x7c>)
 8005cde:	4a05      	ldr	r2, [pc, #20]	@ (8005cf4 <prvInitialiseTaskLists+0x68>)
 8005ce0:	601a      	str	r2, [r3, #0]
}
 8005ce2:	bf00      	nop
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20000ad4 	.word	0x20000ad4
 8005cf0:	20000f34 	.word	0x20000f34
 8005cf4:	20000f48 	.word	0x20000f48
 8005cf8:	20000f64 	.word	0x20000f64
 8005cfc:	20000f78 	.word	0x20000f78
 8005d00:	20000f90 	.word	0x20000f90
 8005d04:	20000f5c 	.word	0x20000f5c
 8005d08:	20000f60 	.word	0x20000f60

08005d0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d12:	e019      	b.n	8005d48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d14:	f000 fde8 	bl	80068e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d18:	4b10      	ldr	r3, [pc, #64]	@ (8005d5c <prvCheckTasksWaitingTermination+0x50>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3304      	adds	r3, #4
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fe fd57 	bl	80047d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d60 <prvCheckTasksWaitingTermination+0x54>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	4a0b      	ldr	r2, [pc, #44]	@ (8005d60 <prvCheckTasksWaitingTermination+0x54>)
 8005d32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d34:	4b0b      	ldr	r3, [pc, #44]	@ (8005d64 <prvCheckTasksWaitingTermination+0x58>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8005d64 <prvCheckTasksWaitingTermination+0x58>)
 8005d3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d3e:	f000 fe05 	bl	800694c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f810 	bl	8005d68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d48:	4b06      	ldr	r3, [pc, #24]	@ (8005d64 <prvCheckTasksWaitingTermination+0x58>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e1      	bne.n	8005d14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d50:	bf00      	nop
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000f78 	.word	0x20000f78
 8005d60:	20000fa4 	.word	0x20000fa4
 8005d64:	20000f8c 	.word	0x20000f8c

08005d68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d108      	bne.n	8005d8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 ffa2 	bl	8006cc8 <vPortFree>
				vPortFree( pxTCB );
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 ff9f 	bl	8006cc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d8a:	e019      	b.n	8005dc0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d103      	bne.n	8005d9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 ff96 	bl	8006cc8 <vPortFree>
	}
 8005d9c:	e010      	b.n	8005dc0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d00b      	beq.n	8005dc0 <prvDeleteTCB+0x58>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	60fb      	str	r3, [r7, #12]
}
 8005dba:	bf00      	nop
 8005dbc:	bf00      	nop
 8005dbe:	e7fd      	b.n	8005dbc <prvDeleteTCB+0x54>
	}
 8005dc0:	bf00      	nop
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dce:	4b0c      	ldr	r3, [pc, #48]	@ (8005e00 <prvResetNextTaskUnblockTime+0x38>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d104      	bne.n	8005de2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005e04 <prvResetNextTaskUnblockTime+0x3c>)
 8005dda:	f04f 32ff 	mov.w	r2, #4294967295
 8005dde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005de0:	e008      	b.n	8005df4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de2:	4b07      	ldr	r3, [pc, #28]	@ (8005e00 <prvResetNextTaskUnblockTime+0x38>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	4a04      	ldr	r2, [pc, #16]	@ (8005e04 <prvResetNextTaskUnblockTime+0x3c>)
 8005df2:	6013      	str	r3, [r2, #0]
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20000f5c 	.word	0x20000f5c
 8005e04:	20000fc4 	.word	0x20000fc4

08005e08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e3c <xTaskGetSchedulerState+0x34>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d102      	bne.n	8005e1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e16:	2301      	movs	r3, #1
 8005e18:	607b      	str	r3, [r7, #4]
 8005e1a:	e008      	b.n	8005e2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e1c:	4b08      	ldr	r3, [pc, #32]	@ (8005e40 <xTaskGetSchedulerState+0x38>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d102      	bne.n	8005e2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e24:	2302      	movs	r3, #2
 8005e26:	607b      	str	r3, [r7, #4]
 8005e28:	e001      	b.n	8005e2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e2e:	687b      	ldr	r3, [r7, #4]
	}
 8005e30:	4618      	mov	r0, r3
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	20000fb0 	.word	0x20000fb0
 8005e40:	20000fcc 	.word	0x20000fcc

08005e44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e50:	2300      	movs	r3, #0
 8005e52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d058      	beq.n	8005f0c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f18 <xTaskPriorityDisinherit+0xd4>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d00b      	beq.n	8005e7c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	60fb      	str	r3, [r7, #12]
}
 8005e76:	bf00      	nop
 8005e78:	bf00      	nop
 8005e7a:	e7fd      	b.n	8005e78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10b      	bne.n	8005e9c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	60bb      	str	r3, [r7, #8]
}
 8005e96:	bf00      	nop
 8005e98:	bf00      	nop
 8005e9a:	e7fd      	b.n	8005e98 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ea0:	1e5a      	subs	r2, r3, #1
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d02c      	beq.n	8005f0c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d128      	bne.n	8005f0c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fe fc8a 	bl	80047d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005edc:	4b0f      	ldr	r3, [pc, #60]	@ (8005f1c <xTaskPriorityDisinherit+0xd8>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d903      	bls.n	8005eec <xTaskPriorityDisinherit+0xa8>
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee8:	4a0c      	ldr	r2, [pc, #48]	@ (8005f1c <xTaskPriorityDisinherit+0xd8>)
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4a09      	ldr	r2, [pc, #36]	@ (8005f20 <xTaskPriorityDisinherit+0xdc>)
 8005efa:	441a      	add	r2, r3
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	3304      	adds	r3, #4
 8005f00:	4619      	mov	r1, r3
 8005f02:	4610      	mov	r0, r2
 8005f04:	f7fe fc0b 	bl	800471e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f0c:	697b      	ldr	r3, [r7, #20]
	}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20000ad0 	.word	0x20000ad0
 8005f1c:	20000fac 	.word	0x20000fac
 8005f20:	20000ad4 	.word	0x20000ad4

08005f24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f2e:	4b21      	ldr	r3, [pc, #132]	@ (8005fb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f34:	4b20      	ldr	r3, [pc, #128]	@ (8005fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fe fc4c 	bl	80047d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f46:	d10a      	bne.n	8005f5e <prvAddCurrentTaskToDelayedList+0x3a>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8005fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3304      	adds	r3, #4
 8005f54:	4619      	mov	r1, r3
 8005f56:	4819      	ldr	r0, [pc, #100]	@ (8005fbc <prvAddCurrentTaskToDelayedList+0x98>)
 8005f58:	f7fe fbe1 	bl	800471e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f5c:	e026      	b.n	8005fac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4413      	add	r3, r2
 8005f64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f66:	4b14      	ldr	r3, [pc, #80]	@ (8005fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d209      	bcs.n	8005f8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f76:	4b12      	ldr	r3, [pc, #72]	@ (8005fc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	4619      	mov	r1, r3
 8005f82:	4610      	mov	r0, r2
 8005f84:	f7fe fbef 	bl	8004766 <vListInsert>
}
 8005f88:	e010      	b.n	8005fac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f7fe fbe5 	bl	8004766 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d202      	bcs.n	8005fac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005fa6:	4a08      	ldr	r2, [pc, #32]	@ (8005fc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	6013      	str	r3, [r2, #0]
}
 8005fac:	bf00      	nop
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20000fa8 	.word	0x20000fa8
 8005fb8:	20000ad0 	.word	0x20000ad0
 8005fbc:	20000f90 	.word	0x20000f90
 8005fc0:	20000f60 	.word	0x20000f60
 8005fc4:	20000f5c 	.word	0x20000f5c
 8005fc8:	20000fc4 	.word	0x20000fc4

08005fcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	@ 0x28
 8005fd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005fd6:	f000 fb13 	bl	8006600 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005fda:	4b1d      	ldr	r3, [pc, #116]	@ (8006050 <xTimerCreateTimerTask+0x84>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d021      	beq.n	8006026 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005fea:	1d3a      	adds	r2, r7, #4
 8005fec:	f107 0108 	add.w	r1, r7, #8
 8005ff0:	f107 030c 	add.w	r3, r7, #12
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fe fb4b 	bl	8004690 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	9202      	str	r2, [sp, #8]
 8006002:	9301      	str	r3, [sp, #4]
 8006004:	2302      	movs	r3, #2
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	2300      	movs	r3, #0
 800600a:	460a      	mov	r2, r1
 800600c:	4911      	ldr	r1, [pc, #68]	@ (8006054 <xTimerCreateTimerTask+0x88>)
 800600e:	4812      	ldr	r0, [pc, #72]	@ (8006058 <xTimerCreateTimerTask+0x8c>)
 8006010:	f7ff f906 	bl	8005220 <xTaskCreateStatic>
 8006014:	4603      	mov	r3, r0
 8006016:	4a11      	ldr	r2, [pc, #68]	@ (800605c <xTimerCreateTimerTask+0x90>)
 8006018:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800601a:	4b10      	ldr	r3, [pc, #64]	@ (800605c <xTimerCreateTimerTask+0x90>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006022:	2301      	movs	r3, #1
 8006024:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10b      	bne.n	8006044 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	613b      	str	r3, [r7, #16]
}
 800603e:	bf00      	nop
 8006040:	bf00      	nop
 8006042:	e7fd      	b.n	8006040 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006044:	697b      	ldr	r3, [r7, #20]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	20001000 	.word	0x20001000
 8006054:	08009bf8 	.word	0x08009bf8
 8006058:	08006199 	.word	0x08006199
 800605c:	20001004 	.word	0x20001004

08006060 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b08a      	sub	sp, #40	@ 0x28
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800606e:	2300      	movs	r3, #0
 8006070:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10b      	bne.n	8006090 <xTimerGenericCommand+0x30>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	623b      	str	r3, [r7, #32]
}
 800608a:	bf00      	nop
 800608c:	bf00      	nop
 800608e:	e7fd      	b.n	800608c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006090:	4b19      	ldr	r3, [pc, #100]	@ (80060f8 <xTimerGenericCommand+0x98>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d02a      	beq.n	80060ee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b05      	cmp	r3, #5
 80060a8:	dc18      	bgt.n	80060dc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80060aa:	f7ff fead 	bl	8005e08 <xTaskGetSchedulerState>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d109      	bne.n	80060c8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80060b4:	4b10      	ldr	r3, [pc, #64]	@ (80060f8 <xTimerGenericCommand+0x98>)
 80060b6:	6818      	ldr	r0, [r3, #0]
 80060b8:	f107 0110 	add.w	r1, r7, #16
 80060bc:	2300      	movs	r3, #0
 80060be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060c0:	f7fe fcbe 	bl	8004a40 <xQueueGenericSend>
 80060c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80060c6:	e012      	b.n	80060ee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060c8:	4b0b      	ldr	r3, [pc, #44]	@ (80060f8 <xTimerGenericCommand+0x98>)
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	f107 0110 	add.w	r1, r7, #16
 80060d0:	2300      	movs	r3, #0
 80060d2:	2200      	movs	r2, #0
 80060d4:	f7fe fcb4 	bl	8004a40 <xQueueGenericSend>
 80060d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80060da:	e008      	b.n	80060ee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80060dc:	4b06      	ldr	r3, [pc, #24]	@ (80060f8 <xTimerGenericCommand+0x98>)
 80060de:	6818      	ldr	r0, [r3, #0]
 80060e0:	f107 0110 	add.w	r1, r7, #16
 80060e4:	2300      	movs	r3, #0
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	f7fe fdac 	bl	8004c44 <xQueueGenericSendFromISR>
 80060ec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3728      	adds	r7, #40	@ 0x28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	20001000 	.word	0x20001000

080060fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af02      	add	r7, sp, #8
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006106:	4b23      	ldr	r3, [pc, #140]	@ (8006194 <prvProcessExpiredTimer+0x98>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	3304      	adds	r3, #4
 8006114:	4618      	mov	r0, r3
 8006116:	f7fe fb5f 	bl	80047d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	d023      	beq.n	8006170 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	699a      	ldr	r2, [r3, #24]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	18d1      	adds	r1, r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	6978      	ldr	r0, [r7, #20]
 8006136:	f000 f8d5 	bl	80062e4 <prvInsertTimerInActiveList>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d020      	beq.n	8006182 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006140:	2300      	movs	r3, #0
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	2100      	movs	r1, #0
 800614a:	6978      	ldr	r0, [r7, #20]
 800614c:	f7ff ff88 	bl	8006060 <xTimerGenericCommand>
 8006150:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d114      	bne.n	8006182 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	60fb      	str	r3, [r7, #12]
}
 800616a:	bf00      	nop
 800616c:	bf00      	nop
 800616e:	e7fd      	b.n	800616c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006176:	f023 0301 	bic.w	r3, r3, #1
 800617a:	b2da      	uxtb	r2, r3
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	6978      	ldr	r0, [r7, #20]
 8006188:	4798      	blx	r3
}
 800618a:	bf00      	nop
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000ff8 	.word	0x20000ff8

08006198 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061a0:	f107 0308 	add.w	r3, r7, #8
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 f859 	bl	800625c <prvGetNextExpireTime>
 80061aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	4619      	mov	r1, r3
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 f805 	bl	80061c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80061b6:	f000 f8d7 	bl	8006368 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061ba:	bf00      	nop
 80061bc:	e7f0      	b.n	80061a0 <prvTimerTask+0x8>
	...

080061c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80061ca:	f7ff fa37 	bl	800563c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061ce:	f107 0308 	add.w	r3, r7, #8
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 f866 	bl	80062a4 <prvSampleTimeNow>
 80061d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d130      	bne.n	8006242 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10a      	bne.n	80061fc <prvProcessTimerOrBlockTask+0x3c>
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d806      	bhi.n	80061fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80061ee:	f7ff fa33 	bl	8005658 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80061f2:	68f9      	ldr	r1, [r7, #12]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff ff81 	bl	80060fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80061fa:	e024      	b.n	8006246 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d008      	beq.n	8006214 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006202:	4b13      	ldr	r3, [pc, #76]	@ (8006250 <prvProcessTimerOrBlockTask+0x90>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <prvProcessTimerOrBlockTask+0x50>
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <prvProcessTimerOrBlockTask+0x52>
 8006210:	2300      	movs	r3, #0
 8006212:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006214:	4b0f      	ldr	r3, [pc, #60]	@ (8006254 <prvProcessTimerOrBlockTask+0x94>)
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	4619      	mov	r1, r3
 8006222:	f7fe ffc9 	bl	80051b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006226:	f7ff fa17 	bl	8005658 <xTaskResumeAll>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10a      	bne.n	8006246 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006230:	4b09      	ldr	r3, [pc, #36]	@ (8006258 <prvProcessTimerOrBlockTask+0x98>)
 8006232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	f3bf 8f6f 	isb	sy
}
 8006240:	e001      	b.n	8006246 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006242:	f7ff fa09 	bl	8005658 <xTaskResumeAll>
}
 8006246:	bf00      	nop
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000ffc 	.word	0x20000ffc
 8006254:	20001000 	.word	0x20001000
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006264:	4b0e      	ldr	r3, [pc, #56]	@ (80062a0 <prvGetNextExpireTime+0x44>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <prvGetNextExpireTime+0x16>
 800626e:	2201      	movs	r2, #1
 8006270:	e000      	b.n	8006274 <prvGetNextExpireTime+0x18>
 8006272:	2200      	movs	r2, #0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d105      	bne.n	800628c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006280:	4b07      	ldr	r3, [pc, #28]	@ (80062a0 <prvGetNextExpireTime+0x44>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	e001      	b.n	8006290 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006290:	68fb      	ldr	r3, [r7, #12]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20000ff8 	.word	0x20000ff8

080062a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80062ac:	f7ff fa72 	bl	8005794 <xTaskGetTickCount>
 80062b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80062b2:	4b0b      	ldr	r3, [pc, #44]	@ (80062e0 <prvSampleTimeNow+0x3c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d205      	bcs.n	80062c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80062bc:	f000 f93a 	bl	8006534 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	e002      	b.n	80062ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80062ce:	4a04      	ldr	r2, [pc, #16]	@ (80062e0 <prvSampleTimeNow+0x3c>)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80062d4:	68fb      	ldr	r3, [r7, #12]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20001008 	.word	0x20001008

080062e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80062f2:	2300      	movs	r3, #0
 80062f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	429a      	cmp	r2, r3
 8006308:	d812      	bhi.n	8006330 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	1ad2      	subs	r2, r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	429a      	cmp	r2, r3
 8006316:	d302      	bcc.n	800631e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006318:	2301      	movs	r3, #1
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	e01b      	b.n	8006356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800631e:	4b10      	ldr	r3, [pc, #64]	@ (8006360 <prvInsertTimerInActiveList+0x7c>)
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3304      	adds	r3, #4
 8006326:	4619      	mov	r1, r3
 8006328:	4610      	mov	r0, r2
 800632a:	f7fe fa1c 	bl	8004766 <vListInsert>
 800632e:	e012      	b.n	8006356 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d206      	bcs.n	8006346 <prvInsertTimerInActiveList+0x62>
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d302      	bcc.n	8006346 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006340:	2301      	movs	r3, #1
 8006342:	617b      	str	r3, [r7, #20]
 8006344:	e007      	b.n	8006356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006346:	4b07      	ldr	r3, [pc, #28]	@ (8006364 <prvInsertTimerInActiveList+0x80>)
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3304      	adds	r3, #4
 800634e:	4619      	mov	r1, r3
 8006350:	4610      	mov	r0, r2
 8006352:	f7fe fa08 	bl	8004766 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006356:	697b      	ldr	r3, [r7, #20]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20000ffc 	.word	0x20000ffc
 8006364:	20000ff8 	.word	0x20000ff8

08006368 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08e      	sub	sp, #56	@ 0x38
 800636c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800636e:	e0ce      	b.n	800650e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	da19      	bge.n	80063aa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006376:	1d3b      	adds	r3, r7, #4
 8006378:	3304      	adds	r3, #4
 800637a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800637c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10b      	bne.n	800639a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	61fb      	str	r3, [r7, #28]
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop
 8006398:	e7fd      	b.n	8006396 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800639a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063a0:	6850      	ldr	r0, [r2, #4]
 80063a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063a4:	6892      	ldr	r2, [r2, #8]
 80063a6:	4611      	mov	r1, r2
 80063a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f2c0 80ae 	blt.w	800650e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c0:	3304      	adds	r3, #4
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fe fa08 	bl	80047d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063c8:	463b      	mov	r3, r7
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff ff6a 	bl	80062a4 <prvSampleTimeNow>
 80063d0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b09      	cmp	r3, #9
 80063d6:	f200 8097 	bhi.w	8006508 <prvProcessReceivedCommands+0x1a0>
 80063da:	a201      	add	r2, pc, #4	@ (adr r2, 80063e0 <prvProcessReceivedCommands+0x78>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	08006409 	.word	0x08006409
 80063e4:	08006409 	.word	0x08006409
 80063e8:	08006409 	.word	0x08006409
 80063ec:	0800647f 	.word	0x0800647f
 80063f0:	08006493 	.word	0x08006493
 80063f4:	080064df 	.word	0x080064df
 80063f8:	08006409 	.word	0x08006409
 80063fc:	08006409 	.word	0x08006409
 8006400:	0800647f 	.word	0x0800647f
 8006404:	08006493 	.word	0x08006493
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800640e:	f043 0301 	orr.w	r3, r3, #1
 8006412:	b2da      	uxtb	r2, r3
 8006414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006416:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	18d1      	adds	r1, r2, r3
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006426:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006428:	f7ff ff5c 	bl	80062e4 <prvInsertTimerInActiveList>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d06c      	beq.n	800650c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006438:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800643a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d061      	beq.n	800650c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	441a      	add	r2, r3
 8006450:	2300      	movs	r3, #0
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	2300      	movs	r3, #0
 8006456:	2100      	movs	r1, #0
 8006458:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800645a:	f7ff fe01 	bl	8006060 <xTimerGenericCommand>
 800645e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d152      	bne.n	800650c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	61bb      	str	r3, [r7, #24]
}
 8006478:	bf00      	nop
 800647a:	bf00      	nop
 800647c:	e7fd      	b.n	800647a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800647e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006480:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006484:	f023 0301 	bic.w	r3, r3, #1
 8006488:	b2da      	uxtb	r2, r3
 800648a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006490:	e03d      	b.n	800650e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006494:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006498:	f043 0301 	orr.w	r3, r3, #1
 800649c:	b2da      	uxtb	r2, r3
 800649e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10b      	bne.n	80064ca <prvProcessReceivedCommands+0x162>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	617b      	str	r3, [r7, #20]
}
 80064c4:	bf00      	nop
 80064c6:	bf00      	nop
 80064c8:	e7fd      	b.n	80064c6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	18d1      	adds	r1, r2, r3
 80064d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064d8:	f7ff ff04 	bl	80062e4 <prvInsertTimerInActiveList>
					break;
 80064dc:	e017      	b.n	800650e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80064de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d103      	bne.n	80064f4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80064ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064ee:	f000 fbeb 	bl	8006cc8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80064f2:	e00c      	b.n	800650e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064fa:	f023 0301 	bic.w	r3, r3, #1
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006502:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006506:	e002      	b.n	800650e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006508:	bf00      	nop
 800650a:	e000      	b.n	800650e <prvProcessReceivedCommands+0x1a6>
					break;
 800650c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800650e:	4b08      	ldr	r3, [pc, #32]	@ (8006530 <prvProcessReceivedCommands+0x1c8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	1d39      	adds	r1, r7, #4
 8006514:	2200      	movs	r2, #0
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe fc32 	bl	8004d80 <xQueueReceive>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	f47f af26 	bne.w	8006370 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	3730      	adds	r7, #48	@ 0x30
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20001000 	.word	0x20001000

08006534 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800653a:	e049      	b.n	80065d0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800653c:	4b2e      	ldr	r3, [pc, #184]	@ (80065f8 <prvSwitchTimerLists+0xc4>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006546:	4b2c      	ldr	r3, [pc, #176]	@ (80065f8 <prvSwitchTimerLists+0xc4>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3304      	adds	r3, #4
 8006554:	4618      	mov	r0, r3
 8006556:	f7fe f93f 	bl	80047d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	2b00      	cmp	r3, #0
 800656e:	d02f      	beq.n	80065d0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4413      	add	r3, r2
 8006578:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	429a      	cmp	r2, r3
 8006580:	d90e      	bls.n	80065a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800658e:	4b1a      	ldr	r3, [pc, #104]	@ (80065f8 <prvSwitchTimerLists+0xc4>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3304      	adds	r3, #4
 8006596:	4619      	mov	r1, r3
 8006598:	4610      	mov	r0, r2
 800659a:	f7fe f8e4 	bl	8004766 <vListInsert>
 800659e:	e017      	b.n	80065d0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065a0:	2300      	movs	r3, #0
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	2300      	movs	r3, #0
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	2100      	movs	r1, #0
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7ff fd58 	bl	8006060 <xTimerGenericCommand>
 80065b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10b      	bne.n	80065d0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80065b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	603b      	str	r3, [r7, #0]
}
 80065ca:	bf00      	nop
 80065cc:	bf00      	nop
 80065ce:	e7fd      	b.n	80065cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065d0:	4b09      	ldr	r3, [pc, #36]	@ (80065f8 <prvSwitchTimerLists+0xc4>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1b0      	bne.n	800653c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065da:	4b07      	ldr	r3, [pc, #28]	@ (80065f8 <prvSwitchTimerLists+0xc4>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065e0:	4b06      	ldr	r3, [pc, #24]	@ (80065fc <prvSwitchTimerLists+0xc8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a04      	ldr	r2, [pc, #16]	@ (80065f8 <prvSwitchTimerLists+0xc4>)
 80065e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065e8:	4a04      	ldr	r2, [pc, #16]	@ (80065fc <prvSwitchTimerLists+0xc8>)
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	6013      	str	r3, [r2, #0]
}
 80065ee:	bf00      	nop
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000ff8 	.word	0x20000ff8
 80065fc:	20000ffc 	.word	0x20000ffc

08006600 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006606:	f000 f96f 	bl	80068e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800660a:	4b15      	ldr	r3, [pc, #84]	@ (8006660 <prvCheckForValidListAndQueue+0x60>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d120      	bne.n	8006654 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006612:	4814      	ldr	r0, [pc, #80]	@ (8006664 <prvCheckForValidListAndQueue+0x64>)
 8006614:	f7fe f856 	bl	80046c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006618:	4813      	ldr	r0, [pc, #76]	@ (8006668 <prvCheckForValidListAndQueue+0x68>)
 800661a:	f7fe f853 	bl	80046c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800661e:	4b13      	ldr	r3, [pc, #76]	@ (800666c <prvCheckForValidListAndQueue+0x6c>)
 8006620:	4a10      	ldr	r2, [pc, #64]	@ (8006664 <prvCheckForValidListAndQueue+0x64>)
 8006622:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006624:	4b12      	ldr	r3, [pc, #72]	@ (8006670 <prvCheckForValidListAndQueue+0x70>)
 8006626:	4a10      	ldr	r2, [pc, #64]	@ (8006668 <prvCheckForValidListAndQueue+0x68>)
 8006628:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800662a:	2300      	movs	r3, #0
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	4b11      	ldr	r3, [pc, #68]	@ (8006674 <prvCheckForValidListAndQueue+0x74>)
 8006630:	4a11      	ldr	r2, [pc, #68]	@ (8006678 <prvCheckForValidListAndQueue+0x78>)
 8006632:	2110      	movs	r1, #16
 8006634:	200a      	movs	r0, #10
 8006636:	f7fe f963 	bl	8004900 <xQueueGenericCreateStatic>
 800663a:	4603      	mov	r3, r0
 800663c:	4a08      	ldr	r2, [pc, #32]	@ (8006660 <prvCheckForValidListAndQueue+0x60>)
 800663e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006640:	4b07      	ldr	r3, [pc, #28]	@ (8006660 <prvCheckForValidListAndQueue+0x60>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d005      	beq.n	8006654 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006648:	4b05      	ldr	r3, [pc, #20]	@ (8006660 <prvCheckForValidListAndQueue+0x60>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	490b      	ldr	r1, [pc, #44]	@ (800667c <prvCheckForValidListAndQueue+0x7c>)
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe fd88 	bl	8005164 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006654:	f000 f97a 	bl	800694c <vPortExitCritical>
}
 8006658:	bf00      	nop
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20001000 	.word	0x20001000
 8006664:	20000fd0 	.word	0x20000fd0
 8006668:	20000fe4 	.word	0x20000fe4
 800666c:	20000ff8 	.word	0x20000ff8
 8006670:	20000ffc 	.word	0x20000ffc
 8006674:	200010ac 	.word	0x200010ac
 8006678:	2000100c 	.word	0x2000100c
 800667c:	08009c00 	.word	0x08009c00

08006680 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3b04      	subs	r3, #4
 8006690:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006698:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3b04      	subs	r3, #4
 800669e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f023 0201 	bic.w	r2, r3, #1
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3b04      	subs	r3, #4
 80066ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066b0:	4a0c      	ldr	r2, [pc, #48]	@ (80066e4 <pxPortInitialiseStack+0x64>)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3b14      	subs	r3, #20
 80066ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3b04      	subs	r3, #4
 80066c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f06f 0202 	mvn.w	r2, #2
 80066ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3b20      	subs	r3, #32
 80066d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066d6:	68fb      	ldr	r3, [r7, #12]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	080066e9 	.word	0x080066e9

080066e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066f2:	4b13      	ldr	r3, [pc, #76]	@ (8006740 <prvTaskExitError+0x58>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fa:	d00b      	beq.n	8006714 <prvTaskExitError+0x2c>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	60fb      	str	r3, [r7, #12]
}
 800670e:	bf00      	nop
 8006710:	bf00      	nop
 8006712:	e7fd      	b.n	8006710 <prvTaskExitError+0x28>
	__asm volatile
 8006714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	60bb      	str	r3, [r7, #8]
}
 8006726:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006728:	bf00      	nop
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0fc      	beq.n	800672a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006730:	bf00      	nop
 8006732:	bf00      	nop
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	2000000c 	.word	0x2000000c
	...

08006750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006750:	4b07      	ldr	r3, [pc, #28]	@ (8006770 <pxCurrentTCBConst2>)
 8006752:	6819      	ldr	r1, [r3, #0]
 8006754:	6808      	ldr	r0, [r1, #0]
 8006756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675a:	f380 8809 	msr	PSP, r0
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f04f 0000 	mov.w	r0, #0
 8006766:	f380 8811 	msr	BASEPRI, r0
 800676a:	4770      	bx	lr
 800676c:	f3af 8000 	nop.w

08006770 <pxCurrentTCBConst2>:
 8006770:	20000ad0 	.word	0x20000ad0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop

08006778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006778:	4808      	ldr	r0, [pc, #32]	@ (800679c <prvPortStartFirstTask+0x24>)
 800677a:	6800      	ldr	r0, [r0, #0]
 800677c:	6800      	ldr	r0, [r0, #0]
 800677e:	f380 8808 	msr	MSP, r0
 8006782:	f04f 0000 	mov.w	r0, #0
 8006786:	f380 8814 	msr	CONTROL, r0
 800678a:	b662      	cpsie	i
 800678c:	b661      	cpsie	f
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	df00      	svc	0
 8006798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800679a:	bf00      	nop
 800679c:	e000ed08 	.word	0xe000ed08

080067a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067a6:	4b47      	ldr	r3, [pc, #284]	@ (80068c4 <xPortStartScheduler+0x124>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a47      	ldr	r2, [pc, #284]	@ (80068c8 <xPortStartScheduler+0x128>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d10b      	bne.n	80067c8 <xPortStartScheduler+0x28>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	60fb      	str	r3, [r7, #12]
}
 80067c2:	bf00      	nop
 80067c4:	bf00      	nop
 80067c6:	e7fd      	b.n	80067c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067c8:	4b3e      	ldr	r3, [pc, #248]	@ (80068c4 <xPortStartScheduler+0x124>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a3f      	ldr	r2, [pc, #252]	@ (80068cc <xPortStartScheduler+0x12c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d10b      	bne.n	80067ea <xPortStartScheduler+0x4a>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	613b      	str	r3, [r7, #16]
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	e7fd      	b.n	80067e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067ea:	4b39      	ldr	r3, [pc, #228]	@ (80068d0 <xPortStartScheduler+0x130>)
 80067ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	22ff      	movs	r2, #255	@ 0xff
 80067fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	b2db      	uxtb	r3, r3
 8006802:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	b2db      	uxtb	r3, r3
 8006808:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800680c:	b2da      	uxtb	r2, r3
 800680e:	4b31      	ldr	r3, [pc, #196]	@ (80068d4 <xPortStartScheduler+0x134>)
 8006810:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006812:	4b31      	ldr	r3, [pc, #196]	@ (80068d8 <xPortStartScheduler+0x138>)
 8006814:	2207      	movs	r2, #7
 8006816:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006818:	e009      	b.n	800682e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800681a:	4b2f      	ldr	r3, [pc, #188]	@ (80068d8 <xPortStartScheduler+0x138>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3b01      	subs	r3, #1
 8006820:	4a2d      	ldr	r2, [pc, #180]	@ (80068d8 <xPortStartScheduler+0x138>)
 8006822:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006824:	78fb      	ldrb	r3, [r7, #3]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	b2db      	uxtb	r3, r3
 800682c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800682e:	78fb      	ldrb	r3, [r7, #3]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006836:	2b80      	cmp	r3, #128	@ 0x80
 8006838:	d0ef      	beq.n	800681a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800683a:	4b27      	ldr	r3, [pc, #156]	@ (80068d8 <xPortStartScheduler+0x138>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f1c3 0307 	rsb	r3, r3, #7
 8006842:	2b04      	cmp	r3, #4
 8006844:	d00b      	beq.n	800685e <xPortStartScheduler+0xbe>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	60bb      	str	r3, [r7, #8]
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	e7fd      	b.n	800685a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800685e:	4b1e      	ldr	r3, [pc, #120]	@ (80068d8 <xPortStartScheduler+0x138>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	4a1c      	ldr	r2, [pc, #112]	@ (80068d8 <xPortStartScheduler+0x138>)
 8006866:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006868:	4b1b      	ldr	r3, [pc, #108]	@ (80068d8 <xPortStartScheduler+0x138>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006870:	4a19      	ldr	r2, [pc, #100]	@ (80068d8 <xPortStartScheduler+0x138>)
 8006872:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	b2da      	uxtb	r2, r3
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800687c:	4b17      	ldr	r3, [pc, #92]	@ (80068dc <xPortStartScheduler+0x13c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a16      	ldr	r2, [pc, #88]	@ (80068dc <xPortStartScheduler+0x13c>)
 8006882:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006886:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006888:	4b14      	ldr	r3, [pc, #80]	@ (80068dc <xPortStartScheduler+0x13c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a13      	ldr	r2, [pc, #76]	@ (80068dc <xPortStartScheduler+0x13c>)
 800688e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006892:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006894:	f000 f8da 	bl	8006a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006898:	4b11      	ldr	r3, [pc, #68]	@ (80068e0 <xPortStartScheduler+0x140>)
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800689e:	f000 f8f9 	bl	8006a94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068a2:	4b10      	ldr	r3, [pc, #64]	@ (80068e4 <xPortStartScheduler+0x144>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a0f      	ldr	r2, [pc, #60]	@ (80068e4 <xPortStartScheduler+0x144>)
 80068a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80068ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068ae:	f7ff ff63 	bl	8006778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068b2:	f7ff f839 	bl	8005928 <vTaskSwitchContext>
	prvTaskExitError();
 80068b6:	f7ff ff17 	bl	80066e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	e000ed00 	.word	0xe000ed00
 80068c8:	410fc271 	.word	0x410fc271
 80068cc:	410fc270 	.word	0x410fc270
 80068d0:	e000e400 	.word	0xe000e400
 80068d4:	200010fc 	.word	0x200010fc
 80068d8:	20001100 	.word	0x20001100
 80068dc:	e000ed20 	.word	0xe000ed20
 80068e0:	2000000c 	.word	0x2000000c
 80068e4:	e000ef34 	.word	0xe000ef34

080068e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
	__asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	607b      	str	r3, [r7, #4]
}
 8006900:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006902:	4b10      	ldr	r3, [pc, #64]	@ (8006944 <vPortEnterCritical+0x5c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3301      	adds	r3, #1
 8006908:	4a0e      	ldr	r2, [pc, #56]	@ (8006944 <vPortEnterCritical+0x5c>)
 800690a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800690c:	4b0d      	ldr	r3, [pc, #52]	@ (8006944 <vPortEnterCritical+0x5c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d110      	bne.n	8006936 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006914:	4b0c      	ldr	r3, [pc, #48]	@ (8006948 <vPortEnterCritical+0x60>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00b      	beq.n	8006936 <vPortEnterCritical+0x4e>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	603b      	str	r3, [r7, #0]
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	e7fd      	b.n	8006932 <vPortEnterCritical+0x4a>
	}
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	2000000c 	.word	0x2000000c
 8006948:	e000ed04 	.word	0xe000ed04

0800694c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006952:	4b12      	ldr	r3, [pc, #72]	@ (800699c <vPortExitCritical+0x50>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10b      	bne.n	8006972 <vPortExitCritical+0x26>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	607b      	str	r3, [r7, #4]
}
 800696c:	bf00      	nop
 800696e:	bf00      	nop
 8006970:	e7fd      	b.n	800696e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006972:	4b0a      	ldr	r3, [pc, #40]	@ (800699c <vPortExitCritical+0x50>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3b01      	subs	r3, #1
 8006978:	4a08      	ldr	r2, [pc, #32]	@ (800699c <vPortExitCritical+0x50>)
 800697a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800697c:	4b07      	ldr	r3, [pc, #28]	@ (800699c <vPortExitCritical+0x50>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d105      	bne.n	8006990 <vPortExitCritical+0x44>
 8006984:	2300      	movs	r3, #0
 8006986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	f383 8811 	msr	BASEPRI, r3
}
 800698e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	2000000c 	.word	0x2000000c

080069a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069a0:	f3ef 8009 	mrs	r0, PSP
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	4b15      	ldr	r3, [pc, #84]	@ (8006a00 <pxCurrentTCBConst>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	f01e 0f10 	tst.w	lr, #16
 80069b0:	bf08      	it	eq
 80069b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ba:	6010      	str	r0, [r2, #0]
 80069bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80069c4:	f380 8811 	msr	BASEPRI, r0
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f7fe ffaa 	bl	8005928 <vTaskSwitchContext>
 80069d4:	f04f 0000 	mov.w	r0, #0
 80069d8:	f380 8811 	msr	BASEPRI, r0
 80069dc:	bc09      	pop	{r0, r3}
 80069de:	6819      	ldr	r1, [r3, #0]
 80069e0:	6808      	ldr	r0, [r1, #0]
 80069e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e6:	f01e 0f10 	tst.w	lr, #16
 80069ea:	bf08      	it	eq
 80069ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069f0:	f380 8809 	msr	PSP, r0
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	f3af 8000 	nop.w

08006a00 <pxCurrentTCBConst>:
 8006a00:	20000ad0 	.word	0x20000ad0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop

08006a08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	607b      	str	r3, [r7, #4]
}
 8006a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a22:	f7fe fec7 	bl	80057b4 <xTaskIncrementTick>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a2c:	4b06      	ldr	r3, [pc, #24]	@ (8006a48 <xPortSysTickHandler+0x40>)
 8006a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	2300      	movs	r3, #0
 8006a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f383 8811 	msr	BASEPRI, r3
}
 8006a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a40:	bf00      	nop
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	e000ed04 	.word	0xe000ed04

08006a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a50:	4b0b      	ldr	r3, [pc, #44]	@ (8006a80 <vPortSetupTimerInterrupt+0x34>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a56:	4b0b      	ldr	r3, [pc, #44]	@ (8006a84 <vPortSetupTimerInterrupt+0x38>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a88 <vPortSetupTimerInterrupt+0x3c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a0a      	ldr	r2, [pc, #40]	@ (8006a8c <vPortSetupTimerInterrupt+0x40>)
 8006a62:	fba2 2303 	umull	r2, r3, r2, r3
 8006a66:	099b      	lsrs	r3, r3, #6
 8006a68:	4a09      	ldr	r2, [pc, #36]	@ (8006a90 <vPortSetupTimerInterrupt+0x44>)
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a6e:	4b04      	ldr	r3, [pc, #16]	@ (8006a80 <vPortSetupTimerInterrupt+0x34>)
 8006a70:	2207      	movs	r2, #7
 8006a72:	601a      	str	r2, [r3, #0]
}
 8006a74:	bf00      	nop
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	e000e010 	.word	0xe000e010
 8006a84:	e000e018 	.word	0xe000e018
 8006a88:	20000000 	.word	0x20000000
 8006a8c:	10624dd3 	.word	0x10624dd3
 8006a90:	e000e014 	.word	0xe000e014

08006a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006aa4 <vPortEnableVFP+0x10>
 8006a98:	6801      	ldr	r1, [r0, #0]
 8006a9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006a9e:	6001      	str	r1, [r0, #0]
 8006aa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006aa2:	bf00      	nop
 8006aa4:	e000ed88 	.word	0xe000ed88

08006aa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006aae:	f3ef 8305 	mrs	r3, IPSR
 8006ab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b0f      	cmp	r3, #15
 8006ab8:	d915      	bls.n	8006ae6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006aba:	4a18      	ldr	r2, [pc, #96]	@ (8006b1c <vPortValidateInterruptPriority+0x74>)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ac4:	4b16      	ldr	r3, [pc, #88]	@ (8006b20 <vPortValidateInterruptPriority+0x78>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	7afa      	ldrb	r2, [r7, #11]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d20b      	bcs.n	8006ae6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	607b      	str	r3, [r7, #4]
}
 8006ae0:	bf00      	nop
 8006ae2:	bf00      	nop
 8006ae4:	e7fd      	b.n	8006ae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8006b24 <vPortValidateInterruptPriority+0x7c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006aee:	4b0e      	ldr	r3, [pc, #56]	@ (8006b28 <vPortValidateInterruptPriority+0x80>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d90b      	bls.n	8006b0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	603b      	str	r3, [r7, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	bf00      	nop
 8006b0c:	e7fd      	b.n	8006b0a <vPortValidateInterruptPriority+0x62>
	}
 8006b0e:	bf00      	nop
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	e000e3f0 	.word	0xe000e3f0
 8006b20:	200010fc 	.word	0x200010fc
 8006b24:	e000ed0c 	.word	0xe000ed0c
 8006b28:	20001100 	.word	0x20001100

08006b2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08a      	sub	sp, #40	@ 0x28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b34:	2300      	movs	r3, #0
 8006b36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b38:	f7fe fd80 	bl	800563c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b3c:	4b5c      	ldr	r3, [pc, #368]	@ (8006cb0 <pvPortMalloc+0x184>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b44:	f000 f924 	bl	8006d90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b48:	4b5a      	ldr	r3, [pc, #360]	@ (8006cb4 <pvPortMalloc+0x188>)
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f040 8095 	bne.w	8006c80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01e      	beq.n	8006b9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006b5c:	2208      	movs	r2, #8
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4413      	add	r3, r2
 8006b62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d015      	beq.n	8006b9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f023 0307 	bic.w	r3, r3, #7
 8006b74:	3308      	adds	r3, #8
 8006b76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f003 0307 	and.w	r3, r3, #7
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <pvPortMalloc+0x6e>
	__asm volatile
 8006b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	617b      	str	r3, [r7, #20]
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop
 8006b98:	e7fd      	b.n	8006b96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d06f      	beq.n	8006c80 <pvPortMalloc+0x154>
 8006ba0:	4b45      	ldr	r3, [pc, #276]	@ (8006cb8 <pvPortMalloc+0x18c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d86a      	bhi.n	8006c80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006baa:	4b44      	ldr	r3, [pc, #272]	@ (8006cbc <pvPortMalloc+0x190>)
 8006bac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006bae:	4b43      	ldr	r3, [pc, #268]	@ (8006cbc <pvPortMalloc+0x190>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bb4:	e004      	b.n	8006bc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d903      	bls.n	8006bd2 <pvPortMalloc+0xa6>
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1f1      	bne.n	8006bb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bd2:	4b37      	ldr	r3, [pc, #220]	@ (8006cb0 <pvPortMalloc+0x184>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d051      	beq.n	8006c80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2208      	movs	r2, #8
 8006be2:	4413      	add	r3, r2
 8006be4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	1ad2      	subs	r2, r2, r3
 8006bf6:	2308      	movs	r3, #8
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d920      	bls.n	8006c40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4413      	add	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	f003 0307 	and.w	r3, r3, #7
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00b      	beq.n	8006c28 <pvPortMalloc+0xfc>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	613b      	str	r3, [r7, #16]
}
 8006c22:	bf00      	nop
 8006c24:	bf00      	nop
 8006c26:	e7fd      	b.n	8006c24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	1ad2      	subs	r2, r2, r3
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c3a:	69b8      	ldr	r0, [r7, #24]
 8006c3c:	f000 f90a 	bl	8006e54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c40:	4b1d      	ldr	r3, [pc, #116]	@ (8006cb8 <pvPortMalloc+0x18c>)
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006cb8 <pvPortMalloc+0x18c>)
 8006c4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006cb8 <pvPortMalloc+0x18c>)
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc0 <pvPortMalloc+0x194>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d203      	bcs.n	8006c62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c5a:	4b17      	ldr	r3, [pc, #92]	@ (8006cb8 <pvPortMalloc+0x18c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a18      	ldr	r2, [pc, #96]	@ (8006cc0 <pvPortMalloc+0x194>)
 8006c60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	4b13      	ldr	r3, [pc, #76]	@ (8006cb4 <pvPortMalloc+0x188>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c76:	4b13      	ldr	r3, [pc, #76]	@ (8006cc4 <pvPortMalloc+0x198>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	4a11      	ldr	r2, [pc, #68]	@ (8006cc4 <pvPortMalloc+0x198>)
 8006c7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c80:	f7fe fcea 	bl	8005658 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00b      	beq.n	8006ca6 <pvPortMalloc+0x17a>
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	60fb      	str	r3, [r7, #12]
}
 8006ca0:	bf00      	nop
 8006ca2:	bf00      	nop
 8006ca4:	e7fd      	b.n	8006ca2 <pvPortMalloc+0x176>
	return pvReturn;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3728      	adds	r7, #40	@ 0x28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20004d0c 	.word	0x20004d0c
 8006cb4:	20004d20 	.word	0x20004d20
 8006cb8:	20004d10 	.word	0x20004d10
 8006cbc:	20004d04 	.word	0x20004d04
 8006cc0:	20004d14 	.word	0x20004d14
 8006cc4:	20004d18 	.word	0x20004d18

08006cc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d04f      	beq.n	8006d7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cda:	2308      	movs	r3, #8
 8006cdc:	425b      	negs	r3, r3
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	4b25      	ldr	r3, [pc, #148]	@ (8006d84 <vPortFree+0xbc>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10b      	bne.n	8006d0e <vPortFree+0x46>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	60fb      	str	r3, [r7, #12]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00b      	beq.n	8006d2e <vPortFree+0x66>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	60bb      	str	r3, [r7, #8]
}
 8006d28:	bf00      	nop
 8006d2a:	bf00      	nop
 8006d2c:	e7fd      	b.n	8006d2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	4b14      	ldr	r3, [pc, #80]	@ (8006d84 <vPortFree+0xbc>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4013      	ands	r3, r2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01e      	beq.n	8006d7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d11a      	bne.n	8006d7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	4b0e      	ldr	r3, [pc, #56]	@ (8006d84 <vPortFree+0xbc>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	43db      	mvns	r3, r3
 8006d4e:	401a      	ands	r2, r3
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d54:	f7fe fc72 	bl	800563c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d88 <vPortFree+0xc0>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4413      	add	r3, r2
 8006d62:	4a09      	ldr	r2, [pc, #36]	@ (8006d88 <vPortFree+0xc0>)
 8006d64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d66:	6938      	ldr	r0, [r7, #16]
 8006d68:	f000 f874 	bl	8006e54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d6c:	4b07      	ldr	r3, [pc, #28]	@ (8006d8c <vPortFree+0xc4>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3301      	adds	r3, #1
 8006d72:	4a06      	ldr	r2, [pc, #24]	@ (8006d8c <vPortFree+0xc4>)
 8006d74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d76:	f7fe fc6f 	bl	8005658 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d7a:	bf00      	nop
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20004d20 	.word	0x20004d20
 8006d88:	20004d10 	.word	0x20004d10
 8006d8c:	20004d1c 	.word	0x20004d1c

08006d90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006d9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d9c:	4b27      	ldr	r3, [pc, #156]	@ (8006e3c <prvHeapInit+0xac>)
 8006d9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00c      	beq.n	8006dc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	3307      	adds	r3, #7
 8006dae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0307 	bic.w	r3, r3, #7
 8006db6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8006e3c <prvHeapInit+0xac>)
 8006dc0:	4413      	add	r3, r2
 8006dc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e40 <prvHeapInit+0xb0>)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006dce:	4b1c      	ldr	r3, [pc, #112]	@ (8006e40 <prvHeapInit+0xb0>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	4413      	add	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ddc:	2208      	movs	r2, #8
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	1a9b      	subs	r3, r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 0307 	bic.w	r3, r3, #7
 8006dea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4a15      	ldr	r2, [pc, #84]	@ (8006e44 <prvHeapInit+0xb4>)
 8006df0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006df2:	4b14      	ldr	r3, [pc, #80]	@ (8006e44 <prvHeapInit+0xb4>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2200      	movs	r2, #0
 8006df8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dfa:	4b12      	ldr	r3, [pc, #72]	@ (8006e44 <prvHeapInit+0xb4>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	1ad2      	subs	r2, r2, r3
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e10:	4b0c      	ldr	r3, [pc, #48]	@ (8006e44 <prvHeapInit+0xb4>)
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8006e48 <prvHeapInit+0xb8>)
 8006e1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	4a09      	ldr	r2, [pc, #36]	@ (8006e4c <prvHeapInit+0xbc>)
 8006e26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e28:	4b09      	ldr	r3, [pc, #36]	@ (8006e50 <prvHeapInit+0xc0>)
 8006e2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006e2e:	601a      	str	r2, [r3, #0]
}
 8006e30:	bf00      	nop
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	20001104 	.word	0x20001104
 8006e40:	20004d04 	.word	0x20004d04
 8006e44:	20004d0c 	.word	0x20004d0c
 8006e48:	20004d14 	.word	0x20004d14
 8006e4c:	20004d10 	.word	0x20004d10
 8006e50:	20004d20 	.word	0x20004d20

08006e54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e5c:	4b28      	ldr	r3, [pc, #160]	@ (8006f00 <prvInsertBlockIntoFreeList+0xac>)
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	e002      	b.n	8006e68 <prvInsertBlockIntoFreeList+0x14>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d8f7      	bhi.n	8006e62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d108      	bne.n	8006e96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	441a      	add	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	441a      	add	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d118      	bne.n	8006edc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	4b15      	ldr	r3, [pc, #84]	@ (8006f04 <prvInsertBlockIntoFreeList+0xb0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d00d      	beq.n	8006ed2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	441a      	add	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	e008      	b.n	8006ee4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f04 <prvInsertBlockIntoFreeList+0xb0>)
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	e003      	b.n	8006ee4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d002      	beq.n	8006ef2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ef2:	bf00      	nop
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20004d04 	.word	0x20004d04
 8006f04:	20004d0c 	.word	0x20004d0c

08006f08 <__cvt>:
 8006f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f0c:	ec57 6b10 	vmov	r6, r7, d0
 8006f10:	2f00      	cmp	r7, #0
 8006f12:	460c      	mov	r4, r1
 8006f14:	4619      	mov	r1, r3
 8006f16:	463b      	mov	r3, r7
 8006f18:	bfbb      	ittet	lt
 8006f1a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006f1e:	461f      	movlt	r7, r3
 8006f20:	2300      	movge	r3, #0
 8006f22:	232d      	movlt	r3, #45	@ 0x2d
 8006f24:	700b      	strb	r3, [r1, #0]
 8006f26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f28:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006f2c:	4691      	mov	r9, r2
 8006f2e:	f023 0820 	bic.w	r8, r3, #32
 8006f32:	bfbc      	itt	lt
 8006f34:	4632      	movlt	r2, r6
 8006f36:	4616      	movlt	r6, r2
 8006f38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f3c:	d005      	beq.n	8006f4a <__cvt+0x42>
 8006f3e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006f42:	d100      	bne.n	8006f46 <__cvt+0x3e>
 8006f44:	3401      	adds	r4, #1
 8006f46:	2102      	movs	r1, #2
 8006f48:	e000      	b.n	8006f4c <__cvt+0x44>
 8006f4a:	2103      	movs	r1, #3
 8006f4c:	ab03      	add	r3, sp, #12
 8006f4e:	9301      	str	r3, [sp, #4]
 8006f50:	ab02      	add	r3, sp, #8
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	ec47 6b10 	vmov	d0, r6, r7
 8006f58:	4653      	mov	r3, sl
 8006f5a:	4622      	mov	r2, r4
 8006f5c:	f000 fe68 	bl	8007c30 <_dtoa_r>
 8006f60:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006f64:	4605      	mov	r5, r0
 8006f66:	d119      	bne.n	8006f9c <__cvt+0x94>
 8006f68:	f019 0f01 	tst.w	r9, #1
 8006f6c:	d00e      	beq.n	8006f8c <__cvt+0x84>
 8006f6e:	eb00 0904 	add.w	r9, r0, r4
 8006f72:	2200      	movs	r2, #0
 8006f74:	2300      	movs	r3, #0
 8006f76:	4630      	mov	r0, r6
 8006f78:	4639      	mov	r1, r7
 8006f7a:	f7f9 fdad 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f7e:	b108      	cbz	r0, 8006f84 <__cvt+0x7c>
 8006f80:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f84:	2230      	movs	r2, #48	@ 0x30
 8006f86:	9b03      	ldr	r3, [sp, #12]
 8006f88:	454b      	cmp	r3, r9
 8006f8a:	d31e      	bcc.n	8006fca <__cvt+0xc2>
 8006f8c:	9b03      	ldr	r3, [sp, #12]
 8006f8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f90:	1b5b      	subs	r3, r3, r5
 8006f92:	4628      	mov	r0, r5
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	b004      	add	sp, #16
 8006f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006fa0:	eb00 0904 	add.w	r9, r0, r4
 8006fa4:	d1e5      	bne.n	8006f72 <__cvt+0x6a>
 8006fa6:	7803      	ldrb	r3, [r0, #0]
 8006fa8:	2b30      	cmp	r3, #48	@ 0x30
 8006faa:	d10a      	bne.n	8006fc2 <__cvt+0xba>
 8006fac:	2200      	movs	r2, #0
 8006fae:	2300      	movs	r3, #0
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	f7f9 fd90 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fb8:	b918      	cbnz	r0, 8006fc2 <__cvt+0xba>
 8006fba:	f1c4 0401 	rsb	r4, r4, #1
 8006fbe:	f8ca 4000 	str.w	r4, [sl]
 8006fc2:	f8da 3000 	ldr.w	r3, [sl]
 8006fc6:	4499      	add	r9, r3
 8006fc8:	e7d3      	b.n	8006f72 <__cvt+0x6a>
 8006fca:	1c59      	adds	r1, r3, #1
 8006fcc:	9103      	str	r1, [sp, #12]
 8006fce:	701a      	strb	r2, [r3, #0]
 8006fd0:	e7d9      	b.n	8006f86 <__cvt+0x7e>

08006fd2 <__exponent>:
 8006fd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fd4:	2900      	cmp	r1, #0
 8006fd6:	bfba      	itte	lt
 8006fd8:	4249      	neglt	r1, r1
 8006fda:	232d      	movlt	r3, #45	@ 0x2d
 8006fdc:	232b      	movge	r3, #43	@ 0x2b
 8006fde:	2909      	cmp	r1, #9
 8006fe0:	7002      	strb	r2, [r0, #0]
 8006fe2:	7043      	strb	r3, [r0, #1]
 8006fe4:	dd29      	ble.n	800703a <__exponent+0x68>
 8006fe6:	f10d 0307 	add.w	r3, sp, #7
 8006fea:	461d      	mov	r5, r3
 8006fec:	270a      	movs	r7, #10
 8006fee:	461a      	mov	r2, r3
 8006ff0:	fbb1 f6f7 	udiv	r6, r1, r7
 8006ff4:	fb07 1416 	mls	r4, r7, r6, r1
 8006ff8:	3430      	adds	r4, #48	@ 0x30
 8006ffa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ffe:	460c      	mov	r4, r1
 8007000:	2c63      	cmp	r4, #99	@ 0x63
 8007002:	f103 33ff 	add.w	r3, r3, #4294967295
 8007006:	4631      	mov	r1, r6
 8007008:	dcf1      	bgt.n	8006fee <__exponent+0x1c>
 800700a:	3130      	adds	r1, #48	@ 0x30
 800700c:	1e94      	subs	r4, r2, #2
 800700e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007012:	1c41      	adds	r1, r0, #1
 8007014:	4623      	mov	r3, r4
 8007016:	42ab      	cmp	r3, r5
 8007018:	d30a      	bcc.n	8007030 <__exponent+0x5e>
 800701a:	f10d 0309 	add.w	r3, sp, #9
 800701e:	1a9b      	subs	r3, r3, r2
 8007020:	42ac      	cmp	r4, r5
 8007022:	bf88      	it	hi
 8007024:	2300      	movhi	r3, #0
 8007026:	3302      	adds	r3, #2
 8007028:	4403      	add	r3, r0
 800702a:	1a18      	subs	r0, r3, r0
 800702c:	b003      	add	sp, #12
 800702e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007030:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007034:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007038:	e7ed      	b.n	8007016 <__exponent+0x44>
 800703a:	2330      	movs	r3, #48	@ 0x30
 800703c:	3130      	adds	r1, #48	@ 0x30
 800703e:	7083      	strb	r3, [r0, #2]
 8007040:	70c1      	strb	r1, [r0, #3]
 8007042:	1d03      	adds	r3, r0, #4
 8007044:	e7f1      	b.n	800702a <__exponent+0x58>
	...

08007048 <_printf_float>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	b08d      	sub	sp, #52	@ 0x34
 800704e:	460c      	mov	r4, r1
 8007050:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007054:	4616      	mov	r6, r2
 8007056:	461f      	mov	r7, r3
 8007058:	4605      	mov	r5, r0
 800705a:	f000 fcdb 	bl	8007a14 <_localeconv_r>
 800705e:	6803      	ldr	r3, [r0, #0]
 8007060:	9304      	str	r3, [sp, #16]
 8007062:	4618      	mov	r0, r3
 8007064:	f7f9 f90c 	bl	8000280 <strlen>
 8007068:	2300      	movs	r3, #0
 800706a:	930a      	str	r3, [sp, #40]	@ 0x28
 800706c:	f8d8 3000 	ldr.w	r3, [r8]
 8007070:	9005      	str	r0, [sp, #20]
 8007072:	3307      	adds	r3, #7
 8007074:	f023 0307 	bic.w	r3, r3, #7
 8007078:	f103 0208 	add.w	r2, r3, #8
 800707c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007080:	f8d4 b000 	ldr.w	fp, [r4]
 8007084:	f8c8 2000 	str.w	r2, [r8]
 8007088:	e9d3 8900 	ldrd	r8, r9, [r3]
 800708c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007090:	9307      	str	r3, [sp, #28]
 8007092:	f8cd 8018 	str.w	r8, [sp, #24]
 8007096:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800709a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800709e:	4b9c      	ldr	r3, [pc, #624]	@ (8007310 <_printf_float+0x2c8>)
 80070a0:	f04f 32ff 	mov.w	r2, #4294967295
 80070a4:	f7f9 fd4a 	bl	8000b3c <__aeabi_dcmpun>
 80070a8:	bb70      	cbnz	r0, 8007108 <_printf_float+0xc0>
 80070aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070ae:	4b98      	ldr	r3, [pc, #608]	@ (8007310 <_printf_float+0x2c8>)
 80070b0:	f04f 32ff 	mov.w	r2, #4294967295
 80070b4:	f7f9 fd24 	bl	8000b00 <__aeabi_dcmple>
 80070b8:	bb30      	cbnz	r0, 8007108 <_printf_float+0xc0>
 80070ba:	2200      	movs	r2, #0
 80070bc:	2300      	movs	r3, #0
 80070be:	4640      	mov	r0, r8
 80070c0:	4649      	mov	r1, r9
 80070c2:	f7f9 fd13 	bl	8000aec <__aeabi_dcmplt>
 80070c6:	b110      	cbz	r0, 80070ce <_printf_float+0x86>
 80070c8:	232d      	movs	r3, #45	@ 0x2d
 80070ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070ce:	4a91      	ldr	r2, [pc, #580]	@ (8007314 <_printf_float+0x2cc>)
 80070d0:	4b91      	ldr	r3, [pc, #580]	@ (8007318 <_printf_float+0x2d0>)
 80070d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80070d6:	bf8c      	ite	hi
 80070d8:	4690      	movhi	r8, r2
 80070da:	4698      	movls	r8, r3
 80070dc:	2303      	movs	r3, #3
 80070de:	6123      	str	r3, [r4, #16]
 80070e0:	f02b 0304 	bic.w	r3, fp, #4
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	f04f 0900 	mov.w	r9, #0
 80070ea:	9700      	str	r7, [sp, #0]
 80070ec:	4633      	mov	r3, r6
 80070ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80070f0:	4621      	mov	r1, r4
 80070f2:	4628      	mov	r0, r5
 80070f4:	f000 f9d2 	bl	800749c <_printf_common>
 80070f8:	3001      	adds	r0, #1
 80070fa:	f040 808d 	bne.w	8007218 <_printf_float+0x1d0>
 80070fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007102:	b00d      	add	sp, #52	@ 0x34
 8007104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007108:	4642      	mov	r2, r8
 800710a:	464b      	mov	r3, r9
 800710c:	4640      	mov	r0, r8
 800710e:	4649      	mov	r1, r9
 8007110:	f7f9 fd14 	bl	8000b3c <__aeabi_dcmpun>
 8007114:	b140      	cbz	r0, 8007128 <_printf_float+0xe0>
 8007116:	464b      	mov	r3, r9
 8007118:	2b00      	cmp	r3, #0
 800711a:	bfbc      	itt	lt
 800711c:	232d      	movlt	r3, #45	@ 0x2d
 800711e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007122:	4a7e      	ldr	r2, [pc, #504]	@ (800731c <_printf_float+0x2d4>)
 8007124:	4b7e      	ldr	r3, [pc, #504]	@ (8007320 <_printf_float+0x2d8>)
 8007126:	e7d4      	b.n	80070d2 <_printf_float+0x8a>
 8007128:	6863      	ldr	r3, [r4, #4]
 800712a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800712e:	9206      	str	r2, [sp, #24]
 8007130:	1c5a      	adds	r2, r3, #1
 8007132:	d13b      	bne.n	80071ac <_printf_float+0x164>
 8007134:	2306      	movs	r3, #6
 8007136:	6063      	str	r3, [r4, #4]
 8007138:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800713c:	2300      	movs	r3, #0
 800713e:	6022      	str	r2, [r4, #0]
 8007140:	9303      	str	r3, [sp, #12]
 8007142:	ab0a      	add	r3, sp, #40	@ 0x28
 8007144:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007148:	ab09      	add	r3, sp, #36	@ 0x24
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	6861      	ldr	r1, [r4, #4]
 800714e:	ec49 8b10 	vmov	d0, r8, r9
 8007152:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007156:	4628      	mov	r0, r5
 8007158:	f7ff fed6 	bl	8006f08 <__cvt>
 800715c:	9b06      	ldr	r3, [sp, #24]
 800715e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007160:	2b47      	cmp	r3, #71	@ 0x47
 8007162:	4680      	mov	r8, r0
 8007164:	d129      	bne.n	80071ba <_printf_float+0x172>
 8007166:	1cc8      	adds	r0, r1, #3
 8007168:	db02      	blt.n	8007170 <_printf_float+0x128>
 800716a:	6863      	ldr	r3, [r4, #4]
 800716c:	4299      	cmp	r1, r3
 800716e:	dd41      	ble.n	80071f4 <_printf_float+0x1ac>
 8007170:	f1aa 0a02 	sub.w	sl, sl, #2
 8007174:	fa5f fa8a 	uxtb.w	sl, sl
 8007178:	3901      	subs	r1, #1
 800717a:	4652      	mov	r2, sl
 800717c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007180:	9109      	str	r1, [sp, #36]	@ 0x24
 8007182:	f7ff ff26 	bl	8006fd2 <__exponent>
 8007186:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007188:	1813      	adds	r3, r2, r0
 800718a:	2a01      	cmp	r2, #1
 800718c:	4681      	mov	r9, r0
 800718e:	6123      	str	r3, [r4, #16]
 8007190:	dc02      	bgt.n	8007198 <_printf_float+0x150>
 8007192:	6822      	ldr	r2, [r4, #0]
 8007194:	07d2      	lsls	r2, r2, #31
 8007196:	d501      	bpl.n	800719c <_printf_float+0x154>
 8007198:	3301      	adds	r3, #1
 800719a:	6123      	str	r3, [r4, #16]
 800719c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d0a2      	beq.n	80070ea <_printf_float+0xa2>
 80071a4:	232d      	movs	r3, #45	@ 0x2d
 80071a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071aa:	e79e      	b.n	80070ea <_printf_float+0xa2>
 80071ac:	9a06      	ldr	r2, [sp, #24]
 80071ae:	2a47      	cmp	r2, #71	@ 0x47
 80071b0:	d1c2      	bne.n	8007138 <_printf_float+0xf0>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1c0      	bne.n	8007138 <_printf_float+0xf0>
 80071b6:	2301      	movs	r3, #1
 80071b8:	e7bd      	b.n	8007136 <_printf_float+0xee>
 80071ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80071be:	d9db      	bls.n	8007178 <_printf_float+0x130>
 80071c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80071c4:	d118      	bne.n	80071f8 <_printf_float+0x1b0>
 80071c6:	2900      	cmp	r1, #0
 80071c8:	6863      	ldr	r3, [r4, #4]
 80071ca:	dd0b      	ble.n	80071e4 <_printf_float+0x19c>
 80071cc:	6121      	str	r1, [r4, #16]
 80071ce:	b913      	cbnz	r3, 80071d6 <_printf_float+0x18e>
 80071d0:	6822      	ldr	r2, [r4, #0]
 80071d2:	07d0      	lsls	r0, r2, #31
 80071d4:	d502      	bpl.n	80071dc <_printf_float+0x194>
 80071d6:	3301      	adds	r3, #1
 80071d8:	440b      	add	r3, r1
 80071da:	6123      	str	r3, [r4, #16]
 80071dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80071de:	f04f 0900 	mov.w	r9, #0
 80071e2:	e7db      	b.n	800719c <_printf_float+0x154>
 80071e4:	b913      	cbnz	r3, 80071ec <_printf_float+0x1a4>
 80071e6:	6822      	ldr	r2, [r4, #0]
 80071e8:	07d2      	lsls	r2, r2, #31
 80071ea:	d501      	bpl.n	80071f0 <_printf_float+0x1a8>
 80071ec:	3302      	adds	r3, #2
 80071ee:	e7f4      	b.n	80071da <_printf_float+0x192>
 80071f0:	2301      	movs	r3, #1
 80071f2:	e7f2      	b.n	80071da <_printf_float+0x192>
 80071f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80071f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071fa:	4299      	cmp	r1, r3
 80071fc:	db05      	blt.n	800720a <_printf_float+0x1c2>
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	6121      	str	r1, [r4, #16]
 8007202:	07d8      	lsls	r0, r3, #31
 8007204:	d5ea      	bpl.n	80071dc <_printf_float+0x194>
 8007206:	1c4b      	adds	r3, r1, #1
 8007208:	e7e7      	b.n	80071da <_printf_float+0x192>
 800720a:	2900      	cmp	r1, #0
 800720c:	bfd4      	ite	le
 800720e:	f1c1 0202 	rsble	r2, r1, #2
 8007212:	2201      	movgt	r2, #1
 8007214:	4413      	add	r3, r2
 8007216:	e7e0      	b.n	80071da <_printf_float+0x192>
 8007218:	6823      	ldr	r3, [r4, #0]
 800721a:	055a      	lsls	r2, r3, #21
 800721c:	d407      	bmi.n	800722e <_printf_float+0x1e6>
 800721e:	6923      	ldr	r3, [r4, #16]
 8007220:	4642      	mov	r2, r8
 8007222:	4631      	mov	r1, r6
 8007224:	4628      	mov	r0, r5
 8007226:	47b8      	blx	r7
 8007228:	3001      	adds	r0, #1
 800722a:	d12b      	bne.n	8007284 <_printf_float+0x23c>
 800722c:	e767      	b.n	80070fe <_printf_float+0xb6>
 800722e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007232:	f240 80dd 	bls.w	80073f0 <_printf_float+0x3a8>
 8007236:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800723a:	2200      	movs	r2, #0
 800723c:	2300      	movs	r3, #0
 800723e:	f7f9 fc4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007242:	2800      	cmp	r0, #0
 8007244:	d033      	beq.n	80072ae <_printf_float+0x266>
 8007246:	4a37      	ldr	r2, [pc, #220]	@ (8007324 <_printf_float+0x2dc>)
 8007248:	2301      	movs	r3, #1
 800724a:	4631      	mov	r1, r6
 800724c:	4628      	mov	r0, r5
 800724e:	47b8      	blx	r7
 8007250:	3001      	adds	r0, #1
 8007252:	f43f af54 	beq.w	80070fe <_printf_float+0xb6>
 8007256:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800725a:	4543      	cmp	r3, r8
 800725c:	db02      	blt.n	8007264 <_printf_float+0x21c>
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	07d8      	lsls	r0, r3, #31
 8007262:	d50f      	bpl.n	8007284 <_printf_float+0x23c>
 8007264:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007268:	4631      	mov	r1, r6
 800726a:	4628      	mov	r0, r5
 800726c:	47b8      	blx	r7
 800726e:	3001      	adds	r0, #1
 8007270:	f43f af45 	beq.w	80070fe <_printf_float+0xb6>
 8007274:	f04f 0900 	mov.w	r9, #0
 8007278:	f108 38ff 	add.w	r8, r8, #4294967295
 800727c:	f104 0a1a 	add.w	sl, r4, #26
 8007280:	45c8      	cmp	r8, r9
 8007282:	dc09      	bgt.n	8007298 <_printf_float+0x250>
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	079b      	lsls	r3, r3, #30
 8007288:	f100 8103 	bmi.w	8007492 <_printf_float+0x44a>
 800728c:	68e0      	ldr	r0, [r4, #12]
 800728e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007290:	4298      	cmp	r0, r3
 8007292:	bfb8      	it	lt
 8007294:	4618      	movlt	r0, r3
 8007296:	e734      	b.n	8007102 <_printf_float+0xba>
 8007298:	2301      	movs	r3, #1
 800729a:	4652      	mov	r2, sl
 800729c:	4631      	mov	r1, r6
 800729e:	4628      	mov	r0, r5
 80072a0:	47b8      	blx	r7
 80072a2:	3001      	adds	r0, #1
 80072a4:	f43f af2b 	beq.w	80070fe <_printf_float+0xb6>
 80072a8:	f109 0901 	add.w	r9, r9, #1
 80072ac:	e7e8      	b.n	8007280 <_printf_float+0x238>
 80072ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	dc39      	bgt.n	8007328 <_printf_float+0x2e0>
 80072b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007324 <_printf_float+0x2dc>)
 80072b6:	2301      	movs	r3, #1
 80072b8:	4631      	mov	r1, r6
 80072ba:	4628      	mov	r0, r5
 80072bc:	47b8      	blx	r7
 80072be:	3001      	adds	r0, #1
 80072c0:	f43f af1d 	beq.w	80070fe <_printf_float+0xb6>
 80072c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80072c8:	ea59 0303 	orrs.w	r3, r9, r3
 80072cc:	d102      	bne.n	80072d4 <_printf_float+0x28c>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	07d9      	lsls	r1, r3, #31
 80072d2:	d5d7      	bpl.n	8007284 <_printf_float+0x23c>
 80072d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072d8:	4631      	mov	r1, r6
 80072da:	4628      	mov	r0, r5
 80072dc:	47b8      	blx	r7
 80072de:	3001      	adds	r0, #1
 80072e0:	f43f af0d 	beq.w	80070fe <_printf_float+0xb6>
 80072e4:	f04f 0a00 	mov.w	sl, #0
 80072e8:	f104 0b1a 	add.w	fp, r4, #26
 80072ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ee:	425b      	negs	r3, r3
 80072f0:	4553      	cmp	r3, sl
 80072f2:	dc01      	bgt.n	80072f8 <_printf_float+0x2b0>
 80072f4:	464b      	mov	r3, r9
 80072f6:	e793      	b.n	8007220 <_printf_float+0x1d8>
 80072f8:	2301      	movs	r3, #1
 80072fa:	465a      	mov	r2, fp
 80072fc:	4631      	mov	r1, r6
 80072fe:	4628      	mov	r0, r5
 8007300:	47b8      	blx	r7
 8007302:	3001      	adds	r0, #1
 8007304:	f43f aefb 	beq.w	80070fe <_printf_float+0xb6>
 8007308:	f10a 0a01 	add.w	sl, sl, #1
 800730c:	e7ee      	b.n	80072ec <_printf_float+0x2a4>
 800730e:	bf00      	nop
 8007310:	7fefffff 	.word	0x7fefffff
 8007314:	08009c48 	.word	0x08009c48
 8007318:	08009c44 	.word	0x08009c44
 800731c:	08009c50 	.word	0x08009c50
 8007320:	08009c4c 	.word	0x08009c4c
 8007324:	08009c54 	.word	0x08009c54
 8007328:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800732a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800732e:	4553      	cmp	r3, sl
 8007330:	bfa8      	it	ge
 8007332:	4653      	movge	r3, sl
 8007334:	2b00      	cmp	r3, #0
 8007336:	4699      	mov	r9, r3
 8007338:	dc36      	bgt.n	80073a8 <_printf_float+0x360>
 800733a:	f04f 0b00 	mov.w	fp, #0
 800733e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007342:	f104 021a 	add.w	r2, r4, #26
 8007346:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007348:	9306      	str	r3, [sp, #24]
 800734a:	eba3 0309 	sub.w	r3, r3, r9
 800734e:	455b      	cmp	r3, fp
 8007350:	dc31      	bgt.n	80073b6 <_printf_float+0x36e>
 8007352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007354:	459a      	cmp	sl, r3
 8007356:	dc3a      	bgt.n	80073ce <_printf_float+0x386>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	07da      	lsls	r2, r3, #31
 800735c:	d437      	bmi.n	80073ce <_printf_float+0x386>
 800735e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007360:	ebaa 0903 	sub.w	r9, sl, r3
 8007364:	9b06      	ldr	r3, [sp, #24]
 8007366:	ebaa 0303 	sub.w	r3, sl, r3
 800736a:	4599      	cmp	r9, r3
 800736c:	bfa8      	it	ge
 800736e:	4699      	movge	r9, r3
 8007370:	f1b9 0f00 	cmp.w	r9, #0
 8007374:	dc33      	bgt.n	80073de <_printf_float+0x396>
 8007376:	f04f 0800 	mov.w	r8, #0
 800737a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800737e:	f104 0b1a 	add.w	fp, r4, #26
 8007382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007384:	ebaa 0303 	sub.w	r3, sl, r3
 8007388:	eba3 0309 	sub.w	r3, r3, r9
 800738c:	4543      	cmp	r3, r8
 800738e:	f77f af79 	ble.w	8007284 <_printf_float+0x23c>
 8007392:	2301      	movs	r3, #1
 8007394:	465a      	mov	r2, fp
 8007396:	4631      	mov	r1, r6
 8007398:	4628      	mov	r0, r5
 800739a:	47b8      	blx	r7
 800739c:	3001      	adds	r0, #1
 800739e:	f43f aeae 	beq.w	80070fe <_printf_float+0xb6>
 80073a2:	f108 0801 	add.w	r8, r8, #1
 80073a6:	e7ec      	b.n	8007382 <_printf_float+0x33a>
 80073a8:	4642      	mov	r2, r8
 80073aa:	4631      	mov	r1, r6
 80073ac:	4628      	mov	r0, r5
 80073ae:	47b8      	blx	r7
 80073b0:	3001      	adds	r0, #1
 80073b2:	d1c2      	bne.n	800733a <_printf_float+0x2f2>
 80073b4:	e6a3      	b.n	80070fe <_printf_float+0xb6>
 80073b6:	2301      	movs	r3, #1
 80073b8:	4631      	mov	r1, r6
 80073ba:	4628      	mov	r0, r5
 80073bc:	9206      	str	r2, [sp, #24]
 80073be:	47b8      	blx	r7
 80073c0:	3001      	adds	r0, #1
 80073c2:	f43f ae9c 	beq.w	80070fe <_printf_float+0xb6>
 80073c6:	9a06      	ldr	r2, [sp, #24]
 80073c8:	f10b 0b01 	add.w	fp, fp, #1
 80073cc:	e7bb      	b.n	8007346 <_printf_float+0x2fe>
 80073ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073d2:	4631      	mov	r1, r6
 80073d4:	4628      	mov	r0, r5
 80073d6:	47b8      	blx	r7
 80073d8:	3001      	adds	r0, #1
 80073da:	d1c0      	bne.n	800735e <_printf_float+0x316>
 80073dc:	e68f      	b.n	80070fe <_printf_float+0xb6>
 80073de:	9a06      	ldr	r2, [sp, #24]
 80073e0:	464b      	mov	r3, r9
 80073e2:	4442      	add	r2, r8
 80073e4:	4631      	mov	r1, r6
 80073e6:	4628      	mov	r0, r5
 80073e8:	47b8      	blx	r7
 80073ea:	3001      	adds	r0, #1
 80073ec:	d1c3      	bne.n	8007376 <_printf_float+0x32e>
 80073ee:	e686      	b.n	80070fe <_printf_float+0xb6>
 80073f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80073f4:	f1ba 0f01 	cmp.w	sl, #1
 80073f8:	dc01      	bgt.n	80073fe <_printf_float+0x3b6>
 80073fa:	07db      	lsls	r3, r3, #31
 80073fc:	d536      	bpl.n	800746c <_printf_float+0x424>
 80073fe:	2301      	movs	r3, #1
 8007400:	4642      	mov	r2, r8
 8007402:	4631      	mov	r1, r6
 8007404:	4628      	mov	r0, r5
 8007406:	47b8      	blx	r7
 8007408:	3001      	adds	r0, #1
 800740a:	f43f ae78 	beq.w	80070fe <_printf_float+0xb6>
 800740e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007412:	4631      	mov	r1, r6
 8007414:	4628      	mov	r0, r5
 8007416:	47b8      	blx	r7
 8007418:	3001      	adds	r0, #1
 800741a:	f43f ae70 	beq.w	80070fe <_printf_float+0xb6>
 800741e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007422:	2200      	movs	r2, #0
 8007424:	2300      	movs	r3, #0
 8007426:	f10a 3aff 	add.w	sl, sl, #4294967295
 800742a:	f7f9 fb55 	bl	8000ad8 <__aeabi_dcmpeq>
 800742e:	b9c0      	cbnz	r0, 8007462 <_printf_float+0x41a>
 8007430:	4653      	mov	r3, sl
 8007432:	f108 0201 	add.w	r2, r8, #1
 8007436:	4631      	mov	r1, r6
 8007438:	4628      	mov	r0, r5
 800743a:	47b8      	blx	r7
 800743c:	3001      	adds	r0, #1
 800743e:	d10c      	bne.n	800745a <_printf_float+0x412>
 8007440:	e65d      	b.n	80070fe <_printf_float+0xb6>
 8007442:	2301      	movs	r3, #1
 8007444:	465a      	mov	r2, fp
 8007446:	4631      	mov	r1, r6
 8007448:	4628      	mov	r0, r5
 800744a:	47b8      	blx	r7
 800744c:	3001      	adds	r0, #1
 800744e:	f43f ae56 	beq.w	80070fe <_printf_float+0xb6>
 8007452:	f108 0801 	add.w	r8, r8, #1
 8007456:	45d0      	cmp	r8, sl
 8007458:	dbf3      	blt.n	8007442 <_printf_float+0x3fa>
 800745a:	464b      	mov	r3, r9
 800745c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007460:	e6df      	b.n	8007222 <_printf_float+0x1da>
 8007462:	f04f 0800 	mov.w	r8, #0
 8007466:	f104 0b1a 	add.w	fp, r4, #26
 800746a:	e7f4      	b.n	8007456 <_printf_float+0x40e>
 800746c:	2301      	movs	r3, #1
 800746e:	4642      	mov	r2, r8
 8007470:	e7e1      	b.n	8007436 <_printf_float+0x3ee>
 8007472:	2301      	movs	r3, #1
 8007474:	464a      	mov	r2, r9
 8007476:	4631      	mov	r1, r6
 8007478:	4628      	mov	r0, r5
 800747a:	47b8      	blx	r7
 800747c:	3001      	adds	r0, #1
 800747e:	f43f ae3e 	beq.w	80070fe <_printf_float+0xb6>
 8007482:	f108 0801 	add.w	r8, r8, #1
 8007486:	68e3      	ldr	r3, [r4, #12]
 8007488:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800748a:	1a5b      	subs	r3, r3, r1
 800748c:	4543      	cmp	r3, r8
 800748e:	dcf0      	bgt.n	8007472 <_printf_float+0x42a>
 8007490:	e6fc      	b.n	800728c <_printf_float+0x244>
 8007492:	f04f 0800 	mov.w	r8, #0
 8007496:	f104 0919 	add.w	r9, r4, #25
 800749a:	e7f4      	b.n	8007486 <_printf_float+0x43e>

0800749c <_printf_common>:
 800749c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a0:	4616      	mov	r6, r2
 80074a2:	4698      	mov	r8, r3
 80074a4:	688a      	ldr	r2, [r1, #8]
 80074a6:	690b      	ldr	r3, [r1, #16]
 80074a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074ac:	4293      	cmp	r3, r2
 80074ae:	bfb8      	it	lt
 80074b0:	4613      	movlt	r3, r2
 80074b2:	6033      	str	r3, [r6, #0]
 80074b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074b8:	4607      	mov	r7, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	b10a      	cbz	r2, 80074c2 <_printf_common+0x26>
 80074be:	3301      	adds	r3, #1
 80074c0:	6033      	str	r3, [r6, #0]
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	0699      	lsls	r1, r3, #26
 80074c6:	bf42      	ittt	mi
 80074c8:	6833      	ldrmi	r3, [r6, #0]
 80074ca:	3302      	addmi	r3, #2
 80074cc:	6033      	strmi	r3, [r6, #0]
 80074ce:	6825      	ldr	r5, [r4, #0]
 80074d0:	f015 0506 	ands.w	r5, r5, #6
 80074d4:	d106      	bne.n	80074e4 <_printf_common+0x48>
 80074d6:	f104 0a19 	add.w	sl, r4, #25
 80074da:	68e3      	ldr	r3, [r4, #12]
 80074dc:	6832      	ldr	r2, [r6, #0]
 80074de:	1a9b      	subs	r3, r3, r2
 80074e0:	42ab      	cmp	r3, r5
 80074e2:	dc26      	bgt.n	8007532 <_printf_common+0x96>
 80074e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074e8:	6822      	ldr	r2, [r4, #0]
 80074ea:	3b00      	subs	r3, #0
 80074ec:	bf18      	it	ne
 80074ee:	2301      	movne	r3, #1
 80074f0:	0692      	lsls	r2, r2, #26
 80074f2:	d42b      	bmi.n	800754c <_printf_common+0xb0>
 80074f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074f8:	4641      	mov	r1, r8
 80074fa:	4638      	mov	r0, r7
 80074fc:	47c8      	blx	r9
 80074fe:	3001      	adds	r0, #1
 8007500:	d01e      	beq.n	8007540 <_printf_common+0xa4>
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	6922      	ldr	r2, [r4, #16]
 8007506:	f003 0306 	and.w	r3, r3, #6
 800750a:	2b04      	cmp	r3, #4
 800750c:	bf02      	ittt	eq
 800750e:	68e5      	ldreq	r5, [r4, #12]
 8007510:	6833      	ldreq	r3, [r6, #0]
 8007512:	1aed      	subeq	r5, r5, r3
 8007514:	68a3      	ldr	r3, [r4, #8]
 8007516:	bf0c      	ite	eq
 8007518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800751c:	2500      	movne	r5, #0
 800751e:	4293      	cmp	r3, r2
 8007520:	bfc4      	itt	gt
 8007522:	1a9b      	subgt	r3, r3, r2
 8007524:	18ed      	addgt	r5, r5, r3
 8007526:	2600      	movs	r6, #0
 8007528:	341a      	adds	r4, #26
 800752a:	42b5      	cmp	r5, r6
 800752c:	d11a      	bne.n	8007564 <_printf_common+0xc8>
 800752e:	2000      	movs	r0, #0
 8007530:	e008      	b.n	8007544 <_printf_common+0xa8>
 8007532:	2301      	movs	r3, #1
 8007534:	4652      	mov	r2, sl
 8007536:	4641      	mov	r1, r8
 8007538:	4638      	mov	r0, r7
 800753a:	47c8      	blx	r9
 800753c:	3001      	adds	r0, #1
 800753e:	d103      	bne.n	8007548 <_printf_common+0xac>
 8007540:	f04f 30ff 	mov.w	r0, #4294967295
 8007544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007548:	3501      	adds	r5, #1
 800754a:	e7c6      	b.n	80074da <_printf_common+0x3e>
 800754c:	18e1      	adds	r1, r4, r3
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	2030      	movs	r0, #48	@ 0x30
 8007552:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007556:	4422      	add	r2, r4
 8007558:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800755c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007560:	3302      	adds	r3, #2
 8007562:	e7c7      	b.n	80074f4 <_printf_common+0x58>
 8007564:	2301      	movs	r3, #1
 8007566:	4622      	mov	r2, r4
 8007568:	4641      	mov	r1, r8
 800756a:	4638      	mov	r0, r7
 800756c:	47c8      	blx	r9
 800756e:	3001      	adds	r0, #1
 8007570:	d0e6      	beq.n	8007540 <_printf_common+0xa4>
 8007572:	3601      	adds	r6, #1
 8007574:	e7d9      	b.n	800752a <_printf_common+0x8e>
	...

08007578 <_printf_i>:
 8007578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800757c:	7e0f      	ldrb	r7, [r1, #24]
 800757e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007580:	2f78      	cmp	r7, #120	@ 0x78
 8007582:	4691      	mov	r9, r2
 8007584:	4680      	mov	r8, r0
 8007586:	460c      	mov	r4, r1
 8007588:	469a      	mov	sl, r3
 800758a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800758e:	d807      	bhi.n	80075a0 <_printf_i+0x28>
 8007590:	2f62      	cmp	r7, #98	@ 0x62
 8007592:	d80a      	bhi.n	80075aa <_printf_i+0x32>
 8007594:	2f00      	cmp	r7, #0
 8007596:	f000 80d1 	beq.w	800773c <_printf_i+0x1c4>
 800759a:	2f58      	cmp	r7, #88	@ 0x58
 800759c:	f000 80b8 	beq.w	8007710 <_printf_i+0x198>
 80075a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075a8:	e03a      	b.n	8007620 <_printf_i+0xa8>
 80075aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075ae:	2b15      	cmp	r3, #21
 80075b0:	d8f6      	bhi.n	80075a0 <_printf_i+0x28>
 80075b2:	a101      	add	r1, pc, #4	@ (adr r1, 80075b8 <_printf_i+0x40>)
 80075b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075b8:	08007611 	.word	0x08007611
 80075bc:	08007625 	.word	0x08007625
 80075c0:	080075a1 	.word	0x080075a1
 80075c4:	080075a1 	.word	0x080075a1
 80075c8:	080075a1 	.word	0x080075a1
 80075cc:	080075a1 	.word	0x080075a1
 80075d0:	08007625 	.word	0x08007625
 80075d4:	080075a1 	.word	0x080075a1
 80075d8:	080075a1 	.word	0x080075a1
 80075dc:	080075a1 	.word	0x080075a1
 80075e0:	080075a1 	.word	0x080075a1
 80075e4:	08007723 	.word	0x08007723
 80075e8:	0800764f 	.word	0x0800764f
 80075ec:	080076dd 	.word	0x080076dd
 80075f0:	080075a1 	.word	0x080075a1
 80075f4:	080075a1 	.word	0x080075a1
 80075f8:	08007745 	.word	0x08007745
 80075fc:	080075a1 	.word	0x080075a1
 8007600:	0800764f 	.word	0x0800764f
 8007604:	080075a1 	.word	0x080075a1
 8007608:	080075a1 	.word	0x080075a1
 800760c:	080076e5 	.word	0x080076e5
 8007610:	6833      	ldr	r3, [r6, #0]
 8007612:	1d1a      	adds	r2, r3, #4
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6032      	str	r2, [r6, #0]
 8007618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800761c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007620:	2301      	movs	r3, #1
 8007622:	e09c      	b.n	800775e <_printf_i+0x1e6>
 8007624:	6833      	ldr	r3, [r6, #0]
 8007626:	6820      	ldr	r0, [r4, #0]
 8007628:	1d19      	adds	r1, r3, #4
 800762a:	6031      	str	r1, [r6, #0]
 800762c:	0606      	lsls	r6, r0, #24
 800762e:	d501      	bpl.n	8007634 <_printf_i+0xbc>
 8007630:	681d      	ldr	r5, [r3, #0]
 8007632:	e003      	b.n	800763c <_printf_i+0xc4>
 8007634:	0645      	lsls	r5, r0, #25
 8007636:	d5fb      	bpl.n	8007630 <_printf_i+0xb8>
 8007638:	f9b3 5000 	ldrsh.w	r5, [r3]
 800763c:	2d00      	cmp	r5, #0
 800763e:	da03      	bge.n	8007648 <_printf_i+0xd0>
 8007640:	232d      	movs	r3, #45	@ 0x2d
 8007642:	426d      	negs	r5, r5
 8007644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007648:	4858      	ldr	r0, [pc, #352]	@ (80077ac <_printf_i+0x234>)
 800764a:	230a      	movs	r3, #10
 800764c:	e011      	b.n	8007672 <_printf_i+0xfa>
 800764e:	6821      	ldr	r1, [r4, #0]
 8007650:	6833      	ldr	r3, [r6, #0]
 8007652:	0608      	lsls	r0, r1, #24
 8007654:	f853 5b04 	ldr.w	r5, [r3], #4
 8007658:	d402      	bmi.n	8007660 <_printf_i+0xe8>
 800765a:	0649      	lsls	r1, r1, #25
 800765c:	bf48      	it	mi
 800765e:	b2ad      	uxthmi	r5, r5
 8007660:	2f6f      	cmp	r7, #111	@ 0x6f
 8007662:	4852      	ldr	r0, [pc, #328]	@ (80077ac <_printf_i+0x234>)
 8007664:	6033      	str	r3, [r6, #0]
 8007666:	bf14      	ite	ne
 8007668:	230a      	movne	r3, #10
 800766a:	2308      	moveq	r3, #8
 800766c:	2100      	movs	r1, #0
 800766e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007672:	6866      	ldr	r6, [r4, #4]
 8007674:	60a6      	str	r6, [r4, #8]
 8007676:	2e00      	cmp	r6, #0
 8007678:	db05      	blt.n	8007686 <_printf_i+0x10e>
 800767a:	6821      	ldr	r1, [r4, #0]
 800767c:	432e      	orrs	r6, r5
 800767e:	f021 0104 	bic.w	r1, r1, #4
 8007682:	6021      	str	r1, [r4, #0]
 8007684:	d04b      	beq.n	800771e <_printf_i+0x1a6>
 8007686:	4616      	mov	r6, r2
 8007688:	fbb5 f1f3 	udiv	r1, r5, r3
 800768c:	fb03 5711 	mls	r7, r3, r1, r5
 8007690:	5dc7      	ldrb	r7, [r0, r7]
 8007692:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007696:	462f      	mov	r7, r5
 8007698:	42bb      	cmp	r3, r7
 800769a:	460d      	mov	r5, r1
 800769c:	d9f4      	bls.n	8007688 <_printf_i+0x110>
 800769e:	2b08      	cmp	r3, #8
 80076a0:	d10b      	bne.n	80076ba <_printf_i+0x142>
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	07df      	lsls	r7, r3, #31
 80076a6:	d508      	bpl.n	80076ba <_printf_i+0x142>
 80076a8:	6923      	ldr	r3, [r4, #16]
 80076aa:	6861      	ldr	r1, [r4, #4]
 80076ac:	4299      	cmp	r1, r3
 80076ae:	bfde      	ittt	le
 80076b0:	2330      	movle	r3, #48	@ 0x30
 80076b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076ba:	1b92      	subs	r2, r2, r6
 80076bc:	6122      	str	r2, [r4, #16]
 80076be:	f8cd a000 	str.w	sl, [sp]
 80076c2:	464b      	mov	r3, r9
 80076c4:	aa03      	add	r2, sp, #12
 80076c6:	4621      	mov	r1, r4
 80076c8:	4640      	mov	r0, r8
 80076ca:	f7ff fee7 	bl	800749c <_printf_common>
 80076ce:	3001      	adds	r0, #1
 80076d0:	d14a      	bne.n	8007768 <_printf_i+0x1f0>
 80076d2:	f04f 30ff 	mov.w	r0, #4294967295
 80076d6:	b004      	add	sp, #16
 80076d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	f043 0320 	orr.w	r3, r3, #32
 80076e2:	6023      	str	r3, [r4, #0]
 80076e4:	4832      	ldr	r0, [pc, #200]	@ (80077b0 <_printf_i+0x238>)
 80076e6:	2778      	movs	r7, #120	@ 0x78
 80076e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	6831      	ldr	r1, [r6, #0]
 80076f0:	061f      	lsls	r7, r3, #24
 80076f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80076f6:	d402      	bmi.n	80076fe <_printf_i+0x186>
 80076f8:	065f      	lsls	r7, r3, #25
 80076fa:	bf48      	it	mi
 80076fc:	b2ad      	uxthmi	r5, r5
 80076fe:	6031      	str	r1, [r6, #0]
 8007700:	07d9      	lsls	r1, r3, #31
 8007702:	bf44      	itt	mi
 8007704:	f043 0320 	orrmi.w	r3, r3, #32
 8007708:	6023      	strmi	r3, [r4, #0]
 800770a:	b11d      	cbz	r5, 8007714 <_printf_i+0x19c>
 800770c:	2310      	movs	r3, #16
 800770e:	e7ad      	b.n	800766c <_printf_i+0xf4>
 8007710:	4826      	ldr	r0, [pc, #152]	@ (80077ac <_printf_i+0x234>)
 8007712:	e7e9      	b.n	80076e8 <_printf_i+0x170>
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	f023 0320 	bic.w	r3, r3, #32
 800771a:	6023      	str	r3, [r4, #0]
 800771c:	e7f6      	b.n	800770c <_printf_i+0x194>
 800771e:	4616      	mov	r6, r2
 8007720:	e7bd      	b.n	800769e <_printf_i+0x126>
 8007722:	6833      	ldr	r3, [r6, #0]
 8007724:	6825      	ldr	r5, [r4, #0]
 8007726:	6961      	ldr	r1, [r4, #20]
 8007728:	1d18      	adds	r0, r3, #4
 800772a:	6030      	str	r0, [r6, #0]
 800772c:	062e      	lsls	r6, r5, #24
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	d501      	bpl.n	8007736 <_printf_i+0x1be>
 8007732:	6019      	str	r1, [r3, #0]
 8007734:	e002      	b.n	800773c <_printf_i+0x1c4>
 8007736:	0668      	lsls	r0, r5, #25
 8007738:	d5fb      	bpl.n	8007732 <_printf_i+0x1ba>
 800773a:	8019      	strh	r1, [r3, #0]
 800773c:	2300      	movs	r3, #0
 800773e:	6123      	str	r3, [r4, #16]
 8007740:	4616      	mov	r6, r2
 8007742:	e7bc      	b.n	80076be <_printf_i+0x146>
 8007744:	6833      	ldr	r3, [r6, #0]
 8007746:	1d1a      	adds	r2, r3, #4
 8007748:	6032      	str	r2, [r6, #0]
 800774a:	681e      	ldr	r6, [r3, #0]
 800774c:	6862      	ldr	r2, [r4, #4]
 800774e:	2100      	movs	r1, #0
 8007750:	4630      	mov	r0, r6
 8007752:	f7f8 fd45 	bl	80001e0 <memchr>
 8007756:	b108      	cbz	r0, 800775c <_printf_i+0x1e4>
 8007758:	1b80      	subs	r0, r0, r6
 800775a:	6060      	str	r0, [r4, #4]
 800775c:	6863      	ldr	r3, [r4, #4]
 800775e:	6123      	str	r3, [r4, #16]
 8007760:	2300      	movs	r3, #0
 8007762:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007766:	e7aa      	b.n	80076be <_printf_i+0x146>
 8007768:	6923      	ldr	r3, [r4, #16]
 800776a:	4632      	mov	r2, r6
 800776c:	4649      	mov	r1, r9
 800776e:	4640      	mov	r0, r8
 8007770:	47d0      	blx	sl
 8007772:	3001      	adds	r0, #1
 8007774:	d0ad      	beq.n	80076d2 <_printf_i+0x15a>
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	079b      	lsls	r3, r3, #30
 800777a:	d413      	bmi.n	80077a4 <_printf_i+0x22c>
 800777c:	68e0      	ldr	r0, [r4, #12]
 800777e:	9b03      	ldr	r3, [sp, #12]
 8007780:	4298      	cmp	r0, r3
 8007782:	bfb8      	it	lt
 8007784:	4618      	movlt	r0, r3
 8007786:	e7a6      	b.n	80076d6 <_printf_i+0x15e>
 8007788:	2301      	movs	r3, #1
 800778a:	4632      	mov	r2, r6
 800778c:	4649      	mov	r1, r9
 800778e:	4640      	mov	r0, r8
 8007790:	47d0      	blx	sl
 8007792:	3001      	adds	r0, #1
 8007794:	d09d      	beq.n	80076d2 <_printf_i+0x15a>
 8007796:	3501      	adds	r5, #1
 8007798:	68e3      	ldr	r3, [r4, #12]
 800779a:	9903      	ldr	r1, [sp, #12]
 800779c:	1a5b      	subs	r3, r3, r1
 800779e:	42ab      	cmp	r3, r5
 80077a0:	dcf2      	bgt.n	8007788 <_printf_i+0x210>
 80077a2:	e7eb      	b.n	800777c <_printf_i+0x204>
 80077a4:	2500      	movs	r5, #0
 80077a6:	f104 0619 	add.w	r6, r4, #25
 80077aa:	e7f5      	b.n	8007798 <_printf_i+0x220>
 80077ac:	08009c56 	.word	0x08009c56
 80077b0:	08009c67 	.word	0x08009c67

080077b4 <std>:
 80077b4:	2300      	movs	r3, #0
 80077b6:	b510      	push	{r4, lr}
 80077b8:	4604      	mov	r4, r0
 80077ba:	e9c0 3300 	strd	r3, r3, [r0]
 80077be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077c2:	6083      	str	r3, [r0, #8]
 80077c4:	8181      	strh	r1, [r0, #12]
 80077c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80077c8:	81c2      	strh	r2, [r0, #14]
 80077ca:	6183      	str	r3, [r0, #24]
 80077cc:	4619      	mov	r1, r3
 80077ce:	2208      	movs	r2, #8
 80077d0:	305c      	adds	r0, #92	@ 0x5c
 80077d2:	f000 f916 	bl	8007a02 <memset>
 80077d6:	4b0d      	ldr	r3, [pc, #52]	@ (800780c <std+0x58>)
 80077d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80077da:	4b0d      	ldr	r3, [pc, #52]	@ (8007810 <std+0x5c>)
 80077dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80077de:	4b0d      	ldr	r3, [pc, #52]	@ (8007814 <std+0x60>)
 80077e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80077e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007818 <std+0x64>)
 80077e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80077e6:	4b0d      	ldr	r3, [pc, #52]	@ (800781c <std+0x68>)
 80077e8:	6224      	str	r4, [r4, #32]
 80077ea:	429c      	cmp	r4, r3
 80077ec:	d006      	beq.n	80077fc <std+0x48>
 80077ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80077f2:	4294      	cmp	r4, r2
 80077f4:	d002      	beq.n	80077fc <std+0x48>
 80077f6:	33d0      	adds	r3, #208	@ 0xd0
 80077f8:	429c      	cmp	r4, r3
 80077fa:	d105      	bne.n	8007808 <std+0x54>
 80077fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007804:	f000 b97a 	b.w	8007afc <__retarget_lock_init_recursive>
 8007808:	bd10      	pop	{r4, pc}
 800780a:	bf00      	nop
 800780c:	0800797d 	.word	0x0800797d
 8007810:	0800799f 	.word	0x0800799f
 8007814:	080079d7 	.word	0x080079d7
 8007818:	080079fb 	.word	0x080079fb
 800781c:	20004d24 	.word	0x20004d24

08007820 <stdio_exit_handler>:
 8007820:	4a02      	ldr	r2, [pc, #8]	@ (800782c <stdio_exit_handler+0xc>)
 8007822:	4903      	ldr	r1, [pc, #12]	@ (8007830 <stdio_exit_handler+0x10>)
 8007824:	4803      	ldr	r0, [pc, #12]	@ (8007834 <stdio_exit_handler+0x14>)
 8007826:	f000 b869 	b.w	80078fc <_fwalk_sglue>
 800782a:	bf00      	nop
 800782c:	20000010 	.word	0x20000010
 8007830:	0800947d 	.word	0x0800947d
 8007834:	20000020 	.word	0x20000020

08007838 <cleanup_stdio>:
 8007838:	6841      	ldr	r1, [r0, #4]
 800783a:	4b0c      	ldr	r3, [pc, #48]	@ (800786c <cleanup_stdio+0x34>)
 800783c:	4299      	cmp	r1, r3
 800783e:	b510      	push	{r4, lr}
 8007840:	4604      	mov	r4, r0
 8007842:	d001      	beq.n	8007848 <cleanup_stdio+0x10>
 8007844:	f001 fe1a 	bl	800947c <_fflush_r>
 8007848:	68a1      	ldr	r1, [r4, #8]
 800784a:	4b09      	ldr	r3, [pc, #36]	@ (8007870 <cleanup_stdio+0x38>)
 800784c:	4299      	cmp	r1, r3
 800784e:	d002      	beq.n	8007856 <cleanup_stdio+0x1e>
 8007850:	4620      	mov	r0, r4
 8007852:	f001 fe13 	bl	800947c <_fflush_r>
 8007856:	68e1      	ldr	r1, [r4, #12]
 8007858:	4b06      	ldr	r3, [pc, #24]	@ (8007874 <cleanup_stdio+0x3c>)
 800785a:	4299      	cmp	r1, r3
 800785c:	d004      	beq.n	8007868 <cleanup_stdio+0x30>
 800785e:	4620      	mov	r0, r4
 8007860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007864:	f001 be0a 	b.w	800947c <_fflush_r>
 8007868:	bd10      	pop	{r4, pc}
 800786a:	bf00      	nop
 800786c:	20004d24 	.word	0x20004d24
 8007870:	20004d8c 	.word	0x20004d8c
 8007874:	20004df4 	.word	0x20004df4

08007878 <global_stdio_init.part.0>:
 8007878:	b510      	push	{r4, lr}
 800787a:	4b0b      	ldr	r3, [pc, #44]	@ (80078a8 <global_stdio_init.part.0+0x30>)
 800787c:	4c0b      	ldr	r4, [pc, #44]	@ (80078ac <global_stdio_init.part.0+0x34>)
 800787e:	4a0c      	ldr	r2, [pc, #48]	@ (80078b0 <global_stdio_init.part.0+0x38>)
 8007880:	601a      	str	r2, [r3, #0]
 8007882:	4620      	mov	r0, r4
 8007884:	2200      	movs	r2, #0
 8007886:	2104      	movs	r1, #4
 8007888:	f7ff ff94 	bl	80077b4 <std>
 800788c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007890:	2201      	movs	r2, #1
 8007892:	2109      	movs	r1, #9
 8007894:	f7ff ff8e 	bl	80077b4 <std>
 8007898:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800789c:	2202      	movs	r2, #2
 800789e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078a2:	2112      	movs	r1, #18
 80078a4:	f7ff bf86 	b.w	80077b4 <std>
 80078a8:	20004e5c 	.word	0x20004e5c
 80078ac:	20004d24 	.word	0x20004d24
 80078b0:	08007821 	.word	0x08007821

080078b4 <__sfp_lock_acquire>:
 80078b4:	4801      	ldr	r0, [pc, #4]	@ (80078bc <__sfp_lock_acquire+0x8>)
 80078b6:	f000 b922 	b.w	8007afe <__retarget_lock_acquire_recursive>
 80078ba:	bf00      	nop
 80078bc:	20004e65 	.word	0x20004e65

080078c0 <__sfp_lock_release>:
 80078c0:	4801      	ldr	r0, [pc, #4]	@ (80078c8 <__sfp_lock_release+0x8>)
 80078c2:	f000 b91d 	b.w	8007b00 <__retarget_lock_release_recursive>
 80078c6:	bf00      	nop
 80078c8:	20004e65 	.word	0x20004e65

080078cc <__sinit>:
 80078cc:	b510      	push	{r4, lr}
 80078ce:	4604      	mov	r4, r0
 80078d0:	f7ff fff0 	bl	80078b4 <__sfp_lock_acquire>
 80078d4:	6a23      	ldr	r3, [r4, #32]
 80078d6:	b11b      	cbz	r3, 80078e0 <__sinit+0x14>
 80078d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078dc:	f7ff bff0 	b.w	80078c0 <__sfp_lock_release>
 80078e0:	4b04      	ldr	r3, [pc, #16]	@ (80078f4 <__sinit+0x28>)
 80078e2:	6223      	str	r3, [r4, #32]
 80078e4:	4b04      	ldr	r3, [pc, #16]	@ (80078f8 <__sinit+0x2c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1f5      	bne.n	80078d8 <__sinit+0xc>
 80078ec:	f7ff ffc4 	bl	8007878 <global_stdio_init.part.0>
 80078f0:	e7f2      	b.n	80078d8 <__sinit+0xc>
 80078f2:	bf00      	nop
 80078f4:	08007839 	.word	0x08007839
 80078f8:	20004e5c 	.word	0x20004e5c

080078fc <_fwalk_sglue>:
 80078fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007900:	4607      	mov	r7, r0
 8007902:	4688      	mov	r8, r1
 8007904:	4614      	mov	r4, r2
 8007906:	2600      	movs	r6, #0
 8007908:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800790c:	f1b9 0901 	subs.w	r9, r9, #1
 8007910:	d505      	bpl.n	800791e <_fwalk_sglue+0x22>
 8007912:	6824      	ldr	r4, [r4, #0]
 8007914:	2c00      	cmp	r4, #0
 8007916:	d1f7      	bne.n	8007908 <_fwalk_sglue+0xc>
 8007918:	4630      	mov	r0, r6
 800791a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800791e:	89ab      	ldrh	r3, [r5, #12]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d907      	bls.n	8007934 <_fwalk_sglue+0x38>
 8007924:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007928:	3301      	adds	r3, #1
 800792a:	d003      	beq.n	8007934 <_fwalk_sglue+0x38>
 800792c:	4629      	mov	r1, r5
 800792e:	4638      	mov	r0, r7
 8007930:	47c0      	blx	r8
 8007932:	4306      	orrs	r6, r0
 8007934:	3568      	adds	r5, #104	@ 0x68
 8007936:	e7e9      	b.n	800790c <_fwalk_sglue+0x10>

08007938 <siprintf>:
 8007938:	b40e      	push	{r1, r2, r3}
 800793a:	b510      	push	{r4, lr}
 800793c:	b09d      	sub	sp, #116	@ 0x74
 800793e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007940:	9002      	str	r0, [sp, #8]
 8007942:	9006      	str	r0, [sp, #24]
 8007944:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007948:	480a      	ldr	r0, [pc, #40]	@ (8007974 <siprintf+0x3c>)
 800794a:	9107      	str	r1, [sp, #28]
 800794c:	9104      	str	r1, [sp, #16]
 800794e:	490a      	ldr	r1, [pc, #40]	@ (8007978 <siprintf+0x40>)
 8007950:	f853 2b04 	ldr.w	r2, [r3], #4
 8007954:	9105      	str	r1, [sp, #20]
 8007956:	2400      	movs	r4, #0
 8007958:	a902      	add	r1, sp, #8
 800795a:	6800      	ldr	r0, [r0, #0]
 800795c:	9301      	str	r3, [sp, #4]
 800795e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007960:	f001 fc0c 	bl	800917c <_svfiprintf_r>
 8007964:	9b02      	ldr	r3, [sp, #8]
 8007966:	701c      	strb	r4, [r3, #0]
 8007968:	b01d      	add	sp, #116	@ 0x74
 800796a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800796e:	b003      	add	sp, #12
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	2000001c 	.word	0x2000001c
 8007978:	ffff0208 	.word	0xffff0208

0800797c <__sread>:
 800797c:	b510      	push	{r4, lr}
 800797e:	460c      	mov	r4, r1
 8007980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007984:	f000 f86c 	bl	8007a60 <_read_r>
 8007988:	2800      	cmp	r0, #0
 800798a:	bfab      	itete	ge
 800798c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800798e:	89a3      	ldrhlt	r3, [r4, #12]
 8007990:	181b      	addge	r3, r3, r0
 8007992:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007996:	bfac      	ite	ge
 8007998:	6563      	strge	r3, [r4, #84]	@ 0x54
 800799a:	81a3      	strhlt	r3, [r4, #12]
 800799c:	bd10      	pop	{r4, pc}

0800799e <__swrite>:
 800799e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a2:	461f      	mov	r7, r3
 80079a4:	898b      	ldrh	r3, [r1, #12]
 80079a6:	05db      	lsls	r3, r3, #23
 80079a8:	4605      	mov	r5, r0
 80079aa:	460c      	mov	r4, r1
 80079ac:	4616      	mov	r6, r2
 80079ae:	d505      	bpl.n	80079bc <__swrite+0x1e>
 80079b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b4:	2302      	movs	r3, #2
 80079b6:	2200      	movs	r2, #0
 80079b8:	f000 f840 	bl	8007a3c <_lseek_r>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079c6:	81a3      	strh	r3, [r4, #12]
 80079c8:	4632      	mov	r2, r6
 80079ca:	463b      	mov	r3, r7
 80079cc:	4628      	mov	r0, r5
 80079ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079d2:	f000 b857 	b.w	8007a84 <_write_r>

080079d6 <__sseek>:
 80079d6:	b510      	push	{r4, lr}
 80079d8:	460c      	mov	r4, r1
 80079da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079de:	f000 f82d 	bl	8007a3c <_lseek_r>
 80079e2:	1c43      	adds	r3, r0, #1
 80079e4:	89a3      	ldrh	r3, [r4, #12]
 80079e6:	bf15      	itete	ne
 80079e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079f2:	81a3      	strheq	r3, [r4, #12]
 80079f4:	bf18      	it	ne
 80079f6:	81a3      	strhne	r3, [r4, #12]
 80079f8:	bd10      	pop	{r4, pc}

080079fa <__sclose>:
 80079fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079fe:	f000 b80d 	b.w	8007a1c <_close_r>

08007a02 <memset>:
 8007a02:	4402      	add	r2, r0
 8007a04:	4603      	mov	r3, r0
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d100      	bne.n	8007a0c <memset+0xa>
 8007a0a:	4770      	bx	lr
 8007a0c:	f803 1b01 	strb.w	r1, [r3], #1
 8007a10:	e7f9      	b.n	8007a06 <memset+0x4>
	...

08007a14 <_localeconv_r>:
 8007a14:	4800      	ldr	r0, [pc, #0]	@ (8007a18 <_localeconv_r+0x4>)
 8007a16:	4770      	bx	lr
 8007a18:	2000015c 	.word	0x2000015c

08007a1c <_close_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	4d06      	ldr	r5, [pc, #24]	@ (8007a38 <_close_r+0x1c>)
 8007a20:	2300      	movs	r3, #0
 8007a22:	4604      	mov	r4, r0
 8007a24:	4608      	mov	r0, r1
 8007a26:	602b      	str	r3, [r5, #0]
 8007a28:	f7fa fa12 	bl	8001e50 <_close>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	d102      	bne.n	8007a36 <_close_r+0x1a>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	b103      	cbz	r3, 8007a36 <_close_r+0x1a>
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	bd38      	pop	{r3, r4, r5, pc}
 8007a38:	20004e60 	.word	0x20004e60

08007a3c <_lseek_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	4d07      	ldr	r5, [pc, #28]	@ (8007a5c <_lseek_r+0x20>)
 8007a40:	4604      	mov	r4, r0
 8007a42:	4608      	mov	r0, r1
 8007a44:	4611      	mov	r1, r2
 8007a46:	2200      	movs	r2, #0
 8007a48:	602a      	str	r2, [r5, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f7fa fa27 	bl	8001e9e <_lseek>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d102      	bne.n	8007a5a <_lseek_r+0x1e>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b103      	cbz	r3, 8007a5a <_lseek_r+0x1e>
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	20004e60 	.word	0x20004e60

08007a60 <_read_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4d07      	ldr	r5, [pc, #28]	@ (8007a80 <_read_r+0x20>)
 8007a64:	4604      	mov	r4, r0
 8007a66:	4608      	mov	r0, r1
 8007a68:	4611      	mov	r1, r2
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	602a      	str	r2, [r5, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f7fa f9b5 	bl	8001dde <_read>
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	d102      	bne.n	8007a7e <_read_r+0x1e>
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	b103      	cbz	r3, 8007a7e <_read_r+0x1e>
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	bd38      	pop	{r3, r4, r5, pc}
 8007a80:	20004e60 	.word	0x20004e60

08007a84 <_write_r>:
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	4d07      	ldr	r5, [pc, #28]	@ (8007aa4 <_write_r+0x20>)
 8007a88:	4604      	mov	r4, r0
 8007a8a:	4608      	mov	r0, r1
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	2200      	movs	r2, #0
 8007a90:	602a      	str	r2, [r5, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	f7fa f9c0 	bl	8001e18 <_write>
 8007a98:	1c43      	adds	r3, r0, #1
 8007a9a:	d102      	bne.n	8007aa2 <_write_r+0x1e>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	b103      	cbz	r3, 8007aa2 <_write_r+0x1e>
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	20004e60 	.word	0x20004e60

08007aa8 <__errno>:
 8007aa8:	4b01      	ldr	r3, [pc, #4]	@ (8007ab0 <__errno+0x8>)
 8007aaa:	6818      	ldr	r0, [r3, #0]
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	2000001c 	.word	0x2000001c

08007ab4 <__libc_init_array>:
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	4d0d      	ldr	r5, [pc, #52]	@ (8007aec <__libc_init_array+0x38>)
 8007ab8:	4c0d      	ldr	r4, [pc, #52]	@ (8007af0 <__libc_init_array+0x3c>)
 8007aba:	1b64      	subs	r4, r4, r5
 8007abc:	10a4      	asrs	r4, r4, #2
 8007abe:	2600      	movs	r6, #0
 8007ac0:	42a6      	cmp	r6, r4
 8007ac2:	d109      	bne.n	8007ad8 <__libc_init_array+0x24>
 8007ac4:	4d0b      	ldr	r5, [pc, #44]	@ (8007af4 <__libc_init_array+0x40>)
 8007ac6:	4c0c      	ldr	r4, [pc, #48]	@ (8007af8 <__libc_init_array+0x44>)
 8007ac8:	f002 f868 	bl	8009b9c <_init>
 8007acc:	1b64      	subs	r4, r4, r5
 8007ace:	10a4      	asrs	r4, r4, #2
 8007ad0:	2600      	movs	r6, #0
 8007ad2:	42a6      	cmp	r6, r4
 8007ad4:	d105      	bne.n	8007ae2 <__libc_init_array+0x2e>
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}
 8007ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007adc:	4798      	blx	r3
 8007ade:	3601      	adds	r6, #1
 8007ae0:	e7ee      	b.n	8007ac0 <__libc_init_array+0xc>
 8007ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae6:	4798      	blx	r3
 8007ae8:	3601      	adds	r6, #1
 8007aea:	e7f2      	b.n	8007ad2 <__libc_init_array+0x1e>
 8007aec:	08009fc4 	.word	0x08009fc4
 8007af0:	08009fc4 	.word	0x08009fc4
 8007af4:	08009fc4 	.word	0x08009fc4
 8007af8:	08009fc8 	.word	0x08009fc8

08007afc <__retarget_lock_init_recursive>:
 8007afc:	4770      	bx	lr

08007afe <__retarget_lock_acquire_recursive>:
 8007afe:	4770      	bx	lr

08007b00 <__retarget_lock_release_recursive>:
 8007b00:	4770      	bx	lr

08007b02 <memcpy>:
 8007b02:	440a      	add	r2, r1
 8007b04:	4291      	cmp	r1, r2
 8007b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b0a:	d100      	bne.n	8007b0e <memcpy+0xc>
 8007b0c:	4770      	bx	lr
 8007b0e:	b510      	push	{r4, lr}
 8007b10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b18:	4291      	cmp	r1, r2
 8007b1a:	d1f9      	bne.n	8007b10 <memcpy+0xe>
 8007b1c:	bd10      	pop	{r4, pc}

08007b1e <quorem>:
 8007b1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b22:	6903      	ldr	r3, [r0, #16]
 8007b24:	690c      	ldr	r4, [r1, #16]
 8007b26:	42a3      	cmp	r3, r4
 8007b28:	4607      	mov	r7, r0
 8007b2a:	db7e      	blt.n	8007c2a <quorem+0x10c>
 8007b2c:	3c01      	subs	r4, #1
 8007b2e:	f101 0814 	add.w	r8, r1, #20
 8007b32:	00a3      	lsls	r3, r4, #2
 8007b34:	f100 0514 	add.w	r5, r0, #20
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b3e:	9301      	str	r3, [sp, #4]
 8007b40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b50:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b54:	d32e      	bcc.n	8007bb4 <quorem+0x96>
 8007b56:	f04f 0a00 	mov.w	sl, #0
 8007b5a:	46c4      	mov	ip, r8
 8007b5c:	46ae      	mov	lr, r5
 8007b5e:	46d3      	mov	fp, sl
 8007b60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b64:	b298      	uxth	r0, r3
 8007b66:	fb06 a000 	mla	r0, r6, r0, sl
 8007b6a:	0c02      	lsrs	r2, r0, #16
 8007b6c:	0c1b      	lsrs	r3, r3, #16
 8007b6e:	fb06 2303 	mla	r3, r6, r3, r2
 8007b72:	f8de 2000 	ldr.w	r2, [lr]
 8007b76:	b280      	uxth	r0, r0
 8007b78:	b292      	uxth	r2, r2
 8007b7a:	1a12      	subs	r2, r2, r0
 8007b7c:	445a      	add	r2, fp
 8007b7e:	f8de 0000 	ldr.w	r0, [lr]
 8007b82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007b8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007b90:	b292      	uxth	r2, r2
 8007b92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b96:	45e1      	cmp	r9, ip
 8007b98:	f84e 2b04 	str.w	r2, [lr], #4
 8007b9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007ba0:	d2de      	bcs.n	8007b60 <quorem+0x42>
 8007ba2:	9b00      	ldr	r3, [sp, #0]
 8007ba4:	58eb      	ldr	r3, [r5, r3]
 8007ba6:	b92b      	cbnz	r3, 8007bb4 <quorem+0x96>
 8007ba8:	9b01      	ldr	r3, [sp, #4]
 8007baa:	3b04      	subs	r3, #4
 8007bac:	429d      	cmp	r5, r3
 8007bae:	461a      	mov	r2, r3
 8007bb0:	d32f      	bcc.n	8007c12 <quorem+0xf4>
 8007bb2:	613c      	str	r4, [r7, #16]
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	f001 f97d 	bl	8008eb4 <__mcmp>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	db25      	blt.n	8007c0a <quorem+0xec>
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bc6:	f8d1 c000 	ldr.w	ip, [r1]
 8007bca:	fa1f fe82 	uxth.w	lr, r2
 8007bce:	fa1f f38c 	uxth.w	r3, ip
 8007bd2:	eba3 030e 	sub.w	r3, r3, lr
 8007bd6:	4403      	add	r3, r0
 8007bd8:	0c12      	lsrs	r2, r2, #16
 8007bda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007bde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007be8:	45c1      	cmp	r9, r8
 8007bea:	f841 3b04 	str.w	r3, [r1], #4
 8007bee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007bf2:	d2e6      	bcs.n	8007bc2 <quorem+0xa4>
 8007bf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bfc:	b922      	cbnz	r2, 8007c08 <quorem+0xea>
 8007bfe:	3b04      	subs	r3, #4
 8007c00:	429d      	cmp	r5, r3
 8007c02:	461a      	mov	r2, r3
 8007c04:	d30b      	bcc.n	8007c1e <quorem+0x100>
 8007c06:	613c      	str	r4, [r7, #16]
 8007c08:	3601      	adds	r6, #1
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	b003      	add	sp, #12
 8007c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c12:	6812      	ldr	r2, [r2, #0]
 8007c14:	3b04      	subs	r3, #4
 8007c16:	2a00      	cmp	r2, #0
 8007c18:	d1cb      	bne.n	8007bb2 <quorem+0x94>
 8007c1a:	3c01      	subs	r4, #1
 8007c1c:	e7c6      	b.n	8007bac <quorem+0x8e>
 8007c1e:	6812      	ldr	r2, [r2, #0]
 8007c20:	3b04      	subs	r3, #4
 8007c22:	2a00      	cmp	r2, #0
 8007c24:	d1ef      	bne.n	8007c06 <quorem+0xe8>
 8007c26:	3c01      	subs	r4, #1
 8007c28:	e7ea      	b.n	8007c00 <quorem+0xe2>
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	e7ee      	b.n	8007c0c <quorem+0xee>
	...

08007c30 <_dtoa_r>:
 8007c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c34:	69c7      	ldr	r7, [r0, #28]
 8007c36:	b097      	sub	sp, #92	@ 0x5c
 8007c38:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007c3c:	ec55 4b10 	vmov	r4, r5, d0
 8007c40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007c42:	9107      	str	r1, [sp, #28]
 8007c44:	4681      	mov	r9, r0
 8007c46:	920c      	str	r2, [sp, #48]	@ 0x30
 8007c48:	9311      	str	r3, [sp, #68]	@ 0x44
 8007c4a:	b97f      	cbnz	r7, 8007c6c <_dtoa_r+0x3c>
 8007c4c:	2010      	movs	r0, #16
 8007c4e:	f000 fe09 	bl	8008864 <malloc>
 8007c52:	4602      	mov	r2, r0
 8007c54:	f8c9 001c 	str.w	r0, [r9, #28]
 8007c58:	b920      	cbnz	r0, 8007c64 <_dtoa_r+0x34>
 8007c5a:	4ba9      	ldr	r3, [pc, #676]	@ (8007f00 <_dtoa_r+0x2d0>)
 8007c5c:	21ef      	movs	r1, #239	@ 0xef
 8007c5e:	48a9      	ldr	r0, [pc, #676]	@ (8007f04 <_dtoa_r+0x2d4>)
 8007c60:	f001 fc5e 	bl	8009520 <__assert_func>
 8007c64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007c68:	6007      	str	r7, [r0, #0]
 8007c6a:	60c7      	str	r7, [r0, #12]
 8007c6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007c70:	6819      	ldr	r1, [r3, #0]
 8007c72:	b159      	cbz	r1, 8007c8c <_dtoa_r+0x5c>
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	604a      	str	r2, [r1, #4]
 8007c78:	2301      	movs	r3, #1
 8007c7a:	4093      	lsls	r3, r2
 8007c7c:	608b      	str	r3, [r1, #8]
 8007c7e:	4648      	mov	r0, r9
 8007c80:	f000 fee6 	bl	8008a50 <_Bfree>
 8007c84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	1e2b      	subs	r3, r5, #0
 8007c8e:	bfb9      	ittee	lt
 8007c90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007c94:	9305      	strlt	r3, [sp, #20]
 8007c96:	2300      	movge	r3, #0
 8007c98:	6033      	strge	r3, [r6, #0]
 8007c9a:	9f05      	ldr	r7, [sp, #20]
 8007c9c:	4b9a      	ldr	r3, [pc, #616]	@ (8007f08 <_dtoa_r+0x2d8>)
 8007c9e:	bfbc      	itt	lt
 8007ca0:	2201      	movlt	r2, #1
 8007ca2:	6032      	strlt	r2, [r6, #0]
 8007ca4:	43bb      	bics	r3, r7
 8007ca6:	d112      	bne.n	8007cce <_dtoa_r+0x9e>
 8007ca8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007caa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007cae:	6013      	str	r3, [r2, #0]
 8007cb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007cb4:	4323      	orrs	r3, r4
 8007cb6:	f000 855a 	beq.w	800876e <_dtoa_r+0xb3e>
 8007cba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cbc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007f1c <_dtoa_r+0x2ec>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 855c 	beq.w	800877e <_dtoa_r+0xb4e>
 8007cc6:	f10a 0303 	add.w	r3, sl, #3
 8007cca:	f000 bd56 	b.w	800877a <_dtoa_r+0xb4a>
 8007cce:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	ec51 0b17 	vmov	r0, r1, d7
 8007cd8:	2300      	movs	r3, #0
 8007cda:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007cde:	f7f8 fefb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ce2:	4680      	mov	r8, r0
 8007ce4:	b158      	cbz	r0, 8007cfe <_dtoa_r+0xce>
 8007ce6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007ce8:	2301      	movs	r3, #1
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cee:	b113      	cbz	r3, 8007cf6 <_dtoa_r+0xc6>
 8007cf0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007cf2:	4b86      	ldr	r3, [pc, #536]	@ (8007f0c <_dtoa_r+0x2dc>)
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007f20 <_dtoa_r+0x2f0>
 8007cfa:	f000 bd40 	b.w	800877e <_dtoa_r+0xb4e>
 8007cfe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007d02:	aa14      	add	r2, sp, #80	@ 0x50
 8007d04:	a915      	add	r1, sp, #84	@ 0x54
 8007d06:	4648      	mov	r0, r9
 8007d08:	f001 f984 	bl	8009014 <__d2b>
 8007d0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d10:	9002      	str	r0, [sp, #8]
 8007d12:	2e00      	cmp	r6, #0
 8007d14:	d078      	beq.n	8007e08 <_dtoa_r+0x1d8>
 8007d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d18:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007d2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d30:	4619      	mov	r1, r3
 8007d32:	2200      	movs	r2, #0
 8007d34:	4b76      	ldr	r3, [pc, #472]	@ (8007f10 <_dtoa_r+0x2e0>)
 8007d36:	f7f8 faaf 	bl	8000298 <__aeabi_dsub>
 8007d3a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007ee8 <_dtoa_r+0x2b8>)
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	f7f8 fc62 	bl	8000608 <__aeabi_dmul>
 8007d44:	a36a      	add	r3, pc, #424	@ (adr r3, 8007ef0 <_dtoa_r+0x2c0>)
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	f7f8 faa7 	bl	800029c <__adddf3>
 8007d4e:	4604      	mov	r4, r0
 8007d50:	4630      	mov	r0, r6
 8007d52:	460d      	mov	r5, r1
 8007d54:	f7f8 fbee 	bl	8000534 <__aeabi_i2d>
 8007d58:	a367      	add	r3, pc, #412	@ (adr r3, 8007ef8 <_dtoa_r+0x2c8>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f7f8 fc53 	bl	8000608 <__aeabi_dmul>
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	4620      	mov	r0, r4
 8007d68:	4629      	mov	r1, r5
 8007d6a:	f7f8 fa97 	bl	800029c <__adddf3>
 8007d6e:	4604      	mov	r4, r0
 8007d70:	460d      	mov	r5, r1
 8007d72:	f7f8 fef9 	bl	8000b68 <__aeabi_d2iz>
 8007d76:	2200      	movs	r2, #0
 8007d78:	4607      	mov	r7, r0
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	4629      	mov	r1, r5
 8007d80:	f7f8 feb4 	bl	8000aec <__aeabi_dcmplt>
 8007d84:	b140      	cbz	r0, 8007d98 <_dtoa_r+0x168>
 8007d86:	4638      	mov	r0, r7
 8007d88:	f7f8 fbd4 	bl	8000534 <__aeabi_i2d>
 8007d8c:	4622      	mov	r2, r4
 8007d8e:	462b      	mov	r3, r5
 8007d90:	f7f8 fea2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d94:	b900      	cbnz	r0, 8007d98 <_dtoa_r+0x168>
 8007d96:	3f01      	subs	r7, #1
 8007d98:	2f16      	cmp	r7, #22
 8007d9a:	d852      	bhi.n	8007e42 <_dtoa_r+0x212>
 8007d9c:	4b5d      	ldr	r3, [pc, #372]	@ (8007f14 <_dtoa_r+0x2e4>)
 8007d9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007daa:	f7f8 fe9f 	bl	8000aec <__aeabi_dcmplt>
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d049      	beq.n	8007e46 <_dtoa_r+0x216>
 8007db2:	3f01      	subs	r7, #1
 8007db4:	2300      	movs	r3, #0
 8007db6:	9310      	str	r3, [sp, #64]	@ 0x40
 8007db8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007dba:	1b9b      	subs	r3, r3, r6
 8007dbc:	1e5a      	subs	r2, r3, #1
 8007dbe:	bf45      	ittet	mi
 8007dc0:	f1c3 0301 	rsbmi	r3, r3, #1
 8007dc4:	9300      	strmi	r3, [sp, #0]
 8007dc6:	2300      	movpl	r3, #0
 8007dc8:	2300      	movmi	r3, #0
 8007dca:	9206      	str	r2, [sp, #24]
 8007dcc:	bf54      	ite	pl
 8007dce:	9300      	strpl	r3, [sp, #0]
 8007dd0:	9306      	strmi	r3, [sp, #24]
 8007dd2:	2f00      	cmp	r7, #0
 8007dd4:	db39      	blt.n	8007e4a <_dtoa_r+0x21a>
 8007dd6:	9b06      	ldr	r3, [sp, #24]
 8007dd8:	970d      	str	r7, [sp, #52]	@ 0x34
 8007dda:	443b      	add	r3, r7
 8007ddc:	9306      	str	r3, [sp, #24]
 8007dde:	2300      	movs	r3, #0
 8007de0:	9308      	str	r3, [sp, #32]
 8007de2:	9b07      	ldr	r3, [sp, #28]
 8007de4:	2b09      	cmp	r3, #9
 8007de6:	d863      	bhi.n	8007eb0 <_dtoa_r+0x280>
 8007de8:	2b05      	cmp	r3, #5
 8007dea:	bfc4      	itt	gt
 8007dec:	3b04      	subgt	r3, #4
 8007dee:	9307      	strgt	r3, [sp, #28]
 8007df0:	9b07      	ldr	r3, [sp, #28]
 8007df2:	f1a3 0302 	sub.w	r3, r3, #2
 8007df6:	bfcc      	ite	gt
 8007df8:	2400      	movgt	r4, #0
 8007dfa:	2401      	movle	r4, #1
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d863      	bhi.n	8007ec8 <_dtoa_r+0x298>
 8007e00:	e8df f003 	tbb	[pc, r3]
 8007e04:	2b375452 	.word	0x2b375452
 8007e08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007e0c:	441e      	add	r6, r3
 8007e0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	bfc1      	itttt	gt
 8007e16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e1a:	409f      	lslgt	r7, r3
 8007e1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e20:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e24:	bfd6      	itet	le
 8007e26:	f1c3 0320 	rsble	r3, r3, #32
 8007e2a:	ea47 0003 	orrgt.w	r0, r7, r3
 8007e2e:	fa04 f003 	lslle.w	r0, r4, r3
 8007e32:	f7f8 fb6f 	bl	8000514 <__aeabi_ui2d>
 8007e36:	2201      	movs	r2, #1
 8007e38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007e3c:	3e01      	subs	r6, #1
 8007e3e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007e40:	e776      	b.n	8007d30 <_dtoa_r+0x100>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e7b7      	b.n	8007db6 <_dtoa_r+0x186>
 8007e46:	9010      	str	r0, [sp, #64]	@ 0x40
 8007e48:	e7b6      	b.n	8007db8 <_dtoa_r+0x188>
 8007e4a:	9b00      	ldr	r3, [sp, #0]
 8007e4c:	1bdb      	subs	r3, r3, r7
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	427b      	negs	r3, r7
 8007e52:	9308      	str	r3, [sp, #32]
 8007e54:	2300      	movs	r3, #0
 8007e56:	930d      	str	r3, [sp, #52]	@ 0x34
 8007e58:	e7c3      	b.n	8007de2 <_dtoa_r+0x1b2>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e60:	eb07 0b03 	add.w	fp, r7, r3
 8007e64:	f10b 0301 	add.w	r3, fp, #1
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	9303      	str	r3, [sp, #12]
 8007e6c:	bfb8      	it	lt
 8007e6e:	2301      	movlt	r3, #1
 8007e70:	e006      	b.n	8007e80 <_dtoa_r+0x250>
 8007e72:	2301      	movs	r3, #1
 8007e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	dd28      	ble.n	8007ece <_dtoa_r+0x29e>
 8007e7c:	469b      	mov	fp, r3
 8007e7e:	9303      	str	r3, [sp, #12]
 8007e80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007e84:	2100      	movs	r1, #0
 8007e86:	2204      	movs	r2, #4
 8007e88:	f102 0514 	add.w	r5, r2, #20
 8007e8c:	429d      	cmp	r5, r3
 8007e8e:	d926      	bls.n	8007ede <_dtoa_r+0x2ae>
 8007e90:	6041      	str	r1, [r0, #4]
 8007e92:	4648      	mov	r0, r9
 8007e94:	f000 fd9c 	bl	80089d0 <_Balloc>
 8007e98:	4682      	mov	sl, r0
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d142      	bne.n	8007f24 <_dtoa_r+0x2f4>
 8007e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8007f18 <_dtoa_r+0x2e8>)
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	f240 11af 	movw	r1, #431	@ 0x1af
 8007ea6:	e6da      	b.n	8007c5e <_dtoa_r+0x2e>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	e7e3      	b.n	8007e74 <_dtoa_r+0x244>
 8007eac:	2300      	movs	r3, #0
 8007eae:	e7d5      	b.n	8007e5c <_dtoa_r+0x22c>
 8007eb0:	2401      	movs	r4, #1
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	9307      	str	r3, [sp, #28]
 8007eb6:	9409      	str	r4, [sp, #36]	@ 0x24
 8007eb8:	f04f 3bff 	mov.w	fp, #4294967295
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f8cd b00c 	str.w	fp, [sp, #12]
 8007ec2:	2312      	movs	r3, #18
 8007ec4:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ec6:	e7db      	b.n	8007e80 <_dtoa_r+0x250>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ecc:	e7f4      	b.n	8007eb8 <_dtoa_r+0x288>
 8007ece:	f04f 0b01 	mov.w	fp, #1
 8007ed2:	f8cd b00c 	str.w	fp, [sp, #12]
 8007ed6:	465b      	mov	r3, fp
 8007ed8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007edc:	e7d0      	b.n	8007e80 <_dtoa_r+0x250>
 8007ede:	3101      	adds	r1, #1
 8007ee0:	0052      	lsls	r2, r2, #1
 8007ee2:	e7d1      	b.n	8007e88 <_dtoa_r+0x258>
 8007ee4:	f3af 8000 	nop.w
 8007ee8:	636f4361 	.word	0x636f4361
 8007eec:	3fd287a7 	.word	0x3fd287a7
 8007ef0:	8b60c8b3 	.word	0x8b60c8b3
 8007ef4:	3fc68a28 	.word	0x3fc68a28
 8007ef8:	509f79fb 	.word	0x509f79fb
 8007efc:	3fd34413 	.word	0x3fd34413
 8007f00:	08009c85 	.word	0x08009c85
 8007f04:	08009c9c 	.word	0x08009c9c
 8007f08:	7ff00000 	.word	0x7ff00000
 8007f0c:	08009c55 	.word	0x08009c55
 8007f10:	3ff80000 	.word	0x3ff80000
 8007f14:	08009df0 	.word	0x08009df0
 8007f18:	08009cf4 	.word	0x08009cf4
 8007f1c:	08009c81 	.word	0x08009c81
 8007f20:	08009c54 	.word	0x08009c54
 8007f24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f28:	6018      	str	r0, [r3, #0]
 8007f2a:	9b03      	ldr	r3, [sp, #12]
 8007f2c:	2b0e      	cmp	r3, #14
 8007f2e:	f200 80a1 	bhi.w	8008074 <_dtoa_r+0x444>
 8007f32:	2c00      	cmp	r4, #0
 8007f34:	f000 809e 	beq.w	8008074 <_dtoa_r+0x444>
 8007f38:	2f00      	cmp	r7, #0
 8007f3a:	dd33      	ble.n	8007fa4 <_dtoa_r+0x374>
 8007f3c:	4b9c      	ldr	r3, [pc, #624]	@ (80081b0 <_dtoa_r+0x580>)
 8007f3e:	f007 020f 	and.w	r2, r7, #15
 8007f42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f46:	ed93 7b00 	vldr	d7, [r3]
 8007f4a:	05f8      	lsls	r0, r7, #23
 8007f4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007f50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007f54:	d516      	bpl.n	8007f84 <_dtoa_r+0x354>
 8007f56:	4b97      	ldr	r3, [pc, #604]	@ (80081b4 <_dtoa_r+0x584>)
 8007f58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f60:	f7f8 fc7c 	bl	800085c <__aeabi_ddiv>
 8007f64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f68:	f004 040f 	and.w	r4, r4, #15
 8007f6c:	2603      	movs	r6, #3
 8007f6e:	4d91      	ldr	r5, [pc, #580]	@ (80081b4 <_dtoa_r+0x584>)
 8007f70:	b954      	cbnz	r4, 8007f88 <_dtoa_r+0x358>
 8007f72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f7a:	f7f8 fc6f 	bl	800085c <__aeabi_ddiv>
 8007f7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f82:	e028      	b.n	8007fd6 <_dtoa_r+0x3a6>
 8007f84:	2602      	movs	r6, #2
 8007f86:	e7f2      	b.n	8007f6e <_dtoa_r+0x33e>
 8007f88:	07e1      	lsls	r1, r4, #31
 8007f8a:	d508      	bpl.n	8007f9e <_dtoa_r+0x36e>
 8007f8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007f90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f94:	f7f8 fb38 	bl	8000608 <__aeabi_dmul>
 8007f98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f9c:	3601      	adds	r6, #1
 8007f9e:	1064      	asrs	r4, r4, #1
 8007fa0:	3508      	adds	r5, #8
 8007fa2:	e7e5      	b.n	8007f70 <_dtoa_r+0x340>
 8007fa4:	f000 80af 	beq.w	8008106 <_dtoa_r+0x4d6>
 8007fa8:	427c      	negs	r4, r7
 8007faa:	4b81      	ldr	r3, [pc, #516]	@ (80081b0 <_dtoa_r+0x580>)
 8007fac:	4d81      	ldr	r5, [pc, #516]	@ (80081b4 <_dtoa_r+0x584>)
 8007fae:	f004 020f 	and.w	r2, r4, #15
 8007fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007fbe:	f7f8 fb23 	bl	8000608 <__aeabi_dmul>
 8007fc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fc6:	1124      	asrs	r4, r4, #4
 8007fc8:	2300      	movs	r3, #0
 8007fca:	2602      	movs	r6, #2
 8007fcc:	2c00      	cmp	r4, #0
 8007fce:	f040 808f 	bne.w	80080f0 <_dtoa_r+0x4c0>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1d3      	bne.n	8007f7e <_dtoa_r+0x34e>
 8007fd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007fd8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 8094 	beq.w	800810a <_dtoa_r+0x4da>
 8007fe2:	4b75      	ldr	r3, [pc, #468]	@ (80081b8 <_dtoa_r+0x588>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	4629      	mov	r1, r5
 8007fea:	f7f8 fd7f 	bl	8000aec <__aeabi_dcmplt>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	f000 808b 	beq.w	800810a <_dtoa_r+0x4da>
 8007ff4:	9b03      	ldr	r3, [sp, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 8087 	beq.w	800810a <_dtoa_r+0x4da>
 8007ffc:	f1bb 0f00 	cmp.w	fp, #0
 8008000:	dd34      	ble.n	800806c <_dtoa_r+0x43c>
 8008002:	4620      	mov	r0, r4
 8008004:	4b6d      	ldr	r3, [pc, #436]	@ (80081bc <_dtoa_r+0x58c>)
 8008006:	2200      	movs	r2, #0
 8008008:	4629      	mov	r1, r5
 800800a:	f7f8 fafd 	bl	8000608 <__aeabi_dmul>
 800800e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008012:	f107 38ff 	add.w	r8, r7, #4294967295
 8008016:	3601      	adds	r6, #1
 8008018:	465c      	mov	r4, fp
 800801a:	4630      	mov	r0, r6
 800801c:	f7f8 fa8a 	bl	8000534 <__aeabi_i2d>
 8008020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008024:	f7f8 faf0 	bl	8000608 <__aeabi_dmul>
 8008028:	4b65      	ldr	r3, [pc, #404]	@ (80081c0 <_dtoa_r+0x590>)
 800802a:	2200      	movs	r2, #0
 800802c:	f7f8 f936 	bl	800029c <__adddf3>
 8008030:	4605      	mov	r5, r0
 8008032:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008036:	2c00      	cmp	r4, #0
 8008038:	d16a      	bne.n	8008110 <_dtoa_r+0x4e0>
 800803a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800803e:	4b61      	ldr	r3, [pc, #388]	@ (80081c4 <_dtoa_r+0x594>)
 8008040:	2200      	movs	r2, #0
 8008042:	f7f8 f929 	bl	8000298 <__aeabi_dsub>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800804e:	462a      	mov	r2, r5
 8008050:	4633      	mov	r3, r6
 8008052:	f7f8 fd69 	bl	8000b28 <__aeabi_dcmpgt>
 8008056:	2800      	cmp	r0, #0
 8008058:	f040 8298 	bne.w	800858c <_dtoa_r+0x95c>
 800805c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008060:	462a      	mov	r2, r5
 8008062:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008066:	f7f8 fd41 	bl	8000aec <__aeabi_dcmplt>
 800806a:	bb38      	cbnz	r0, 80080bc <_dtoa_r+0x48c>
 800806c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008070:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008074:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008076:	2b00      	cmp	r3, #0
 8008078:	f2c0 8157 	blt.w	800832a <_dtoa_r+0x6fa>
 800807c:	2f0e      	cmp	r7, #14
 800807e:	f300 8154 	bgt.w	800832a <_dtoa_r+0x6fa>
 8008082:	4b4b      	ldr	r3, [pc, #300]	@ (80081b0 <_dtoa_r+0x580>)
 8008084:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008088:	ed93 7b00 	vldr	d7, [r3]
 800808c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800808e:	2b00      	cmp	r3, #0
 8008090:	ed8d 7b00 	vstr	d7, [sp]
 8008094:	f280 80e5 	bge.w	8008262 <_dtoa_r+0x632>
 8008098:	9b03      	ldr	r3, [sp, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	f300 80e1 	bgt.w	8008262 <_dtoa_r+0x632>
 80080a0:	d10c      	bne.n	80080bc <_dtoa_r+0x48c>
 80080a2:	4b48      	ldr	r3, [pc, #288]	@ (80081c4 <_dtoa_r+0x594>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	ec51 0b17 	vmov	r0, r1, d7
 80080aa:	f7f8 faad 	bl	8000608 <__aeabi_dmul>
 80080ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080b2:	f7f8 fd2f 	bl	8000b14 <__aeabi_dcmpge>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	f000 8266 	beq.w	8008588 <_dtoa_r+0x958>
 80080bc:	2400      	movs	r4, #0
 80080be:	4625      	mov	r5, r4
 80080c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80080c2:	4656      	mov	r6, sl
 80080c4:	ea6f 0803 	mvn.w	r8, r3
 80080c8:	2700      	movs	r7, #0
 80080ca:	4621      	mov	r1, r4
 80080cc:	4648      	mov	r0, r9
 80080ce:	f000 fcbf 	bl	8008a50 <_Bfree>
 80080d2:	2d00      	cmp	r5, #0
 80080d4:	f000 80bd 	beq.w	8008252 <_dtoa_r+0x622>
 80080d8:	b12f      	cbz	r7, 80080e6 <_dtoa_r+0x4b6>
 80080da:	42af      	cmp	r7, r5
 80080dc:	d003      	beq.n	80080e6 <_dtoa_r+0x4b6>
 80080de:	4639      	mov	r1, r7
 80080e0:	4648      	mov	r0, r9
 80080e2:	f000 fcb5 	bl	8008a50 <_Bfree>
 80080e6:	4629      	mov	r1, r5
 80080e8:	4648      	mov	r0, r9
 80080ea:	f000 fcb1 	bl	8008a50 <_Bfree>
 80080ee:	e0b0      	b.n	8008252 <_dtoa_r+0x622>
 80080f0:	07e2      	lsls	r2, r4, #31
 80080f2:	d505      	bpl.n	8008100 <_dtoa_r+0x4d0>
 80080f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080f8:	f7f8 fa86 	bl	8000608 <__aeabi_dmul>
 80080fc:	3601      	adds	r6, #1
 80080fe:	2301      	movs	r3, #1
 8008100:	1064      	asrs	r4, r4, #1
 8008102:	3508      	adds	r5, #8
 8008104:	e762      	b.n	8007fcc <_dtoa_r+0x39c>
 8008106:	2602      	movs	r6, #2
 8008108:	e765      	b.n	8007fd6 <_dtoa_r+0x3a6>
 800810a:	9c03      	ldr	r4, [sp, #12]
 800810c:	46b8      	mov	r8, r7
 800810e:	e784      	b.n	800801a <_dtoa_r+0x3ea>
 8008110:	4b27      	ldr	r3, [pc, #156]	@ (80081b0 <_dtoa_r+0x580>)
 8008112:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008114:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008118:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800811c:	4454      	add	r4, sl
 800811e:	2900      	cmp	r1, #0
 8008120:	d054      	beq.n	80081cc <_dtoa_r+0x59c>
 8008122:	4929      	ldr	r1, [pc, #164]	@ (80081c8 <_dtoa_r+0x598>)
 8008124:	2000      	movs	r0, #0
 8008126:	f7f8 fb99 	bl	800085c <__aeabi_ddiv>
 800812a:	4633      	mov	r3, r6
 800812c:	462a      	mov	r2, r5
 800812e:	f7f8 f8b3 	bl	8000298 <__aeabi_dsub>
 8008132:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008136:	4656      	mov	r6, sl
 8008138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800813c:	f7f8 fd14 	bl	8000b68 <__aeabi_d2iz>
 8008140:	4605      	mov	r5, r0
 8008142:	f7f8 f9f7 	bl	8000534 <__aeabi_i2d>
 8008146:	4602      	mov	r2, r0
 8008148:	460b      	mov	r3, r1
 800814a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800814e:	f7f8 f8a3 	bl	8000298 <__aeabi_dsub>
 8008152:	3530      	adds	r5, #48	@ 0x30
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800815c:	f806 5b01 	strb.w	r5, [r6], #1
 8008160:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008164:	f7f8 fcc2 	bl	8000aec <__aeabi_dcmplt>
 8008168:	2800      	cmp	r0, #0
 800816a:	d172      	bne.n	8008252 <_dtoa_r+0x622>
 800816c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008170:	4911      	ldr	r1, [pc, #68]	@ (80081b8 <_dtoa_r+0x588>)
 8008172:	2000      	movs	r0, #0
 8008174:	f7f8 f890 	bl	8000298 <__aeabi_dsub>
 8008178:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800817c:	f7f8 fcb6 	bl	8000aec <__aeabi_dcmplt>
 8008180:	2800      	cmp	r0, #0
 8008182:	f040 80b4 	bne.w	80082ee <_dtoa_r+0x6be>
 8008186:	42a6      	cmp	r6, r4
 8008188:	f43f af70 	beq.w	800806c <_dtoa_r+0x43c>
 800818c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008190:	4b0a      	ldr	r3, [pc, #40]	@ (80081bc <_dtoa_r+0x58c>)
 8008192:	2200      	movs	r2, #0
 8008194:	f7f8 fa38 	bl	8000608 <__aeabi_dmul>
 8008198:	4b08      	ldr	r3, [pc, #32]	@ (80081bc <_dtoa_r+0x58c>)
 800819a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800819e:	2200      	movs	r2, #0
 80081a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081a4:	f7f8 fa30 	bl	8000608 <__aeabi_dmul>
 80081a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081ac:	e7c4      	b.n	8008138 <_dtoa_r+0x508>
 80081ae:	bf00      	nop
 80081b0:	08009df0 	.word	0x08009df0
 80081b4:	08009dc8 	.word	0x08009dc8
 80081b8:	3ff00000 	.word	0x3ff00000
 80081bc:	40240000 	.word	0x40240000
 80081c0:	401c0000 	.word	0x401c0000
 80081c4:	40140000 	.word	0x40140000
 80081c8:	3fe00000 	.word	0x3fe00000
 80081cc:	4631      	mov	r1, r6
 80081ce:	4628      	mov	r0, r5
 80081d0:	f7f8 fa1a 	bl	8000608 <__aeabi_dmul>
 80081d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80081d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80081da:	4656      	mov	r6, sl
 80081dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081e0:	f7f8 fcc2 	bl	8000b68 <__aeabi_d2iz>
 80081e4:	4605      	mov	r5, r0
 80081e6:	f7f8 f9a5 	bl	8000534 <__aeabi_i2d>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081f2:	f7f8 f851 	bl	8000298 <__aeabi_dsub>
 80081f6:	3530      	adds	r5, #48	@ 0x30
 80081f8:	f806 5b01 	strb.w	r5, [r6], #1
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	42a6      	cmp	r6, r4
 8008202:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008206:	f04f 0200 	mov.w	r2, #0
 800820a:	d124      	bne.n	8008256 <_dtoa_r+0x626>
 800820c:	4baf      	ldr	r3, [pc, #700]	@ (80084cc <_dtoa_r+0x89c>)
 800820e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008212:	f7f8 f843 	bl	800029c <__adddf3>
 8008216:	4602      	mov	r2, r0
 8008218:	460b      	mov	r3, r1
 800821a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800821e:	f7f8 fc83 	bl	8000b28 <__aeabi_dcmpgt>
 8008222:	2800      	cmp	r0, #0
 8008224:	d163      	bne.n	80082ee <_dtoa_r+0x6be>
 8008226:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800822a:	49a8      	ldr	r1, [pc, #672]	@ (80084cc <_dtoa_r+0x89c>)
 800822c:	2000      	movs	r0, #0
 800822e:	f7f8 f833 	bl	8000298 <__aeabi_dsub>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800823a:	f7f8 fc57 	bl	8000aec <__aeabi_dcmplt>
 800823e:	2800      	cmp	r0, #0
 8008240:	f43f af14 	beq.w	800806c <_dtoa_r+0x43c>
 8008244:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008246:	1e73      	subs	r3, r6, #1
 8008248:	9313      	str	r3, [sp, #76]	@ 0x4c
 800824a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800824e:	2b30      	cmp	r3, #48	@ 0x30
 8008250:	d0f8      	beq.n	8008244 <_dtoa_r+0x614>
 8008252:	4647      	mov	r7, r8
 8008254:	e03b      	b.n	80082ce <_dtoa_r+0x69e>
 8008256:	4b9e      	ldr	r3, [pc, #632]	@ (80084d0 <_dtoa_r+0x8a0>)
 8008258:	f7f8 f9d6 	bl	8000608 <__aeabi_dmul>
 800825c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008260:	e7bc      	b.n	80081dc <_dtoa_r+0x5ac>
 8008262:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008266:	4656      	mov	r6, sl
 8008268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800826c:	4620      	mov	r0, r4
 800826e:	4629      	mov	r1, r5
 8008270:	f7f8 faf4 	bl	800085c <__aeabi_ddiv>
 8008274:	f7f8 fc78 	bl	8000b68 <__aeabi_d2iz>
 8008278:	4680      	mov	r8, r0
 800827a:	f7f8 f95b 	bl	8000534 <__aeabi_i2d>
 800827e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008282:	f7f8 f9c1 	bl	8000608 <__aeabi_dmul>
 8008286:	4602      	mov	r2, r0
 8008288:	460b      	mov	r3, r1
 800828a:	4620      	mov	r0, r4
 800828c:	4629      	mov	r1, r5
 800828e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008292:	f7f8 f801 	bl	8000298 <__aeabi_dsub>
 8008296:	f806 4b01 	strb.w	r4, [r6], #1
 800829a:	9d03      	ldr	r5, [sp, #12]
 800829c:	eba6 040a 	sub.w	r4, r6, sl
 80082a0:	42a5      	cmp	r5, r4
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	d133      	bne.n	8008310 <_dtoa_r+0x6e0>
 80082a8:	f7f7 fff8 	bl	800029c <__adddf3>
 80082ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082b0:	4604      	mov	r4, r0
 80082b2:	460d      	mov	r5, r1
 80082b4:	f7f8 fc38 	bl	8000b28 <__aeabi_dcmpgt>
 80082b8:	b9c0      	cbnz	r0, 80082ec <_dtoa_r+0x6bc>
 80082ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082be:	4620      	mov	r0, r4
 80082c0:	4629      	mov	r1, r5
 80082c2:	f7f8 fc09 	bl	8000ad8 <__aeabi_dcmpeq>
 80082c6:	b110      	cbz	r0, 80082ce <_dtoa_r+0x69e>
 80082c8:	f018 0f01 	tst.w	r8, #1
 80082cc:	d10e      	bne.n	80082ec <_dtoa_r+0x6bc>
 80082ce:	9902      	ldr	r1, [sp, #8]
 80082d0:	4648      	mov	r0, r9
 80082d2:	f000 fbbd 	bl	8008a50 <_Bfree>
 80082d6:	2300      	movs	r3, #0
 80082d8:	7033      	strb	r3, [r6, #0]
 80082da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80082dc:	3701      	adds	r7, #1
 80082de:	601f      	str	r7, [r3, #0]
 80082e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 824b 	beq.w	800877e <_dtoa_r+0xb4e>
 80082e8:	601e      	str	r6, [r3, #0]
 80082ea:	e248      	b.n	800877e <_dtoa_r+0xb4e>
 80082ec:	46b8      	mov	r8, r7
 80082ee:	4633      	mov	r3, r6
 80082f0:	461e      	mov	r6, r3
 80082f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082f6:	2a39      	cmp	r2, #57	@ 0x39
 80082f8:	d106      	bne.n	8008308 <_dtoa_r+0x6d8>
 80082fa:	459a      	cmp	sl, r3
 80082fc:	d1f8      	bne.n	80082f0 <_dtoa_r+0x6c0>
 80082fe:	2230      	movs	r2, #48	@ 0x30
 8008300:	f108 0801 	add.w	r8, r8, #1
 8008304:	f88a 2000 	strb.w	r2, [sl]
 8008308:	781a      	ldrb	r2, [r3, #0]
 800830a:	3201      	adds	r2, #1
 800830c:	701a      	strb	r2, [r3, #0]
 800830e:	e7a0      	b.n	8008252 <_dtoa_r+0x622>
 8008310:	4b6f      	ldr	r3, [pc, #444]	@ (80084d0 <_dtoa_r+0x8a0>)
 8008312:	2200      	movs	r2, #0
 8008314:	f7f8 f978 	bl	8000608 <__aeabi_dmul>
 8008318:	2200      	movs	r2, #0
 800831a:	2300      	movs	r3, #0
 800831c:	4604      	mov	r4, r0
 800831e:	460d      	mov	r5, r1
 8008320:	f7f8 fbda 	bl	8000ad8 <__aeabi_dcmpeq>
 8008324:	2800      	cmp	r0, #0
 8008326:	d09f      	beq.n	8008268 <_dtoa_r+0x638>
 8008328:	e7d1      	b.n	80082ce <_dtoa_r+0x69e>
 800832a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800832c:	2a00      	cmp	r2, #0
 800832e:	f000 80ea 	beq.w	8008506 <_dtoa_r+0x8d6>
 8008332:	9a07      	ldr	r2, [sp, #28]
 8008334:	2a01      	cmp	r2, #1
 8008336:	f300 80cd 	bgt.w	80084d4 <_dtoa_r+0x8a4>
 800833a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800833c:	2a00      	cmp	r2, #0
 800833e:	f000 80c1 	beq.w	80084c4 <_dtoa_r+0x894>
 8008342:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008346:	9c08      	ldr	r4, [sp, #32]
 8008348:	9e00      	ldr	r6, [sp, #0]
 800834a:	9a00      	ldr	r2, [sp, #0]
 800834c:	441a      	add	r2, r3
 800834e:	9200      	str	r2, [sp, #0]
 8008350:	9a06      	ldr	r2, [sp, #24]
 8008352:	2101      	movs	r1, #1
 8008354:	441a      	add	r2, r3
 8008356:	4648      	mov	r0, r9
 8008358:	9206      	str	r2, [sp, #24]
 800835a:	f000 fc2d 	bl	8008bb8 <__i2b>
 800835e:	4605      	mov	r5, r0
 8008360:	b166      	cbz	r6, 800837c <_dtoa_r+0x74c>
 8008362:	9b06      	ldr	r3, [sp, #24]
 8008364:	2b00      	cmp	r3, #0
 8008366:	dd09      	ble.n	800837c <_dtoa_r+0x74c>
 8008368:	42b3      	cmp	r3, r6
 800836a:	9a00      	ldr	r2, [sp, #0]
 800836c:	bfa8      	it	ge
 800836e:	4633      	movge	r3, r6
 8008370:	1ad2      	subs	r2, r2, r3
 8008372:	9200      	str	r2, [sp, #0]
 8008374:	9a06      	ldr	r2, [sp, #24]
 8008376:	1af6      	subs	r6, r6, r3
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	9306      	str	r3, [sp, #24]
 800837c:	9b08      	ldr	r3, [sp, #32]
 800837e:	b30b      	cbz	r3, 80083c4 <_dtoa_r+0x794>
 8008380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 80c6 	beq.w	8008514 <_dtoa_r+0x8e4>
 8008388:	2c00      	cmp	r4, #0
 800838a:	f000 80c0 	beq.w	800850e <_dtoa_r+0x8de>
 800838e:	4629      	mov	r1, r5
 8008390:	4622      	mov	r2, r4
 8008392:	4648      	mov	r0, r9
 8008394:	f000 fcc8 	bl	8008d28 <__pow5mult>
 8008398:	9a02      	ldr	r2, [sp, #8]
 800839a:	4601      	mov	r1, r0
 800839c:	4605      	mov	r5, r0
 800839e:	4648      	mov	r0, r9
 80083a0:	f000 fc20 	bl	8008be4 <__multiply>
 80083a4:	9902      	ldr	r1, [sp, #8]
 80083a6:	4680      	mov	r8, r0
 80083a8:	4648      	mov	r0, r9
 80083aa:	f000 fb51 	bl	8008a50 <_Bfree>
 80083ae:	9b08      	ldr	r3, [sp, #32]
 80083b0:	1b1b      	subs	r3, r3, r4
 80083b2:	9308      	str	r3, [sp, #32]
 80083b4:	f000 80b1 	beq.w	800851a <_dtoa_r+0x8ea>
 80083b8:	9a08      	ldr	r2, [sp, #32]
 80083ba:	4641      	mov	r1, r8
 80083bc:	4648      	mov	r0, r9
 80083be:	f000 fcb3 	bl	8008d28 <__pow5mult>
 80083c2:	9002      	str	r0, [sp, #8]
 80083c4:	2101      	movs	r1, #1
 80083c6:	4648      	mov	r0, r9
 80083c8:	f000 fbf6 	bl	8008bb8 <__i2b>
 80083cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083ce:	4604      	mov	r4, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 81d8 	beq.w	8008786 <_dtoa_r+0xb56>
 80083d6:	461a      	mov	r2, r3
 80083d8:	4601      	mov	r1, r0
 80083da:	4648      	mov	r0, r9
 80083dc:	f000 fca4 	bl	8008d28 <__pow5mult>
 80083e0:	9b07      	ldr	r3, [sp, #28]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	4604      	mov	r4, r0
 80083e6:	f300 809f 	bgt.w	8008528 <_dtoa_r+0x8f8>
 80083ea:	9b04      	ldr	r3, [sp, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f040 8097 	bne.w	8008520 <_dtoa_r+0x8f0>
 80083f2:	9b05      	ldr	r3, [sp, #20]
 80083f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f040 8093 	bne.w	8008524 <_dtoa_r+0x8f4>
 80083fe:	9b05      	ldr	r3, [sp, #20]
 8008400:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008404:	0d1b      	lsrs	r3, r3, #20
 8008406:	051b      	lsls	r3, r3, #20
 8008408:	b133      	cbz	r3, 8008418 <_dtoa_r+0x7e8>
 800840a:	9b00      	ldr	r3, [sp, #0]
 800840c:	3301      	adds	r3, #1
 800840e:	9300      	str	r3, [sp, #0]
 8008410:	9b06      	ldr	r3, [sp, #24]
 8008412:	3301      	adds	r3, #1
 8008414:	9306      	str	r3, [sp, #24]
 8008416:	2301      	movs	r3, #1
 8008418:	9308      	str	r3, [sp, #32]
 800841a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 81b8 	beq.w	8008792 <_dtoa_r+0xb62>
 8008422:	6923      	ldr	r3, [r4, #16]
 8008424:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008428:	6918      	ldr	r0, [r3, #16]
 800842a:	f000 fb79 	bl	8008b20 <__hi0bits>
 800842e:	f1c0 0020 	rsb	r0, r0, #32
 8008432:	9b06      	ldr	r3, [sp, #24]
 8008434:	4418      	add	r0, r3
 8008436:	f010 001f 	ands.w	r0, r0, #31
 800843a:	f000 8082 	beq.w	8008542 <_dtoa_r+0x912>
 800843e:	f1c0 0320 	rsb	r3, r0, #32
 8008442:	2b04      	cmp	r3, #4
 8008444:	dd73      	ble.n	800852e <_dtoa_r+0x8fe>
 8008446:	9b00      	ldr	r3, [sp, #0]
 8008448:	f1c0 001c 	rsb	r0, r0, #28
 800844c:	4403      	add	r3, r0
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	9b06      	ldr	r3, [sp, #24]
 8008452:	4403      	add	r3, r0
 8008454:	4406      	add	r6, r0
 8008456:	9306      	str	r3, [sp, #24]
 8008458:	9b00      	ldr	r3, [sp, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	dd05      	ble.n	800846a <_dtoa_r+0x83a>
 800845e:	9902      	ldr	r1, [sp, #8]
 8008460:	461a      	mov	r2, r3
 8008462:	4648      	mov	r0, r9
 8008464:	f000 fcba 	bl	8008ddc <__lshift>
 8008468:	9002      	str	r0, [sp, #8]
 800846a:	9b06      	ldr	r3, [sp, #24]
 800846c:	2b00      	cmp	r3, #0
 800846e:	dd05      	ble.n	800847c <_dtoa_r+0x84c>
 8008470:	4621      	mov	r1, r4
 8008472:	461a      	mov	r2, r3
 8008474:	4648      	mov	r0, r9
 8008476:	f000 fcb1 	bl	8008ddc <__lshift>
 800847a:	4604      	mov	r4, r0
 800847c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800847e:	2b00      	cmp	r3, #0
 8008480:	d061      	beq.n	8008546 <_dtoa_r+0x916>
 8008482:	9802      	ldr	r0, [sp, #8]
 8008484:	4621      	mov	r1, r4
 8008486:	f000 fd15 	bl	8008eb4 <__mcmp>
 800848a:	2800      	cmp	r0, #0
 800848c:	da5b      	bge.n	8008546 <_dtoa_r+0x916>
 800848e:	2300      	movs	r3, #0
 8008490:	9902      	ldr	r1, [sp, #8]
 8008492:	220a      	movs	r2, #10
 8008494:	4648      	mov	r0, r9
 8008496:	f000 fafd 	bl	8008a94 <__multadd>
 800849a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800849c:	9002      	str	r0, [sp, #8]
 800849e:	f107 38ff 	add.w	r8, r7, #4294967295
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 8177 	beq.w	8008796 <_dtoa_r+0xb66>
 80084a8:	4629      	mov	r1, r5
 80084aa:	2300      	movs	r3, #0
 80084ac:	220a      	movs	r2, #10
 80084ae:	4648      	mov	r0, r9
 80084b0:	f000 faf0 	bl	8008a94 <__multadd>
 80084b4:	f1bb 0f00 	cmp.w	fp, #0
 80084b8:	4605      	mov	r5, r0
 80084ba:	dc6f      	bgt.n	800859c <_dtoa_r+0x96c>
 80084bc:	9b07      	ldr	r3, [sp, #28]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	dc49      	bgt.n	8008556 <_dtoa_r+0x926>
 80084c2:	e06b      	b.n	800859c <_dtoa_r+0x96c>
 80084c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80084c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80084ca:	e73c      	b.n	8008346 <_dtoa_r+0x716>
 80084cc:	3fe00000 	.word	0x3fe00000
 80084d0:	40240000 	.word	0x40240000
 80084d4:	9b03      	ldr	r3, [sp, #12]
 80084d6:	1e5c      	subs	r4, r3, #1
 80084d8:	9b08      	ldr	r3, [sp, #32]
 80084da:	42a3      	cmp	r3, r4
 80084dc:	db09      	blt.n	80084f2 <_dtoa_r+0x8c2>
 80084de:	1b1c      	subs	r4, r3, r4
 80084e0:	9b03      	ldr	r3, [sp, #12]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f6bf af30 	bge.w	8008348 <_dtoa_r+0x718>
 80084e8:	9b00      	ldr	r3, [sp, #0]
 80084ea:	9a03      	ldr	r2, [sp, #12]
 80084ec:	1a9e      	subs	r6, r3, r2
 80084ee:	2300      	movs	r3, #0
 80084f0:	e72b      	b.n	800834a <_dtoa_r+0x71a>
 80084f2:	9b08      	ldr	r3, [sp, #32]
 80084f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084f6:	9408      	str	r4, [sp, #32]
 80084f8:	1ae3      	subs	r3, r4, r3
 80084fa:	441a      	add	r2, r3
 80084fc:	9e00      	ldr	r6, [sp, #0]
 80084fe:	9b03      	ldr	r3, [sp, #12]
 8008500:	920d      	str	r2, [sp, #52]	@ 0x34
 8008502:	2400      	movs	r4, #0
 8008504:	e721      	b.n	800834a <_dtoa_r+0x71a>
 8008506:	9c08      	ldr	r4, [sp, #32]
 8008508:	9e00      	ldr	r6, [sp, #0]
 800850a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800850c:	e728      	b.n	8008360 <_dtoa_r+0x730>
 800850e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008512:	e751      	b.n	80083b8 <_dtoa_r+0x788>
 8008514:	9a08      	ldr	r2, [sp, #32]
 8008516:	9902      	ldr	r1, [sp, #8]
 8008518:	e750      	b.n	80083bc <_dtoa_r+0x78c>
 800851a:	f8cd 8008 	str.w	r8, [sp, #8]
 800851e:	e751      	b.n	80083c4 <_dtoa_r+0x794>
 8008520:	2300      	movs	r3, #0
 8008522:	e779      	b.n	8008418 <_dtoa_r+0x7e8>
 8008524:	9b04      	ldr	r3, [sp, #16]
 8008526:	e777      	b.n	8008418 <_dtoa_r+0x7e8>
 8008528:	2300      	movs	r3, #0
 800852a:	9308      	str	r3, [sp, #32]
 800852c:	e779      	b.n	8008422 <_dtoa_r+0x7f2>
 800852e:	d093      	beq.n	8008458 <_dtoa_r+0x828>
 8008530:	9a00      	ldr	r2, [sp, #0]
 8008532:	331c      	adds	r3, #28
 8008534:	441a      	add	r2, r3
 8008536:	9200      	str	r2, [sp, #0]
 8008538:	9a06      	ldr	r2, [sp, #24]
 800853a:	441a      	add	r2, r3
 800853c:	441e      	add	r6, r3
 800853e:	9206      	str	r2, [sp, #24]
 8008540:	e78a      	b.n	8008458 <_dtoa_r+0x828>
 8008542:	4603      	mov	r3, r0
 8008544:	e7f4      	b.n	8008530 <_dtoa_r+0x900>
 8008546:	9b03      	ldr	r3, [sp, #12]
 8008548:	2b00      	cmp	r3, #0
 800854a:	46b8      	mov	r8, r7
 800854c:	dc20      	bgt.n	8008590 <_dtoa_r+0x960>
 800854e:	469b      	mov	fp, r3
 8008550:	9b07      	ldr	r3, [sp, #28]
 8008552:	2b02      	cmp	r3, #2
 8008554:	dd1e      	ble.n	8008594 <_dtoa_r+0x964>
 8008556:	f1bb 0f00 	cmp.w	fp, #0
 800855a:	f47f adb1 	bne.w	80080c0 <_dtoa_r+0x490>
 800855e:	4621      	mov	r1, r4
 8008560:	465b      	mov	r3, fp
 8008562:	2205      	movs	r2, #5
 8008564:	4648      	mov	r0, r9
 8008566:	f000 fa95 	bl	8008a94 <__multadd>
 800856a:	4601      	mov	r1, r0
 800856c:	4604      	mov	r4, r0
 800856e:	9802      	ldr	r0, [sp, #8]
 8008570:	f000 fca0 	bl	8008eb4 <__mcmp>
 8008574:	2800      	cmp	r0, #0
 8008576:	f77f ada3 	ble.w	80080c0 <_dtoa_r+0x490>
 800857a:	4656      	mov	r6, sl
 800857c:	2331      	movs	r3, #49	@ 0x31
 800857e:	f806 3b01 	strb.w	r3, [r6], #1
 8008582:	f108 0801 	add.w	r8, r8, #1
 8008586:	e59f      	b.n	80080c8 <_dtoa_r+0x498>
 8008588:	9c03      	ldr	r4, [sp, #12]
 800858a:	46b8      	mov	r8, r7
 800858c:	4625      	mov	r5, r4
 800858e:	e7f4      	b.n	800857a <_dtoa_r+0x94a>
 8008590:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 8101 	beq.w	800879e <_dtoa_r+0xb6e>
 800859c:	2e00      	cmp	r6, #0
 800859e:	dd05      	ble.n	80085ac <_dtoa_r+0x97c>
 80085a0:	4629      	mov	r1, r5
 80085a2:	4632      	mov	r2, r6
 80085a4:	4648      	mov	r0, r9
 80085a6:	f000 fc19 	bl	8008ddc <__lshift>
 80085aa:	4605      	mov	r5, r0
 80085ac:	9b08      	ldr	r3, [sp, #32]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d05c      	beq.n	800866c <_dtoa_r+0xa3c>
 80085b2:	6869      	ldr	r1, [r5, #4]
 80085b4:	4648      	mov	r0, r9
 80085b6:	f000 fa0b 	bl	80089d0 <_Balloc>
 80085ba:	4606      	mov	r6, r0
 80085bc:	b928      	cbnz	r0, 80085ca <_dtoa_r+0x99a>
 80085be:	4b82      	ldr	r3, [pc, #520]	@ (80087c8 <_dtoa_r+0xb98>)
 80085c0:	4602      	mov	r2, r0
 80085c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80085c6:	f7ff bb4a 	b.w	8007c5e <_dtoa_r+0x2e>
 80085ca:	692a      	ldr	r2, [r5, #16]
 80085cc:	3202      	adds	r2, #2
 80085ce:	0092      	lsls	r2, r2, #2
 80085d0:	f105 010c 	add.w	r1, r5, #12
 80085d4:	300c      	adds	r0, #12
 80085d6:	f7ff fa94 	bl	8007b02 <memcpy>
 80085da:	2201      	movs	r2, #1
 80085dc:	4631      	mov	r1, r6
 80085de:	4648      	mov	r0, r9
 80085e0:	f000 fbfc 	bl	8008ddc <__lshift>
 80085e4:	f10a 0301 	add.w	r3, sl, #1
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	eb0a 030b 	add.w	r3, sl, fp
 80085ee:	9308      	str	r3, [sp, #32]
 80085f0:	9b04      	ldr	r3, [sp, #16]
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	462f      	mov	r7, r5
 80085f8:	9306      	str	r3, [sp, #24]
 80085fa:	4605      	mov	r5, r0
 80085fc:	9b00      	ldr	r3, [sp, #0]
 80085fe:	9802      	ldr	r0, [sp, #8]
 8008600:	4621      	mov	r1, r4
 8008602:	f103 3bff 	add.w	fp, r3, #4294967295
 8008606:	f7ff fa8a 	bl	8007b1e <quorem>
 800860a:	4603      	mov	r3, r0
 800860c:	3330      	adds	r3, #48	@ 0x30
 800860e:	9003      	str	r0, [sp, #12]
 8008610:	4639      	mov	r1, r7
 8008612:	9802      	ldr	r0, [sp, #8]
 8008614:	9309      	str	r3, [sp, #36]	@ 0x24
 8008616:	f000 fc4d 	bl	8008eb4 <__mcmp>
 800861a:	462a      	mov	r2, r5
 800861c:	9004      	str	r0, [sp, #16]
 800861e:	4621      	mov	r1, r4
 8008620:	4648      	mov	r0, r9
 8008622:	f000 fc63 	bl	8008eec <__mdiff>
 8008626:	68c2      	ldr	r2, [r0, #12]
 8008628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800862a:	4606      	mov	r6, r0
 800862c:	bb02      	cbnz	r2, 8008670 <_dtoa_r+0xa40>
 800862e:	4601      	mov	r1, r0
 8008630:	9802      	ldr	r0, [sp, #8]
 8008632:	f000 fc3f 	bl	8008eb4 <__mcmp>
 8008636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008638:	4602      	mov	r2, r0
 800863a:	4631      	mov	r1, r6
 800863c:	4648      	mov	r0, r9
 800863e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008640:	9309      	str	r3, [sp, #36]	@ 0x24
 8008642:	f000 fa05 	bl	8008a50 <_Bfree>
 8008646:	9b07      	ldr	r3, [sp, #28]
 8008648:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800864a:	9e00      	ldr	r6, [sp, #0]
 800864c:	ea42 0103 	orr.w	r1, r2, r3
 8008650:	9b06      	ldr	r3, [sp, #24]
 8008652:	4319      	orrs	r1, r3
 8008654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008656:	d10d      	bne.n	8008674 <_dtoa_r+0xa44>
 8008658:	2b39      	cmp	r3, #57	@ 0x39
 800865a:	d027      	beq.n	80086ac <_dtoa_r+0xa7c>
 800865c:	9a04      	ldr	r2, [sp, #16]
 800865e:	2a00      	cmp	r2, #0
 8008660:	dd01      	ble.n	8008666 <_dtoa_r+0xa36>
 8008662:	9b03      	ldr	r3, [sp, #12]
 8008664:	3331      	adds	r3, #49	@ 0x31
 8008666:	f88b 3000 	strb.w	r3, [fp]
 800866a:	e52e      	b.n	80080ca <_dtoa_r+0x49a>
 800866c:	4628      	mov	r0, r5
 800866e:	e7b9      	b.n	80085e4 <_dtoa_r+0x9b4>
 8008670:	2201      	movs	r2, #1
 8008672:	e7e2      	b.n	800863a <_dtoa_r+0xa0a>
 8008674:	9904      	ldr	r1, [sp, #16]
 8008676:	2900      	cmp	r1, #0
 8008678:	db04      	blt.n	8008684 <_dtoa_r+0xa54>
 800867a:	9807      	ldr	r0, [sp, #28]
 800867c:	4301      	orrs	r1, r0
 800867e:	9806      	ldr	r0, [sp, #24]
 8008680:	4301      	orrs	r1, r0
 8008682:	d120      	bne.n	80086c6 <_dtoa_r+0xa96>
 8008684:	2a00      	cmp	r2, #0
 8008686:	ddee      	ble.n	8008666 <_dtoa_r+0xa36>
 8008688:	9902      	ldr	r1, [sp, #8]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	2201      	movs	r2, #1
 800868e:	4648      	mov	r0, r9
 8008690:	f000 fba4 	bl	8008ddc <__lshift>
 8008694:	4621      	mov	r1, r4
 8008696:	9002      	str	r0, [sp, #8]
 8008698:	f000 fc0c 	bl	8008eb4 <__mcmp>
 800869c:	2800      	cmp	r0, #0
 800869e:	9b00      	ldr	r3, [sp, #0]
 80086a0:	dc02      	bgt.n	80086a8 <_dtoa_r+0xa78>
 80086a2:	d1e0      	bne.n	8008666 <_dtoa_r+0xa36>
 80086a4:	07da      	lsls	r2, r3, #31
 80086a6:	d5de      	bpl.n	8008666 <_dtoa_r+0xa36>
 80086a8:	2b39      	cmp	r3, #57	@ 0x39
 80086aa:	d1da      	bne.n	8008662 <_dtoa_r+0xa32>
 80086ac:	2339      	movs	r3, #57	@ 0x39
 80086ae:	f88b 3000 	strb.w	r3, [fp]
 80086b2:	4633      	mov	r3, r6
 80086b4:	461e      	mov	r6, r3
 80086b6:	3b01      	subs	r3, #1
 80086b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80086bc:	2a39      	cmp	r2, #57	@ 0x39
 80086be:	d04e      	beq.n	800875e <_dtoa_r+0xb2e>
 80086c0:	3201      	adds	r2, #1
 80086c2:	701a      	strb	r2, [r3, #0]
 80086c4:	e501      	b.n	80080ca <_dtoa_r+0x49a>
 80086c6:	2a00      	cmp	r2, #0
 80086c8:	dd03      	ble.n	80086d2 <_dtoa_r+0xaa2>
 80086ca:	2b39      	cmp	r3, #57	@ 0x39
 80086cc:	d0ee      	beq.n	80086ac <_dtoa_r+0xa7c>
 80086ce:	3301      	adds	r3, #1
 80086d0:	e7c9      	b.n	8008666 <_dtoa_r+0xa36>
 80086d2:	9a00      	ldr	r2, [sp, #0]
 80086d4:	9908      	ldr	r1, [sp, #32]
 80086d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80086da:	428a      	cmp	r2, r1
 80086dc:	d028      	beq.n	8008730 <_dtoa_r+0xb00>
 80086de:	9902      	ldr	r1, [sp, #8]
 80086e0:	2300      	movs	r3, #0
 80086e2:	220a      	movs	r2, #10
 80086e4:	4648      	mov	r0, r9
 80086e6:	f000 f9d5 	bl	8008a94 <__multadd>
 80086ea:	42af      	cmp	r7, r5
 80086ec:	9002      	str	r0, [sp, #8]
 80086ee:	f04f 0300 	mov.w	r3, #0
 80086f2:	f04f 020a 	mov.w	r2, #10
 80086f6:	4639      	mov	r1, r7
 80086f8:	4648      	mov	r0, r9
 80086fa:	d107      	bne.n	800870c <_dtoa_r+0xadc>
 80086fc:	f000 f9ca 	bl	8008a94 <__multadd>
 8008700:	4607      	mov	r7, r0
 8008702:	4605      	mov	r5, r0
 8008704:	9b00      	ldr	r3, [sp, #0]
 8008706:	3301      	adds	r3, #1
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	e777      	b.n	80085fc <_dtoa_r+0x9cc>
 800870c:	f000 f9c2 	bl	8008a94 <__multadd>
 8008710:	4629      	mov	r1, r5
 8008712:	4607      	mov	r7, r0
 8008714:	2300      	movs	r3, #0
 8008716:	220a      	movs	r2, #10
 8008718:	4648      	mov	r0, r9
 800871a:	f000 f9bb 	bl	8008a94 <__multadd>
 800871e:	4605      	mov	r5, r0
 8008720:	e7f0      	b.n	8008704 <_dtoa_r+0xad4>
 8008722:	f1bb 0f00 	cmp.w	fp, #0
 8008726:	bfcc      	ite	gt
 8008728:	465e      	movgt	r6, fp
 800872a:	2601      	movle	r6, #1
 800872c:	4456      	add	r6, sl
 800872e:	2700      	movs	r7, #0
 8008730:	9902      	ldr	r1, [sp, #8]
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	2201      	movs	r2, #1
 8008736:	4648      	mov	r0, r9
 8008738:	f000 fb50 	bl	8008ddc <__lshift>
 800873c:	4621      	mov	r1, r4
 800873e:	9002      	str	r0, [sp, #8]
 8008740:	f000 fbb8 	bl	8008eb4 <__mcmp>
 8008744:	2800      	cmp	r0, #0
 8008746:	dcb4      	bgt.n	80086b2 <_dtoa_r+0xa82>
 8008748:	d102      	bne.n	8008750 <_dtoa_r+0xb20>
 800874a:	9b00      	ldr	r3, [sp, #0]
 800874c:	07db      	lsls	r3, r3, #31
 800874e:	d4b0      	bmi.n	80086b2 <_dtoa_r+0xa82>
 8008750:	4633      	mov	r3, r6
 8008752:	461e      	mov	r6, r3
 8008754:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008758:	2a30      	cmp	r2, #48	@ 0x30
 800875a:	d0fa      	beq.n	8008752 <_dtoa_r+0xb22>
 800875c:	e4b5      	b.n	80080ca <_dtoa_r+0x49a>
 800875e:	459a      	cmp	sl, r3
 8008760:	d1a8      	bne.n	80086b4 <_dtoa_r+0xa84>
 8008762:	2331      	movs	r3, #49	@ 0x31
 8008764:	f108 0801 	add.w	r8, r8, #1
 8008768:	f88a 3000 	strb.w	r3, [sl]
 800876c:	e4ad      	b.n	80080ca <_dtoa_r+0x49a>
 800876e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008770:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80087cc <_dtoa_r+0xb9c>
 8008774:	b11b      	cbz	r3, 800877e <_dtoa_r+0xb4e>
 8008776:	f10a 0308 	add.w	r3, sl, #8
 800877a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800877c:	6013      	str	r3, [r2, #0]
 800877e:	4650      	mov	r0, sl
 8008780:	b017      	add	sp, #92	@ 0x5c
 8008782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008786:	9b07      	ldr	r3, [sp, #28]
 8008788:	2b01      	cmp	r3, #1
 800878a:	f77f ae2e 	ble.w	80083ea <_dtoa_r+0x7ba>
 800878e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008790:	9308      	str	r3, [sp, #32]
 8008792:	2001      	movs	r0, #1
 8008794:	e64d      	b.n	8008432 <_dtoa_r+0x802>
 8008796:	f1bb 0f00 	cmp.w	fp, #0
 800879a:	f77f aed9 	ble.w	8008550 <_dtoa_r+0x920>
 800879e:	4656      	mov	r6, sl
 80087a0:	9802      	ldr	r0, [sp, #8]
 80087a2:	4621      	mov	r1, r4
 80087a4:	f7ff f9bb 	bl	8007b1e <quorem>
 80087a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80087ac:	f806 3b01 	strb.w	r3, [r6], #1
 80087b0:	eba6 020a 	sub.w	r2, r6, sl
 80087b4:	4593      	cmp	fp, r2
 80087b6:	ddb4      	ble.n	8008722 <_dtoa_r+0xaf2>
 80087b8:	9902      	ldr	r1, [sp, #8]
 80087ba:	2300      	movs	r3, #0
 80087bc:	220a      	movs	r2, #10
 80087be:	4648      	mov	r0, r9
 80087c0:	f000 f968 	bl	8008a94 <__multadd>
 80087c4:	9002      	str	r0, [sp, #8]
 80087c6:	e7eb      	b.n	80087a0 <_dtoa_r+0xb70>
 80087c8:	08009cf4 	.word	0x08009cf4
 80087cc:	08009c78 	.word	0x08009c78

080087d0 <_free_r>:
 80087d0:	b538      	push	{r3, r4, r5, lr}
 80087d2:	4605      	mov	r5, r0
 80087d4:	2900      	cmp	r1, #0
 80087d6:	d041      	beq.n	800885c <_free_r+0x8c>
 80087d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087dc:	1f0c      	subs	r4, r1, #4
 80087de:	2b00      	cmp	r3, #0
 80087e0:	bfb8      	it	lt
 80087e2:	18e4      	addlt	r4, r4, r3
 80087e4:	f000 f8e8 	bl	80089b8 <__malloc_lock>
 80087e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008860 <_free_r+0x90>)
 80087ea:	6813      	ldr	r3, [r2, #0]
 80087ec:	b933      	cbnz	r3, 80087fc <_free_r+0x2c>
 80087ee:	6063      	str	r3, [r4, #4]
 80087f0:	6014      	str	r4, [r2, #0]
 80087f2:	4628      	mov	r0, r5
 80087f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087f8:	f000 b8e4 	b.w	80089c4 <__malloc_unlock>
 80087fc:	42a3      	cmp	r3, r4
 80087fe:	d908      	bls.n	8008812 <_free_r+0x42>
 8008800:	6820      	ldr	r0, [r4, #0]
 8008802:	1821      	adds	r1, r4, r0
 8008804:	428b      	cmp	r3, r1
 8008806:	bf01      	itttt	eq
 8008808:	6819      	ldreq	r1, [r3, #0]
 800880a:	685b      	ldreq	r3, [r3, #4]
 800880c:	1809      	addeq	r1, r1, r0
 800880e:	6021      	streq	r1, [r4, #0]
 8008810:	e7ed      	b.n	80087ee <_free_r+0x1e>
 8008812:	461a      	mov	r2, r3
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	b10b      	cbz	r3, 800881c <_free_r+0x4c>
 8008818:	42a3      	cmp	r3, r4
 800881a:	d9fa      	bls.n	8008812 <_free_r+0x42>
 800881c:	6811      	ldr	r1, [r2, #0]
 800881e:	1850      	adds	r0, r2, r1
 8008820:	42a0      	cmp	r0, r4
 8008822:	d10b      	bne.n	800883c <_free_r+0x6c>
 8008824:	6820      	ldr	r0, [r4, #0]
 8008826:	4401      	add	r1, r0
 8008828:	1850      	adds	r0, r2, r1
 800882a:	4283      	cmp	r3, r0
 800882c:	6011      	str	r1, [r2, #0]
 800882e:	d1e0      	bne.n	80087f2 <_free_r+0x22>
 8008830:	6818      	ldr	r0, [r3, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	6053      	str	r3, [r2, #4]
 8008836:	4408      	add	r0, r1
 8008838:	6010      	str	r0, [r2, #0]
 800883a:	e7da      	b.n	80087f2 <_free_r+0x22>
 800883c:	d902      	bls.n	8008844 <_free_r+0x74>
 800883e:	230c      	movs	r3, #12
 8008840:	602b      	str	r3, [r5, #0]
 8008842:	e7d6      	b.n	80087f2 <_free_r+0x22>
 8008844:	6820      	ldr	r0, [r4, #0]
 8008846:	1821      	adds	r1, r4, r0
 8008848:	428b      	cmp	r3, r1
 800884a:	bf04      	itt	eq
 800884c:	6819      	ldreq	r1, [r3, #0]
 800884e:	685b      	ldreq	r3, [r3, #4]
 8008850:	6063      	str	r3, [r4, #4]
 8008852:	bf04      	itt	eq
 8008854:	1809      	addeq	r1, r1, r0
 8008856:	6021      	streq	r1, [r4, #0]
 8008858:	6054      	str	r4, [r2, #4]
 800885a:	e7ca      	b.n	80087f2 <_free_r+0x22>
 800885c:	bd38      	pop	{r3, r4, r5, pc}
 800885e:	bf00      	nop
 8008860:	20004e6c 	.word	0x20004e6c

08008864 <malloc>:
 8008864:	4b02      	ldr	r3, [pc, #8]	@ (8008870 <malloc+0xc>)
 8008866:	4601      	mov	r1, r0
 8008868:	6818      	ldr	r0, [r3, #0]
 800886a:	f000 b825 	b.w	80088b8 <_malloc_r>
 800886e:	bf00      	nop
 8008870:	2000001c 	.word	0x2000001c

08008874 <sbrk_aligned>:
 8008874:	b570      	push	{r4, r5, r6, lr}
 8008876:	4e0f      	ldr	r6, [pc, #60]	@ (80088b4 <sbrk_aligned+0x40>)
 8008878:	460c      	mov	r4, r1
 800887a:	6831      	ldr	r1, [r6, #0]
 800887c:	4605      	mov	r5, r0
 800887e:	b911      	cbnz	r1, 8008886 <sbrk_aligned+0x12>
 8008880:	f000 fe3e 	bl	8009500 <_sbrk_r>
 8008884:	6030      	str	r0, [r6, #0]
 8008886:	4621      	mov	r1, r4
 8008888:	4628      	mov	r0, r5
 800888a:	f000 fe39 	bl	8009500 <_sbrk_r>
 800888e:	1c43      	adds	r3, r0, #1
 8008890:	d103      	bne.n	800889a <sbrk_aligned+0x26>
 8008892:	f04f 34ff 	mov.w	r4, #4294967295
 8008896:	4620      	mov	r0, r4
 8008898:	bd70      	pop	{r4, r5, r6, pc}
 800889a:	1cc4      	adds	r4, r0, #3
 800889c:	f024 0403 	bic.w	r4, r4, #3
 80088a0:	42a0      	cmp	r0, r4
 80088a2:	d0f8      	beq.n	8008896 <sbrk_aligned+0x22>
 80088a4:	1a21      	subs	r1, r4, r0
 80088a6:	4628      	mov	r0, r5
 80088a8:	f000 fe2a 	bl	8009500 <_sbrk_r>
 80088ac:	3001      	adds	r0, #1
 80088ae:	d1f2      	bne.n	8008896 <sbrk_aligned+0x22>
 80088b0:	e7ef      	b.n	8008892 <sbrk_aligned+0x1e>
 80088b2:	bf00      	nop
 80088b4:	20004e68 	.word	0x20004e68

080088b8 <_malloc_r>:
 80088b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088bc:	1ccd      	adds	r5, r1, #3
 80088be:	f025 0503 	bic.w	r5, r5, #3
 80088c2:	3508      	adds	r5, #8
 80088c4:	2d0c      	cmp	r5, #12
 80088c6:	bf38      	it	cc
 80088c8:	250c      	movcc	r5, #12
 80088ca:	2d00      	cmp	r5, #0
 80088cc:	4606      	mov	r6, r0
 80088ce:	db01      	blt.n	80088d4 <_malloc_r+0x1c>
 80088d0:	42a9      	cmp	r1, r5
 80088d2:	d904      	bls.n	80088de <_malloc_r+0x26>
 80088d4:	230c      	movs	r3, #12
 80088d6:	6033      	str	r3, [r6, #0]
 80088d8:	2000      	movs	r0, #0
 80088da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089b4 <_malloc_r+0xfc>
 80088e2:	f000 f869 	bl	80089b8 <__malloc_lock>
 80088e6:	f8d8 3000 	ldr.w	r3, [r8]
 80088ea:	461c      	mov	r4, r3
 80088ec:	bb44      	cbnz	r4, 8008940 <_malloc_r+0x88>
 80088ee:	4629      	mov	r1, r5
 80088f0:	4630      	mov	r0, r6
 80088f2:	f7ff ffbf 	bl	8008874 <sbrk_aligned>
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	4604      	mov	r4, r0
 80088fa:	d158      	bne.n	80089ae <_malloc_r+0xf6>
 80088fc:	f8d8 4000 	ldr.w	r4, [r8]
 8008900:	4627      	mov	r7, r4
 8008902:	2f00      	cmp	r7, #0
 8008904:	d143      	bne.n	800898e <_malloc_r+0xd6>
 8008906:	2c00      	cmp	r4, #0
 8008908:	d04b      	beq.n	80089a2 <_malloc_r+0xea>
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	4639      	mov	r1, r7
 800890e:	4630      	mov	r0, r6
 8008910:	eb04 0903 	add.w	r9, r4, r3
 8008914:	f000 fdf4 	bl	8009500 <_sbrk_r>
 8008918:	4581      	cmp	r9, r0
 800891a:	d142      	bne.n	80089a2 <_malloc_r+0xea>
 800891c:	6821      	ldr	r1, [r4, #0]
 800891e:	1a6d      	subs	r5, r5, r1
 8008920:	4629      	mov	r1, r5
 8008922:	4630      	mov	r0, r6
 8008924:	f7ff ffa6 	bl	8008874 <sbrk_aligned>
 8008928:	3001      	adds	r0, #1
 800892a:	d03a      	beq.n	80089a2 <_malloc_r+0xea>
 800892c:	6823      	ldr	r3, [r4, #0]
 800892e:	442b      	add	r3, r5
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	f8d8 3000 	ldr.w	r3, [r8]
 8008936:	685a      	ldr	r2, [r3, #4]
 8008938:	bb62      	cbnz	r2, 8008994 <_malloc_r+0xdc>
 800893a:	f8c8 7000 	str.w	r7, [r8]
 800893e:	e00f      	b.n	8008960 <_malloc_r+0xa8>
 8008940:	6822      	ldr	r2, [r4, #0]
 8008942:	1b52      	subs	r2, r2, r5
 8008944:	d420      	bmi.n	8008988 <_malloc_r+0xd0>
 8008946:	2a0b      	cmp	r2, #11
 8008948:	d917      	bls.n	800897a <_malloc_r+0xc2>
 800894a:	1961      	adds	r1, r4, r5
 800894c:	42a3      	cmp	r3, r4
 800894e:	6025      	str	r5, [r4, #0]
 8008950:	bf18      	it	ne
 8008952:	6059      	strne	r1, [r3, #4]
 8008954:	6863      	ldr	r3, [r4, #4]
 8008956:	bf08      	it	eq
 8008958:	f8c8 1000 	streq.w	r1, [r8]
 800895c:	5162      	str	r2, [r4, r5]
 800895e:	604b      	str	r3, [r1, #4]
 8008960:	4630      	mov	r0, r6
 8008962:	f000 f82f 	bl	80089c4 <__malloc_unlock>
 8008966:	f104 000b 	add.w	r0, r4, #11
 800896a:	1d23      	adds	r3, r4, #4
 800896c:	f020 0007 	bic.w	r0, r0, #7
 8008970:	1ac2      	subs	r2, r0, r3
 8008972:	bf1c      	itt	ne
 8008974:	1a1b      	subne	r3, r3, r0
 8008976:	50a3      	strne	r3, [r4, r2]
 8008978:	e7af      	b.n	80088da <_malloc_r+0x22>
 800897a:	6862      	ldr	r2, [r4, #4]
 800897c:	42a3      	cmp	r3, r4
 800897e:	bf0c      	ite	eq
 8008980:	f8c8 2000 	streq.w	r2, [r8]
 8008984:	605a      	strne	r2, [r3, #4]
 8008986:	e7eb      	b.n	8008960 <_malloc_r+0xa8>
 8008988:	4623      	mov	r3, r4
 800898a:	6864      	ldr	r4, [r4, #4]
 800898c:	e7ae      	b.n	80088ec <_malloc_r+0x34>
 800898e:	463c      	mov	r4, r7
 8008990:	687f      	ldr	r7, [r7, #4]
 8008992:	e7b6      	b.n	8008902 <_malloc_r+0x4a>
 8008994:	461a      	mov	r2, r3
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	42a3      	cmp	r3, r4
 800899a:	d1fb      	bne.n	8008994 <_malloc_r+0xdc>
 800899c:	2300      	movs	r3, #0
 800899e:	6053      	str	r3, [r2, #4]
 80089a0:	e7de      	b.n	8008960 <_malloc_r+0xa8>
 80089a2:	230c      	movs	r3, #12
 80089a4:	6033      	str	r3, [r6, #0]
 80089a6:	4630      	mov	r0, r6
 80089a8:	f000 f80c 	bl	80089c4 <__malloc_unlock>
 80089ac:	e794      	b.n	80088d8 <_malloc_r+0x20>
 80089ae:	6005      	str	r5, [r0, #0]
 80089b0:	e7d6      	b.n	8008960 <_malloc_r+0xa8>
 80089b2:	bf00      	nop
 80089b4:	20004e6c 	.word	0x20004e6c

080089b8 <__malloc_lock>:
 80089b8:	4801      	ldr	r0, [pc, #4]	@ (80089c0 <__malloc_lock+0x8>)
 80089ba:	f7ff b8a0 	b.w	8007afe <__retarget_lock_acquire_recursive>
 80089be:	bf00      	nop
 80089c0:	20004e64 	.word	0x20004e64

080089c4 <__malloc_unlock>:
 80089c4:	4801      	ldr	r0, [pc, #4]	@ (80089cc <__malloc_unlock+0x8>)
 80089c6:	f7ff b89b 	b.w	8007b00 <__retarget_lock_release_recursive>
 80089ca:	bf00      	nop
 80089cc:	20004e64 	.word	0x20004e64

080089d0 <_Balloc>:
 80089d0:	b570      	push	{r4, r5, r6, lr}
 80089d2:	69c6      	ldr	r6, [r0, #28]
 80089d4:	4604      	mov	r4, r0
 80089d6:	460d      	mov	r5, r1
 80089d8:	b976      	cbnz	r6, 80089f8 <_Balloc+0x28>
 80089da:	2010      	movs	r0, #16
 80089dc:	f7ff ff42 	bl	8008864 <malloc>
 80089e0:	4602      	mov	r2, r0
 80089e2:	61e0      	str	r0, [r4, #28]
 80089e4:	b920      	cbnz	r0, 80089f0 <_Balloc+0x20>
 80089e6:	4b18      	ldr	r3, [pc, #96]	@ (8008a48 <_Balloc+0x78>)
 80089e8:	4818      	ldr	r0, [pc, #96]	@ (8008a4c <_Balloc+0x7c>)
 80089ea:	216b      	movs	r1, #107	@ 0x6b
 80089ec:	f000 fd98 	bl	8009520 <__assert_func>
 80089f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089f4:	6006      	str	r6, [r0, #0]
 80089f6:	60c6      	str	r6, [r0, #12]
 80089f8:	69e6      	ldr	r6, [r4, #28]
 80089fa:	68f3      	ldr	r3, [r6, #12]
 80089fc:	b183      	cbz	r3, 8008a20 <_Balloc+0x50>
 80089fe:	69e3      	ldr	r3, [r4, #28]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a06:	b9b8      	cbnz	r0, 8008a38 <_Balloc+0x68>
 8008a08:	2101      	movs	r1, #1
 8008a0a:	fa01 f605 	lsl.w	r6, r1, r5
 8008a0e:	1d72      	adds	r2, r6, #5
 8008a10:	0092      	lsls	r2, r2, #2
 8008a12:	4620      	mov	r0, r4
 8008a14:	f000 fda2 	bl	800955c <_calloc_r>
 8008a18:	b160      	cbz	r0, 8008a34 <_Balloc+0x64>
 8008a1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a1e:	e00e      	b.n	8008a3e <_Balloc+0x6e>
 8008a20:	2221      	movs	r2, #33	@ 0x21
 8008a22:	2104      	movs	r1, #4
 8008a24:	4620      	mov	r0, r4
 8008a26:	f000 fd99 	bl	800955c <_calloc_r>
 8008a2a:	69e3      	ldr	r3, [r4, #28]
 8008a2c:	60f0      	str	r0, [r6, #12]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1e4      	bne.n	80089fe <_Balloc+0x2e>
 8008a34:	2000      	movs	r0, #0
 8008a36:	bd70      	pop	{r4, r5, r6, pc}
 8008a38:	6802      	ldr	r2, [r0, #0]
 8008a3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a44:	e7f7      	b.n	8008a36 <_Balloc+0x66>
 8008a46:	bf00      	nop
 8008a48:	08009c85 	.word	0x08009c85
 8008a4c:	08009d05 	.word	0x08009d05

08008a50 <_Bfree>:
 8008a50:	b570      	push	{r4, r5, r6, lr}
 8008a52:	69c6      	ldr	r6, [r0, #28]
 8008a54:	4605      	mov	r5, r0
 8008a56:	460c      	mov	r4, r1
 8008a58:	b976      	cbnz	r6, 8008a78 <_Bfree+0x28>
 8008a5a:	2010      	movs	r0, #16
 8008a5c:	f7ff ff02 	bl	8008864 <malloc>
 8008a60:	4602      	mov	r2, r0
 8008a62:	61e8      	str	r0, [r5, #28]
 8008a64:	b920      	cbnz	r0, 8008a70 <_Bfree+0x20>
 8008a66:	4b09      	ldr	r3, [pc, #36]	@ (8008a8c <_Bfree+0x3c>)
 8008a68:	4809      	ldr	r0, [pc, #36]	@ (8008a90 <_Bfree+0x40>)
 8008a6a:	218f      	movs	r1, #143	@ 0x8f
 8008a6c:	f000 fd58 	bl	8009520 <__assert_func>
 8008a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a74:	6006      	str	r6, [r0, #0]
 8008a76:	60c6      	str	r6, [r0, #12]
 8008a78:	b13c      	cbz	r4, 8008a8a <_Bfree+0x3a>
 8008a7a:	69eb      	ldr	r3, [r5, #28]
 8008a7c:	6862      	ldr	r2, [r4, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a84:	6021      	str	r1, [r4, #0]
 8008a86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a8a:	bd70      	pop	{r4, r5, r6, pc}
 8008a8c:	08009c85 	.word	0x08009c85
 8008a90:	08009d05 	.word	0x08009d05

08008a94 <__multadd>:
 8008a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a98:	690d      	ldr	r5, [r1, #16]
 8008a9a:	4607      	mov	r7, r0
 8008a9c:	460c      	mov	r4, r1
 8008a9e:	461e      	mov	r6, r3
 8008aa0:	f101 0c14 	add.w	ip, r1, #20
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	f8dc 3000 	ldr.w	r3, [ip]
 8008aaa:	b299      	uxth	r1, r3
 8008aac:	fb02 6101 	mla	r1, r2, r1, r6
 8008ab0:	0c1e      	lsrs	r6, r3, #16
 8008ab2:	0c0b      	lsrs	r3, r1, #16
 8008ab4:	fb02 3306 	mla	r3, r2, r6, r3
 8008ab8:	b289      	uxth	r1, r1
 8008aba:	3001      	adds	r0, #1
 8008abc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ac0:	4285      	cmp	r5, r0
 8008ac2:	f84c 1b04 	str.w	r1, [ip], #4
 8008ac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008aca:	dcec      	bgt.n	8008aa6 <__multadd+0x12>
 8008acc:	b30e      	cbz	r6, 8008b12 <__multadd+0x7e>
 8008ace:	68a3      	ldr	r3, [r4, #8]
 8008ad0:	42ab      	cmp	r3, r5
 8008ad2:	dc19      	bgt.n	8008b08 <__multadd+0x74>
 8008ad4:	6861      	ldr	r1, [r4, #4]
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	3101      	adds	r1, #1
 8008ada:	f7ff ff79 	bl	80089d0 <_Balloc>
 8008ade:	4680      	mov	r8, r0
 8008ae0:	b928      	cbnz	r0, 8008aee <__multadd+0x5a>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8008b18 <__multadd+0x84>)
 8008ae6:	480d      	ldr	r0, [pc, #52]	@ (8008b1c <__multadd+0x88>)
 8008ae8:	21ba      	movs	r1, #186	@ 0xba
 8008aea:	f000 fd19 	bl	8009520 <__assert_func>
 8008aee:	6922      	ldr	r2, [r4, #16]
 8008af0:	3202      	adds	r2, #2
 8008af2:	f104 010c 	add.w	r1, r4, #12
 8008af6:	0092      	lsls	r2, r2, #2
 8008af8:	300c      	adds	r0, #12
 8008afa:	f7ff f802 	bl	8007b02 <memcpy>
 8008afe:	4621      	mov	r1, r4
 8008b00:	4638      	mov	r0, r7
 8008b02:	f7ff ffa5 	bl	8008a50 <_Bfree>
 8008b06:	4644      	mov	r4, r8
 8008b08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b0c:	3501      	adds	r5, #1
 8008b0e:	615e      	str	r6, [r3, #20]
 8008b10:	6125      	str	r5, [r4, #16]
 8008b12:	4620      	mov	r0, r4
 8008b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b18:	08009cf4 	.word	0x08009cf4
 8008b1c:	08009d05 	.word	0x08009d05

08008b20 <__hi0bits>:
 8008b20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b24:	4603      	mov	r3, r0
 8008b26:	bf36      	itet	cc
 8008b28:	0403      	lslcc	r3, r0, #16
 8008b2a:	2000      	movcs	r0, #0
 8008b2c:	2010      	movcc	r0, #16
 8008b2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b32:	bf3c      	itt	cc
 8008b34:	021b      	lslcc	r3, r3, #8
 8008b36:	3008      	addcc	r0, #8
 8008b38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b3c:	bf3c      	itt	cc
 8008b3e:	011b      	lslcc	r3, r3, #4
 8008b40:	3004      	addcc	r0, #4
 8008b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b46:	bf3c      	itt	cc
 8008b48:	009b      	lslcc	r3, r3, #2
 8008b4a:	3002      	addcc	r0, #2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	db05      	blt.n	8008b5c <__hi0bits+0x3c>
 8008b50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008b54:	f100 0001 	add.w	r0, r0, #1
 8008b58:	bf08      	it	eq
 8008b5a:	2020      	moveq	r0, #32
 8008b5c:	4770      	bx	lr

08008b5e <__lo0bits>:
 8008b5e:	6803      	ldr	r3, [r0, #0]
 8008b60:	4602      	mov	r2, r0
 8008b62:	f013 0007 	ands.w	r0, r3, #7
 8008b66:	d00b      	beq.n	8008b80 <__lo0bits+0x22>
 8008b68:	07d9      	lsls	r1, r3, #31
 8008b6a:	d421      	bmi.n	8008bb0 <__lo0bits+0x52>
 8008b6c:	0798      	lsls	r0, r3, #30
 8008b6e:	bf49      	itett	mi
 8008b70:	085b      	lsrmi	r3, r3, #1
 8008b72:	089b      	lsrpl	r3, r3, #2
 8008b74:	2001      	movmi	r0, #1
 8008b76:	6013      	strmi	r3, [r2, #0]
 8008b78:	bf5c      	itt	pl
 8008b7a:	6013      	strpl	r3, [r2, #0]
 8008b7c:	2002      	movpl	r0, #2
 8008b7e:	4770      	bx	lr
 8008b80:	b299      	uxth	r1, r3
 8008b82:	b909      	cbnz	r1, 8008b88 <__lo0bits+0x2a>
 8008b84:	0c1b      	lsrs	r3, r3, #16
 8008b86:	2010      	movs	r0, #16
 8008b88:	b2d9      	uxtb	r1, r3
 8008b8a:	b909      	cbnz	r1, 8008b90 <__lo0bits+0x32>
 8008b8c:	3008      	adds	r0, #8
 8008b8e:	0a1b      	lsrs	r3, r3, #8
 8008b90:	0719      	lsls	r1, r3, #28
 8008b92:	bf04      	itt	eq
 8008b94:	091b      	lsreq	r3, r3, #4
 8008b96:	3004      	addeq	r0, #4
 8008b98:	0799      	lsls	r1, r3, #30
 8008b9a:	bf04      	itt	eq
 8008b9c:	089b      	lsreq	r3, r3, #2
 8008b9e:	3002      	addeq	r0, #2
 8008ba0:	07d9      	lsls	r1, r3, #31
 8008ba2:	d403      	bmi.n	8008bac <__lo0bits+0x4e>
 8008ba4:	085b      	lsrs	r3, r3, #1
 8008ba6:	f100 0001 	add.w	r0, r0, #1
 8008baa:	d003      	beq.n	8008bb4 <__lo0bits+0x56>
 8008bac:	6013      	str	r3, [r2, #0]
 8008bae:	4770      	bx	lr
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	4770      	bx	lr
 8008bb4:	2020      	movs	r0, #32
 8008bb6:	4770      	bx	lr

08008bb8 <__i2b>:
 8008bb8:	b510      	push	{r4, lr}
 8008bba:	460c      	mov	r4, r1
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	f7ff ff07 	bl	80089d0 <_Balloc>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	b928      	cbnz	r0, 8008bd2 <__i2b+0x1a>
 8008bc6:	4b05      	ldr	r3, [pc, #20]	@ (8008bdc <__i2b+0x24>)
 8008bc8:	4805      	ldr	r0, [pc, #20]	@ (8008be0 <__i2b+0x28>)
 8008bca:	f240 1145 	movw	r1, #325	@ 0x145
 8008bce:	f000 fca7 	bl	8009520 <__assert_func>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	6144      	str	r4, [r0, #20]
 8008bd6:	6103      	str	r3, [r0, #16]
 8008bd8:	bd10      	pop	{r4, pc}
 8008bda:	bf00      	nop
 8008bdc:	08009cf4 	.word	0x08009cf4
 8008be0:	08009d05 	.word	0x08009d05

08008be4 <__multiply>:
 8008be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be8:	4617      	mov	r7, r2
 8008bea:	690a      	ldr	r2, [r1, #16]
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	bfa8      	it	ge
 8008bf2:	463b      	movge	r3, r7
 8008bf4:	4689      	mov	r9, r1
 8008bf6:	bfa4      	itt	ge
 8008bf8:	460f      	movge	r7, r1
 8008bfa:	4699      	movge	r9, r3
 8008bfc:	693d      	ldr	r5, [r7, #16]
 8008bfe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	6879      	ldr	r1, [r7, #4]
 8008c06:	eb05 060a 	add.w	r6, r5, sl
 8008c0a:	42b3      	cmp	r3, r6
 8008c0c:	b085      	sub	sp, #20
 8008c0e:	bfb8      	it	lt
 8008c10:	3101      	addlt	r1, #1
 8008c12:	f7ff fedd 	bl	80089d0 <_Balloc>
 8008c16:	b930      	cbnz	r0, 8008c26 <__multiply+0x42>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	4b41      	ldr	r3, [pc, #260]	@ (8008d20 <__multiply+0x13c>)
 8008c1c:	4841      	ldr	r0, [pc, #260]	@ (8008d24 <__multiply+0x140>)
 8008c1e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008c22:	f000 fc7d 	bl	8009520 <__assert_func>
 8008c26:	f100 0414 	add.w	r4, r0, #20
 8008c2a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008c2e:	4623      	mov	r3, r4
 8008c30:	2200      	movs	r2, #0
 8008c32:	4573      	cmp	r3, lr
 8008c34:	d320      	bcc.n	8008c78 <__multiply+0x94>
 8008c36:	f107 0814 	add.w	r8, r7, #20
 8008c3a:	f109 0114 	add.w	r1, r9, #20
 8008c3e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008c42:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008c46:	9302      	str	r3, [sp, #8]
 8008c48:	1beb      	subs	r3, r5, r7
 8008c4a:	3b15      	subs	r3, #21
 8008c4c:	f023 0303 	bic.w	r3, r3, #3
 8008c50:	3304      	adds	r3, #4
 8008c52:	3715      	adds	r7, #21
 8008c54:	42bd      	cmp	r5, r7
 8008c56:	bf38      	it	cc
 8008c58:	2304      	movcc	r3, #4
 8008c5a:	9301      	str	r3, [sp, #4]
 8008c5c:	9b02      	ldr	r3, [sp, #8]
 8008c5e:	9103      	str	r1, [sp, #12]
 8008c60:	428b      	cmp	r3, r1
 8008c62:	d80c      	bhi.n	8008c7e <__multiply+0x9a>
 8008c64:	2e00      	cmp	r6, #0
 8008c66:	dd03      	ble.n	8008c70 <__multiply+0x8c>
 8008c68:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d055      	beq.n	8008d1c <__multiply+0x138>
 8008c70:	6106      	str	r6, [r0, #16]
 8008c72:	b005      	add	sp, #20
 8008c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c78:	f843 2b04 	str.w	r2, [r3], #4
 8008c7c:	e7d9      	b.n	8008c32 <__multiply+0x4e>
 8008c7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008c82:	f1ba 0f00 	cmp.w	sl, #0
 8008c86:	d01f      	beq.n	8008cc8 <__multiply+0xe4>
 8008c88:	46c4      	mov	ip, r8
 8008c8a:	46a1      	mov	r9, r4
 8008c8c:	2700      	movs	r7, #0
 8008c8e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008c92:	f8d9 3000 	ldr.w	r3, [r9]
 8008c96:	fa1f fb82 	uxth.w	fp, r2
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ca0:	443b      	add	r3, r7
 8008ca2:	f8d9 7000 	ldr.w	r7, [r9]
 8008ca6:	0c12      	lsrs	r2, r2, #16
 8008ca8:	0c3f      	lsrs	r7, r7, #16
 8008caa:	fb0a 7202 	mla	r2, sl, r2, r7
 8008cae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cb8:	4565      	cmp	r5, ip
 8008cba:	f849 3b04 	str.w	r3, [r9], #4
 8008cbe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008cc2:	d8e4      	bhi.n	8008c8e <__multiply+0xaa>
 8008cc4:	9b01      	ldr	r3, [sp, #4]
 8008cc6:	50e7      	str	r7, [r4, r3]
 8008cc8:	9b03      	ldr	r3, [sp, #12]
 8008cca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008cce:	3104      	adds	r1, #4
 8008cd0:	f1b9 0f00 	cmp.w	r9, #0
 8008cd4:	d020      	beq.n	8008d18 <__multiply+0x134>
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	4647      	mov	r7, r8
 8008cda:	46a4      	mov	ip, r4
 8008cdc:	f04f 0a00 	mov.w	sl, #0
 8008ce0:	f8b7 b000 	ldrh.w	fp, [r7]
 8008ce4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008ce8:	fb09 220b 	mla	r2, r9, fp, r2
 8008cec:	4452      	add	r2, sl
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cf4:	f84c 3b04 	str.w	r3, [ip], #4
 8008cf8:	f857 3b04 	ldr.w	r3, [r7], #4
 8008cfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d00:	f8bc 3000 	ldrh.w	r3, [ip]
 8008d04:	fb09 330a 	mla	r3, r9, sl, r3
 8008d08:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008d0c:	42bd      	cmp	r5, r7
 8008d0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d12:	d8e5      	bhi.n	8008ce0 <__multiply+0xfc>
 8008d14:	9a01      	ldr	r2, [sp, #4]
 8008d16:	50a3      	str	r3, [r4, r2]
 8008d18:	3404      	adds	r4, #4
 8008d1a:	e79f      	b.n	8008c5c <__multiply+0x78>
 8008d1c:	3e01      	subs	r6, #1
 8008d1e:	e7a1      	b.n	8008c64 <__multiply+0x80>
 8008d20:	08009cf4 	.word	0x08009cf4
 8008d24:	08009d05 	.word	0x08009d05

08008d28 <__pow5mult>:
 8008d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d2c:	4615      	mov	r5, r2
 8008d2e:	f012 0203 	ands.w	r2, r2, #3
 8008d32:	4607      	mov	r7, r0
 8008d34:	460e      	mov	r6, r1
 8008d36:	d007      	beq.n	8008d48 <__pow5mult+0x20>
 8008d38:	4c25      	ldr	r4, [pc, #148]	@ (8008dd0 <__pow5mult+0xa8>)
 8008d3a:	3a01      	subs	r2, #1
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d42:	f7ff fea7 	bl	8008a94 <__multadd>
 8008d46:	4606      	mov	r6, r0
 8008d48:	10ad      	asrs	r5, r5, #2
 8008d4a:	d03d      	beq.n	8008dc8 <__pow5mult+0xa0>
 8008d4c:	69fc      	ldr	r4, [r7, #28]
 8008d4e:	b97c      	cbnz	r4, 8008d70 <__pow5mult+0x48>
 8008d50:	2010      	movs	r0, #16
 8008d52:	f7ff fd87 	bl	8008864 <malloc>
 8008d56:	4602      	mov	r2, r0
 8008d58:	61f8      	str	r0, [r7, #28]
 8008d5a:	b928      	cbnz	r0, 8008d68 <__pow5mult+0x40>
 8008d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8008dd4 <__pow5mult+0xac>)
 8008d5e:	481e      	ldr	r0, [pc, #120]	@ (8008dd8 <__pow5mult+0xb0>)
 8008d60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008d64:	f000 fbdc 	bl	8009520 <__assert_func>
 8008d68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d6c:	6004      	str	r4, [r0, #0]
 8008d6e:	60c4      	str	r4, [r0, #12]
 8008d70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008d74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d78:	b94c      	cbnz	r4, 8008d8e <__pow5mult+0x66>
 8008d7a:	f240 2171 	movw	r1, #625	@ 0x271
 8008d7e:	4638      	mov	r0, r7
 8008d80:	f7ff ff1a 	bl	8008bb8 <__i2b>
 8008d84:	2300      	movs	r3, #0
 8008d86:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	6003      	str	r3, [r0, #0]
 8008d8e:	f04f 0900 	mov.w	r9, #0
 8008d92:	07eb      	lsls	r3, r5, #31
 8008d94:	d50a      	bpl.n	8008dac <__pow5mult+0x84>
 8008d96:	4631      	mov	r1, r6
 8008d98:	4622      	mov	r2, r4
 8008d9a:	4638      	mov	r0, r7
 8008d9c:	f7ff ff22 	bl	8008be4 <__multiply>
 8008da0:	4631      	mov	r1, r6
 8008da2:	4680      	mov	r8, r0
 8008da4:	4638      	mov	r0, r7
 8008da6:	f7ff fe53 	bl	8008a50 <_Bfree>
 8008daa:	4646      	mov	r6, r8
 8008dac:	106d      	asrs	r5, r5, #1
 8008dae:	d00b      	beq.n	8008dc8 <__pow5mult+0xa0>
 8008db0:	6820      	ldr	r0, [r4, #0]
 8008db2:	b938      	cbnz	r0, 8008dc4 <__pow5mult+0x9c>
 8008db4:	4622      	mov	r2, r4
 8008db6:	4621      	mov	r1, r4
 8008db8:	4638      	mov	r0, r7
 8008dba:	f7ff ff13 	bl	8008be4 <__multiply>
 8008dbe:	6020      	str	r0, [r4, #0]
 8008dc0:	f8c0 9000 	str.w	r9, [r0]
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	e7e4      	b.n	8008d92 <__pow5mult+0x6a>
 8008dc8:	4630      	mov	r0, r6
 8008dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dce:	bf00      	nop
 8008dd0:	08009db8 	.word	0x08009db8
 8008dd4:	08009c85 	.word	0x08009c85
 8008dd8:	08009d05 	.word	0x08009d05

08008ddc <__lshift>:
 8008ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008de0:	460c      	mov	r4, r1
 8008de2:	6849      	ldr	r1, [r1, #4]
 8008de4:	6923      	ldr	r3, [r4, #16]
 8008de6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008dea:	68a3      	ldr	r3, [r4, #8]
 8008dec:	4607      	mov	r7, r0
 8008dee:	4691      	mov	r9, r2
 8008df0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008df4:	f108 0601 	add.w	r6, r8, #1
 8008df8:	42b3      	cmp	r3, r6
 8008dfa:	db0b      	blt.n	8008e14 <__lshift+0x38>
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	f7ff fde7 	bl	80089d0 <_Balloc>
 8008e02:	4605      	mov	r5, r0
 8008e04:	b948      	cbnz	r0, 8008e1a <__lshift+0x3e>
 8008e06:	4602      	mov	r2, r0
 8008e08:	4b28      	ldr	r3, [pc, #160]	@ (8008eac <__lshift+0xd0>)
 8008e0a:	4829      	ldr	r0, [pc, #164]	@ (8008eb0 <__lshift+0xd4>)
 8008e0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008e10:	f000 fb86 	bl	8009520 <__assert_func>
 8008e14:	3101      	adds	r1, #1
 8008e16:	005b      	lsls	r3, r3, #1
 8008e18:	e7ee      	b.n	8008df8 <__lshift+0x1c>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f100 0114 	add.w	r1, r0, #20
 8008e20:	f100 0210 	add.w	r2, r0, #16
 8008e24:	4618      	mov	r0, r3
 8008e26:	4553      	cmp	r3, sl
 8008e28:	db33      	blt.n	8008e92 <__lshift+0xb6>
 8008e2a:	6920      	ldr	r0, [r4, #16]
 8008e2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e30:	f104 0314 	add.w	r3, r4, #20
 8008e34:	f019 091f 	ands.w	r9, r9, #31
 8008e38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e40:	d02b      	beq.n	8008e9a <__lshift+0xbe>
 8008e42:	f1c9 0e20 	rsb	lr, r9, #32
 8008e46:	468a      	mov	sl, r1
 8008e48:	2200      	movs	r2, #0
 8008e4a:	6818      	ldr	r0, [r3, #0]
 8008e4c:	fa00 f009 	lsl.w	r0, r0, r9
 8008e50:	4310      	orrs	r0, r2
 8008e52:	f84a 0b04 	str.w	r0, [sl], #4
 8008e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e5a:	459c      	cmp	ip, r3
 8008e5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e60:	d8f3      	bhi.n	8008e4a <__lshift+0x6e>
 8008e62:	ebac 0304 	sub.w	r3, ip, r4
 8008e66:	3b15      	subs	r3, #21
 8008e68:	f023 0303 	bic.w	r3, r3, #3
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	f104 0015 	add.w	r0, r4, #21
 8008e72:	4560      	cmp	r0, ip
 8008e74:	bf88      	it	hi
 8008e76:	2304      	movhi	r3, #4
 8008e78:	50ca      	str	r2, [r1, r3]
 8008e7a:	b10a      	cbz	r2, 8008e80 <__lshift+0xa4>
 8008e7c:	f108 0602 	add.w	r6, r8, #2
 8008e80:	3e01      	subs	r6, #1
 8008e82:	4638      	mov	r0, r7
 8008e84:	612e      	str	r6, [r5, #16]
 8008e86:	4621      	mov	r1, r4
 8008e88:	f7ff fde2 	bl	8008a50 <_Bfree>
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e92:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e96:	3301      	adds	r3, #1
 8008e98:	e7c5      	b.n	8008e26 <__lshift+0x4a>
 8008e9a:	3904      	subs	r1, #4
 8008e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ea0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ea4:	459c      	cmp	ip, r3
 8008ea6:	d8f9      	bhi.n	8008e9c <__lshift+0xc0>
 8008ea8:	e7ea      	b.n	8008e80 <__lshift+0xa4>
 8008eaa:	bf00      	nop
 8008eac:	08009cf4 	.word	0x08009cf4
 8008eb0:	08009d05 	.word	0x08009d05

08008eb4 <__mcmp>:
 8008eb4:	690a      	ldr	r2, [r1, #16]
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	6900      	ldr	r0, [r0, #16]
 8008eba:	1a80      	subs	r0, r0, r2
 8008ebc:	b530      	push	{r4, r5, lr}
 8008ebe:	d10e      	bne.n	8008ede <__mcmp+0x2a>
 8008ec0:	3314      	adds	r3, #20
 8008ec2:	3114      	adds	r1, #20
 8008ec4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ec8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ecc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ed0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ed4:	4295      	cmp	r5, r2
 8008ed6:	d003      	beq.n	8008ee0 <__mcmp+0x2c>
 8008ed8:	d205      	bcs.n	8008ee6 <__mcmp+0x32>
 8008eda:	f04f 30ff 	mov.w	r0, #4294967295
 8008ede:	bd30      	pop	{r4, r5, pc}
 8008ee0:	42a3      	cmp	r3, r4
 8008ee2:	d3f3      	bcc.n	8008ecc <__mcmp+0x18>
 8008ee4:	e7fb      	b.n	8008ede <__mcmp+0x2a>
 8008ee6:	2001      	movs	r0, #1
 8008ee8:	e7f9      	b.n	8008ede <__mcmp+0x2a>
	...

08008eec <__mdiff>:
 8008eec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef0:	4689      	mov	r9, r1
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	4648      	mov	r0, r9
 8008ef8:	4614      	mov	r4, r2
 8008efa:	f7ff ffdb 	bl	8008eb4 <__mcmp>
 8008efe:	1e05      	subs	r5, r0, #0
 8008f00:	d112      	bne.n	8008f28 <__mdiff+0x3c>
 8008f02:	4629      	mov	r1, r5
 8008f04:	4630      	mov	r0, r6
 8008f06:	f7ff fd63 	bl	80089d0 <_Balloc>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	b928      	cbnz	r0, 8008f1a <__mdiff+0x2e>
 8008f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800900c <__mdiff+0x120>)
 8008f10:	f240 2137 	movw	r1, #567	@ 0x237
 8008f14:	483e      	ldr	r0, [pc, #248]	@ (8009010 <__mdiff+0x124>)
 8008f16:	f000 fb03 	bl	8009520 <__assert_func>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f20:	4610      	mov	r0, r2
 8008f22:	b003      	add	sp, #12
 8008f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f28:	bfbc      	itt	lt
 8008f2a:	464b      	movlt	r3, r9
 8008f2c:	46a1      	movlt	r9, r4
 8008f2e:	4630      	mov	r0, r6
 8008f30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008f34:	bfba      	itte	lt
 8008f36:	461c      	movlt	r4, r3
 8008f38:	2501      	movlt	r5, #1
 8008f3a:	2500      	movge	r5, #0
 8008f3c:	f7ff fd48 	bl	80089d0 <_Balloc>
 8008f40:	4602      	mov	r2, r0
 8008f42:	b918      	cbnz	r0, 8008f4c <__mdiff+0x60>
 8008f44:	4b31      	ldr	r3, [pc, #196]	@ (800900c <__mdiff+0x120>)
 8008f46:	f240 2145 	movw	r1, #581	@ 0x245
 8008f4a:	e7e3      	b.n	8008f14 <__mdiff+0x28>
 8008f4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008f50:	6926      	ldr	r6, [r4, #16]
 8008f52:	60c5      	str	r5, [r0, #12]
 8008f54:	f109 0310 	add.w	r3, r9, #16
 8008f58:	f109 0514 	add.w	r5, r9, #20
 8008f5c:	f104 0e14 	add.w	lr, r4, #20
 8008f60:	f100 0b14 	add.w	fp, r0, #20
 8008f64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008f68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	46d9      	mov	r9, fp
 8008f70:	f04f 0c00 	mov.w	ip, #0
 8008f74:	9b01      	ldr	r3, [sp, #4]
 8008f76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008f7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008f7e:	9301      	str	r3, [sp, #4]
 8008f80:	fa1f f38a 	uxth.w	r3, sl
 8008f84:	4619      	mov	r1, r3
 8008f86:	b283      	uxth	r3, r0
 8008f88:	1acb      	subs	r3, r1, r3
 8008f8a:	0c00      	lsrs	r0, r0, #16
 8008f8c:	4463      	add	r3, ip
 8008f8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008f9c:	4576      	cmp	r6, lr
 8008f9e:	f849 3b04 	str.w	r3, [r9], #4
 8008fa2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008fa6:	d8e5      	bhi.n	8008f74 <__mdiff+0x88>
 8008fa8:	1b33      	subs	r3, r6, r4
 8008faa:	3b15      	subs	r3, #21
 8008fac:	f023 0303 	bic.w	r3, r3, #3
 8008fb0:	3415      	adds	r4, #21
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	42a6      	cmp	r6, r4
 8008fb6:	bf38      	it	cc
 8008fb8:	2304      	movcc	r3, #4
 8008fba:	441d      	add	r5, r3
 8008fbc:	445b      	add	r3, fp
 8008fbe:	461e      	mov	r6, r3
 8008fc0:	462c      	mov	r4, r5
 8008fc2:	4544      	cmp	r4, r8
 8008fc4:	d30e      	bcc.n	8008fe4 <__mdiff+0xf8>
 8008fc6:	f108 0103 	add.w	r1, r8, #3
 8008fca:	1b49      	subs	r1, r1, r5
 8008fcc:	f021 0103 	bic.w	r1, r1, #3
 8008fd0:	3d03      	subs	r5, #3
 8008fd2:	45a8      	cmp	r8, r5
 8008fd4:	bf38      	it	cc
 8008fd6:	2100      	movcc	r1, #0
 8008fd8:	440b      	add	r3, r1
 8008fda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008fde:	b191      	cbz	r1, 8009006 <__mdiff+0x11a>
 8008fe0:	6117      	str	r7, [r2, #16]
 8008fe2:	e79d      	b.n	8008f20 <__mdiff+0x34>
 8008fe4:	f854 1b04 	ldr.w	r1, [r4], #4
 8008fe8:	46e6      	mov	lr, ip
 8008fea:	0c08      	lsrs	r0, r1, #16
 8008fec:	fa1c fc81 	uxtah	ip, ip, r1
 8008ff0:	4471      	add	r1, lr
 8008ff2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008ff6:	b289      	uxth	r1, r1
 8008ff8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ffc:	f846 1b04 	str.w	r1, [r6], #4
 8009000:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009004:	e7dd      	b.n	8008fc2 <__mdiff+0xd6>
 8009006:	3f01      	subs	r7, #1
 8009008:	e7e7      	b.n	8008fda <__mdiff+0xee>
 800900a:	bf00      	nop
 800900c:	08009cf4 	.word	0x08009cf4
 8009010:	08009d05 	.word	0x08009d05

08009014 <__d2b>:
 8009014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009018:	460f      	mov	r7, r1
 800901a:	2101      	movs	r1, #1
 800901c:	ec59 8b10 	vmov	r8, r9, d0
 8009020:	4616      	mov	r6, r2
 8009022:	f7ff fcd5 	bl	80089d0 <_Balloc>
 8009026:	4604      	mov	r4, r0
 8009028:	b930      	cbnz	r0, 8009038 <__d2b+0x24>
 800902a:	4602      	mov	r2, r0
 800902c:	4b23      	ldr	r3, [pc, #140]	@ (80090bc <__d2b+0xa8>)
 800902e:	4824      	ldr	r0, [pc, #144]	@ (80090c0 <__d2b+0xac>)
 8009030:	f240 310f 	movw	r1, #783	@ 0x30f
 8009034:	f000 fa74 	bl	8009520 <__assert_func>
 8009038:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800903c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009040:	b10d      	cbz	r5, 8009046 <__d2b+0x32>
 8009042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009046:	9301      	str	r3, [sp, #4]
 8009048:	f1b8 0300 	subs.w	r3, r8, #0
 800904c:	d023      	beq.n	8009096 <__d2b+0x82>
 800904e:	4668      	mov	r0, sp
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	f7ff fd84 	bl	8008b5e <__lo0bits>
 8009056:	e9dd 1200 	ldrd	r1, r2, [sp]
 800905a:	b1d0      	cbz	r0, 8009092 <__d2b+0x7e>
 800905c:	f1c0 0320 	rsb	r3, r0, #32
 8009060:	fa02 f303 	lsl.w	r3, r2, r3
 8009064:	430b      	orrs	r3, r1
 8009066:	40c2      	lsrs	r2, r0
 8009068:	6163      	str	r3, [r4, #20]
 800906a:	9201      	str	r2, [sp, #4]
 800906c:	9b01      	ldr	r3, [sp, #4]
 800906e:	61a3      	str	r3, [r4, #24]
 8009070:	2b00      	cmp	r3, #0
 8009072:	bf0c      	ite	eq
 8009074:	2201      	moveq	r2, #1
 8009076:	2202      	movne	r2, #2
 8009078:	6122      	str	r2, [r4, #16]
 800907a:	b1a5      	cbz	r5, 80090a6 <__d2b+0x92>
 800907c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009080:	4405      	add	r5, r0
 8009082:	603d      	str	r5, [r7, #0]
 8009084:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009088:	6030      	str	r0, [r6, #0]
 800908a:	4620      	mov	r0, r4
 800908c:	b003      	add	sp, #12
 800908e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009092:	6161      	str	r1, [r4, #20]
 8009094:	e7ea      	b.n	800906c <__d2b+0x58>
 8009096:	a801      	add	r0, sp, #4
 8009098:	f7ff fd61 	bl	8008b5e <__lo0bits>
 800909c:	9b01      	ldr	r3, [sp, #4]
 800909e:	6163      	str	r3, [r4, #20]
 80090a0:	3020      	adds	r0, #32
 80090a2:	2201      	movs	r2, #1
 80090a4:	e7e8      	b.n	8009078 <__d2b+0x64>
 80090a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80090ae:	6038      	str	r0, [r7, #0]
 80090b0:	6918      	ldr	r0, [r3, #16]
 80090b2:	f7ff fd35 	bl	8008b20 <__hi0bits>
 80090b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80090ba:	e7e5      	b.n	8009088 <__d2b+0x74>
 80090bc:	08009cf4 	.word	0x08009cf4
 80090c0:	08009d05 	.word	0x08009d05

080090c4 <__ssputs_r>:
 80090c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090c8:	688e      	ldr	r6, [r1, #8]
 80090ca:	461f      	mov	r7, r3
 80090cc:	42be      	cmp	r6, r7
 80090ce:	680b      	ldr	r3, [r1, #0]
 80090d0:	4682      	mov	sl, r0
 80090d2:	460c      	mov	r4, r1
 80090d4:	4690      	mov	r8, r2
 80090d6:	d82d      	bhi.n	8009134 <__ssputs_r+0x70>
 80090d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80090e0:	d026      	beq.n	8009130 <__ssputs_r+0x6c>
 80090e2:	6965      	ldr	r5, [r4, #20]
 80090e4:	6909      	ldr	r1, [r1, #16]
 80090e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090ea:	eba3 0901 	sub.w	r9, r3, r1
 80090ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090f2:	1c7b      	adds	r3, r7, #1
 80090f4:	444b      	add	r3, r9
 80090f6:	106d      	asrs	r5, r5, #1
 80090f8:	429d      	cmp	r5, r3
 80090fa:	bf38      	it	cc
 80090fc:	461d      	movcc	r5, r3
 80090fe:	0553      	lsls	r3, r2, #21
 8009100:	d527      	bpl.n	8009152 <__ssputs_r+0x8e>
 8009102:	4629      	mov	r1, r5
 8009104:	f7ff fbd8 	bl	80088b8 <_malloc_r>
 8009108:	4606      	mov	r6, r0
 800910a:	b360      	cbz	r0, 8009166 <__ssputs_r+0xa2>
 800910c:	6921      	ldr	r1, [r4, #16]
 800910e:	464a      	mov	r2, r9
 8009110:	f7fe fcf7 	bl	8007b02 <memcpy>
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800911a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800911e:	81a3      	strh	r3, [r4, #12]
 8009120:	6126      	str	r6, [r4, #16]
 8009122:	6165      	str	r5, [r4, #20]
 8009124:	444e      	add	r6, r9
 8009126:	eba5 0509 	sub.w	r5, r5, r9
 800912a:	6026      	str	r6, [r4, #0]
 800912c:	60a5      	str	r5, [r4, #8]
 800912e:	463e      	mov	r6, r7
 8009130:	42be      	cmp	r6, r7
 8009132:	d900      	bls.n	8009136 <__ssputs_r+0x72>
 8009134:	463e      	mov	r6, r7
 8009136:	6820      	ldr	r0, [r4, #0]
 8009138:	4632      	mov	r2, r6
 800913a:	4641      	mov	r1, r8
 800913c:	f000 f9c6 	bl	80094cc <memmove>
 8009140:	68a3      	ldr	r3, [r4, #8]
 8009142:	1b9b      	subs	r3, r3, r6
 8009144:	60a3      	str	r3, [r4, #8]
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	4433      	add	r3, r6
 800914a:	6023      	str	r3, [r4, #0]
 800914c:	2000      	movs	r0, #0
 800914e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009152:	462a      	mov	r2, r5
 8009154:	f000 fa28 	bl	80095a8 <_realloc_r>
 8009158:	4606      	mov	r6, r0
 800915a:	2800      	cmp	r0, #0
 800915c:	d1e0      	bne.n	8009120 <__ssputs_r+0x5c>
 800915e:	6921      	ldr	r1, [r4, #16]
 8009160:	4650      	mov	r0, sl
 8009162:	f7ff fb35 	bl	80087d0 <_free_r>
 8009166:	230c      	movs	r3, #12
 8009168:	f8ca 3000 	str.w	r3, [sl]
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009172:	81a3      	strh	r3, [r4, #12]
 8009174:	f04f 30ff 	mov.w	r0, #4294967295
 8009178:	e7e9      	b.n	800914e <__ssputs_r+0x8a>
	...

0800917c <_svfiprintf_r>:
 800917c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009180:	4698      	mov	r8, r3
 8009182:	898b      	ldrh	r3, [r1, #12]
 8009184:	061b      	lsls	r3, r3, #24
 8009186:	b09d      	sub	sp, #116	@ 0x74
 8009188:	4607      	mov	r7, r0
 800918a:	460d      	mov	r5, r1
 800918c:	4614      	mov	r4, r2
 800918e:	d510      	bpl.n	80091b2 <_svfiprintf_r+0x36>
 8009190:	690b      	ldr	r3, [r1, #16]
 8009192:	b973      	cbnz	r3, 80091b2 <_svfiprintf_r+0x36>
 8009194:	2140      	movs	r1, #64	@ 0x40
 8009196:	f7ff fb8f 	bl	80088b8 <_malloc_r>
 800919a:	6028      	str	r0, [r5, #0]
 800919c:	6128      	str	r0, [r5, #16]
 800919e:	b930      	cbnz	r0, 80091ae <_svfiprintf_r+0x32>
 80091a0:	230c      	movs	r3, #12
 80091a2:	603b      	str	r3, [r7, #0]
 80091a4:	f04f 30ff 	mov.w	r0, #4294967295
 80091a8:	b01d      	add	sp, #116	@ 0x74
 80091aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ae:	2340      	movs	r3, #64	@ 0x40
 80091b0:	616b      	str	r3, [r5, #20]
 80091b2:	2300      	movs	r3, #0
 80091b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80091b6:	2320      	movs	r3, #32
 80091b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80091c0:	2330      	movs	r3, #48	@ 0x30
 80091c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009360 <_svfiprintf_r+0x1e4>
 80091c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091ca:	f04f 0901 	mov.w	r9, #1
 80091ce:	4623      	mov	r3, r4
 80091d0:	469a      	mov	sl, r3
 80091d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091d6:	b10a      	cbz	r2, 80091dc <_svfiprintf_r+0x60>
 80091d8:	2a25      	cmp	r2, #37	@ 0x25
 80091da:	d1f9      	bne.n	80091d0 <_svfiprintf_r+0x54>
 80091dc:	ebba 0b04 	subs.w	fp, sl, r4
 80091e0:	d00b      	beq.n	80091fa <_svfiprintf_r+0x7e>
 80091e2:	465b      	mov	r3, fp
 80091e4:	4622      	mov	r2, r4
 80091e6:	4629      	mov	r1, r5
 80091e8:	4638      	mov	r0, r7
 80091ea:	f7ff ff6b 	bl	80090c4 <__ssputs_r>
 80091ee:	3001      	adds	r0, #1
 80091f0:	f000 80a7 	beq.w	8009342 <_svfiprintf_r+0x1c6>
 80091f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091f6:	445a      	add	r2, fp
 80091f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80091fa:	f89a 3000 	ldrb.w	r3, [sl]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 809f 	beq.w	8009342 <_svfiprintf_r+0x1c6>
 8009204:	2300      	movs	r3, #0
 8009206:	f04f 32ff 	mov.w	r2, #4294967295
 800920a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800920e:	f10a 0a01 	add.w	sl, sl, #1
 8009212:	9304      	str	r3, [sp, #16]
 8009214:	9307      	str	r3, [sp, #28]
 8009216:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800921a:	931a      	str	r3, [sp, #104]	@ 0x68
 800921c:	4654      	mov	r4, sl
 800921e:	2205      	movs	r2, #5
 8009220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009224:	484e      	ldr	r0, [pc, #312]	@ (8009360 <_svfiprintf_r+0x1e4>)
 8009226:	f7f6 ffdb 	bl	80001e0 <memchr>
 800922a:	9a04      	ldr	r2, [sp, #16]
 800922c:	b9d8      	cbnz	r0, 8009266 <_svfiprintf_r+0xea>
 800922e:	06d0      	lsls	r0, r2, #27
 8009230:	bf44      	itt	mi
 8009232:	2320      	movmi	r3, #32
 8009234:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009238:	0711      	lsls	r1, r2, #28
 800923a:	bf44      	itt	mi
 800923c:	232b      	movmi	r3, #43	@ 0x2b
 800923e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009242:	f89a 3000 	ldrb.w	r3, [sl]
 8009246:	2b2a      	cmp	r3, #42	@ 0x2a
 8009248:	d015      	beq.n	8009276 <_svfiprintf_r+0xfa>
 800924a:	9a07      	ldr	r2, [sp, #28]
 800924c:	4654      	mov	r4, sl
 800924e:	2000      	movs	r0, #0
 8009250:	f04f 0c0a 	mov.w	ip, #10
 8009254:	4621      	mov	r1, r4
 8009256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800925a:	3b30      	subs	r3, #48	@ 0x30
 800925c:	2b09      	cmp	r3, #9
 800925e:	d94b      	bls.n	80092f8 <_svfiprintf_r+0x17c>
 8009260:	b1b0      	cbz	r0, 8009290 <_svfiprintf_r+0x114>
 8009262:	9207      	str	r2, [sp, #28]
 8009264:	e014      	b.n	8009290 <_svfiprintf_r+0x114>
 8009266:	eba0 0308 	sub.w	r3, r0, r8
 800926a:	fa09 f303 	lsl.w	r3, r9, r3
 800926e:	4313      	orrs	r3, r2
 8009270:	9304      	str	r3, [sp, #16]
 8009272:	46a2      	mov	sl, r4
 8009274:	e7d2      	b.n	800921c <_svfiprintf_r+0xa0>
 8009276:	9b03      	ldr	r3, [sp, #12]
 8009278:	1d19      	adds	r1, r3, #4
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	9103      	str	r1, [sp, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	bfbb      	ittet	lt
 8009282:	425b      	neglt	r3, r3
 8009284:	f042 0202 	orrlt.w	r2, r2, #2
 8009288:	9307      	strge	r3, [sp, #28]
 800928a:	9307      	strlt	r3, [sp, #28]
 800928c:	bfb8      	it	lt
 800928e:	9204      	strlt	r2, [sp, #16]
 8009290:	7823      	ldrb	r3, [r4, #0]
 8009292:	2b2e      	cmp	r3, #46	@ 0x2e
 8009294:	d10a      	bne.n	80092ac <_svfiprintf_r+0x130>
 8009296:	7863      	ldrb	r3, [r4, #1]
 8009298:	2b2a      	cmp	r3, #42	@ 0x2a
 800929a:	d132      	bne.n	8009302 <_svfiprintf_r+0x186>
 800929c:	9b03      	ldr	r3, [sp, #12]
 800929e:	1d1a      	adds	r2, r3, #4
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	9203      	str	r2, [sp, #12]
 80092a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092a8:	3402      	adds	r4, #2
 80092aa:	9305      	str	r3, [sp, #20]
 80092ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009370 <_svfiprintf_r+0x1f4>
 80092b0:	7821      	ldrb	r1, [r4, #0]
 80092b2:	2203      	movs	r2, #3
 80092b4:	4650      	mov	r0, sl
 80092b6:	f7f6 ff93 	bl	80001e0 <memchr>
 80092ba:	b138      	cbz	r0, 80092cc <_svfiprintf_r+0x150>
 80092bc:	9b04      	ldr	r3, [sp, #16]
 80092be:	eba0 000a 	sub.w	r0, r0, sl
 80092c2:	2240      	movs	r2, #64	@ 0x40
 80092c4:	4082      	lsls	r2, r0
 80092c6:	4313      	orrs	r3, r2
 80092c8:	3401      	adds	r4, #1
 80092ca:	9304      	str	r3, [sp, #16]
 80092cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d0:	4824      	ldr	r0, [pc, #144]	@ (8009364 <_svfiprintf_r+0x1e8>)
 80092d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092d6:	2206      	movs	r2, #6
 80092d8:	f7f6 ff82 	bl	80001e0 <memchr>
 80092dc:	2800      	cmp	r0, #0
 80092de:	d036      	beq.n	800934e <_svfiprintf_r+0x1d2>
 80092e0:	4b21      	ldr	r3, [pc, #132]	@ (8009368 <_svfiprintf_r+0x1ec>)
 80092e2:	bb1b      	cbnz	r3, 800932c <_svfiprintf_r+0x1b0>
 80092e4:	9b03      	ldr	r3, [sp, #12]
 80092e6:	3307      	adds	r3, #7
 80092e8:	f023 0307 	bic.w	r3, r3, #7
 80092ec:	3308      	adds	r3, #8
 80092ee:	9303      	str	r3, [sp, #12]
 80092f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092f2:	4433      	add	r3, r6
 80092f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80092f6:	e76a      	b.n	80091ce <_svfiprintf_r+0x52>
 80092f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80092fc:	460c      	mov	r4, r1
 80092fe:	2001      	movs	r0, #1
 8009300:	e7a8      	b.n	8009254 <_svfiprintf_r+0xd8>
 8009302:	2300      	movs	r3, #0
 8009304:	3401      	adds	r4, #1
 8009306:	9305      	str	r3, [sp, #20]
 8009308:	4619      	mov	r1, r3
 800930a:	f04f 0c0a 	mov.w	ip, #10
 800930e:	4620      	mov	r0, r4
 8009310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009314:	3a30      	subs	r2, #48	@ 0x30
 8009316:	2a09      	cmp	r2, #9
 8009318:	d903      	bls.n	8009322 <_svfiprintf_r+0x1a6>
 800931a:	2b00      	cmp	r3, #0
 800931c:	d0c6      	beq.n	80092ac <_svfiprintf_r+0x130>
 800931e:	9105      	str	r1, [sp, #20]
 8009320:	e7c4      	b.n	80092ac <_svfiprintf_r+0x130>
 8009322:	fb0c 2101 	mla	r1, ip, r1, r2
 8009326:	4604      	mov	r4, r0
 8009328:	2301      	movs	r3, #1
 800932a:	e7f0      	b.n	800930e <_svfiprintf_r+0x192>
 800932c:	ab03      	add	r3, sp, #12
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	462a      	mov	r2, r5
 8009332:	4b0e      	ldr	r3, [pc, #56]	@ (800936c <_svfiprintf_r+0x1f0>)
 8009334:	a904      	add	r1, sp, #16
 8009336:	4638      	mov	r0, r7
 8009338:	f7fd fe86 	bl	8007048 <_printf_float>
 800933c:	1c42      	adds	r2, r0, #1
 800933e:	4606      	mov	r6, r0
 8009340:	d1d6      	bne.n	80092f0 <_svfiprintf_r+0x174>
 8009342:	89ab      	ldrh	r3, [r5, #12]
 8009344:	065b      	lsls	r3, r3, #25
 8009346:	f53f af2d 	bmi.w	80091a4 <_svfiprintf_r+0x28>
 800934a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800934c:	e72c      	b.n	80091a8 <_svfiprintf_r+0x2c>
 800934e:	ab03      	add	r3, sp, #12
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	462a      	mov	r2, r5
 8009354:	4b05      	ldr	r3, [pc, #20]	@ (800936c <_svfiprintf_r+0x1f0>)
 8009356:	a904      	add	r1, sp, #16
 8009358:	4638      	mov	r0, r7
 800935a:	f7fe f90d 	bl	8007578 <_printf_i>
 800935e:	e7ed      	b.n	800933c <_svfiprintf_r+0x1c0>
 8009360:	08009d5e 	.word	0x08009d5e
 8009364:	08009d68 	.word	0x08009d68
 8009368:	08007049 	.word	0x08007049
 800936c:	080090c5 	.word	0x080090c5
 8009370:	08009d64 	.word	0x08009d64

08009374 <__sflush_r>:
 8009374:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800937c:	0716      	lsls	r6, r2, #28
 800937e:	4605      	mov	r5, r0
 8009380:	460c      	mov	r4, r1
 8009382:	d454      	bmi.n	800942e <__sflush_r+0xba>
 8009384:	684b      	ldr	r3, [r1, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	dc02      	bgt.n	8009390 <__sflush_r+0x1c>
 800938a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800938c:	2b00      	cmp	r3, #0
 800938e:	dd48      	ble.n	8009422 <__sflush_r+0xae>
 8009390:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009392:	2e00      	cmp	r6, #0
 8009394:	d045      	beq.n	8009422 <__sflush_r+0xae>
 8009396:	2300      	movs	r3, #0
 8009398:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800939c:	682f      	ldr	r7, [r5, #0]
 800939e:	6a21      	ldr	r1, [r4, #32]
 80093a0:	602b      	str	r3, [r5, #0]
 80093a2:	d030      	beq.n	8009406 <__sflush_r+0x92>
 80093a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	0759      	lsls	r1, r3, #29
 80093aa:	d505      	bpl.n	80093b8 <__sflush_r+0x44>
 80093ac:	6863      	ldr	r3, [r4, #4]
 80093ae:	1ad2      	subs	r2, r2, r3
 80093b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80093b2:	b10b      	cbz	r3, 80093b8 <__sflush_r+0x44>
 80093b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80093b6:	1ad2      	subs	r2, r2, r3
 80093b8:	2300      	movs	r3, #0
 80093ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093bc:	6a21      	ldr	r1, [r4, #32]
 80093be:	4628      	mov	r0, r5
 80093c0:	47b0      	blx	r6
 80093c2:	1c43      	adds	r3, r0, #1
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	d106      	bne.n	80093d6 <__sflush_r+0x62>
 80093c8:	6829      	ldr	r1, [r5, #0]
 80093ca:	291d      	cmp	r1, #29
 80093cc:	d82b      	bhi.n	8009426 <__sflush_r+0xb2>
 80093ce:	4a2a      	ldr	r2, [pc, #168]	@ (8009478 <__sflush_r+0x104>)
 80093d0:	40ca      	lsrs	r2, r1
 80093d2:	07d6      	lsls	r6, r2, #31
 80093d4:	d527      	bpl.n	8009426 <__sflush_r+0xb2>
 80093d6:	2200      	movs	r2, #0
 80093d8:	6062      	str	r2, [r4, #4]
 80093da:	04d9      	lsls	r1, r3, #19
 80093dc:	6922      	ldr	r2, [r4, #16]
 80093de:	6022      	str	r2, [r4, #0]
 80093e0:	d504      	bpl.n	80093ec <__sflush_r+0x78>
 80093e2:	1c42      	adds	r2, r0, #1
 80093e4:	d101      	bne.n	80093ea <__sflush_r+0x76>
 80093e6:	682b      	ldr	r3, [r5, #0]
 80093e8:	b903      	cbnz	r3, 80093ec <__sflush_r+0x78>
 80093ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80093ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093ee:	602f      	str	r7, [r5, #0]
 80093f0:	b1b9      	cbz	r1, 8009422 <__sflush_r+0xae>
 80093f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093f6:	4299      	cmp	r1, r3
 80093f8:	d002      	beq.n	8009400 <__sflush_r+0x8c>
 80093fa:	4628      	mov	r0, r5
 80093fc:	f7ff f9e8 	bl	80087d0 <_free_r>
 8009400:	2300      	movs	r3, #0
 8009402:	6363      	str	r3, [r4, #52]	@ 0x34
 8009404:	e00d      	b.n	8009422 <__sflush_r+0xae>
 8009406:	2301      	movs	r3, #1
 8009408:	4628      	mov	r0, r5
 800940a:	47b0      	blx	r6
 800940c:	4602      	mov	r2, r0
 800940e:	1c50      	adds	r0, r2, #1
 8009410:	d1c9      	bne.n	80093a6 <__sflush_r+0x32>
 8009412:	682b      	ldr	r3, [r5, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d0c6      	beq.n	80093a6 <__sflush_r+0x32>
 8009418:	2b1d      	cmp	r3, #29
 800941a:	d001      	beq.n	8009420 <__sflush_r+0xac>
 800941c:	2b16      	cmp	r3, #22
 800941e:	d11e      	bne.n	800945e <__sflush_r+0xea>
 8009420:	602f      	str	r7, [r5, #0]
 8009422:	2000      	movs	r0, #0
 8009424:	e022      	b.n	800946c <__sflush_r+0xf8>
 8009426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800942a:	b21b      	sxth	r3, r3
 800942c:	e01b      	b.n	8009466 <__sflush_r+0xf2>
 800942e:	690f      	ldr	r7, [r1, #16]
 8009430:	2f00      	cmp	r7, #0
 8009432:	d0f6      	beq.n	8009422 <__sflush_r+0xae>
 8009434:	0793      	lsls	r3, r2, #30
 8009436:	680e      	ldr	r6, [r1, #0]
 8009438:	bf08      	it	eq
 800943a:	694b      	ldreq	r3, [r1, #20]
 800943c:	600f      	str	r7, [r1, #0]
 800943e:	bf18      	it	ne
 8009440:	2300      	movne	r3, #0
 8009442:	eba6 0807 	sub.w	r8, r6, r7
 8009446:	608b      	str	r3, [r1, #8]
 8009448:	f1b8 0f00 	cmp.w	r8, #0
 800944c:	dde9      	ble.n	8009422 <__sflush_r+0xae>
 800944e:	6a21      	ldr	r1, [r4, #32]
 8009450:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009452:	4643      	mov	r3, r8
 8009454:	463a      	mov	r2, r7
 8009456:	4628      	mov	r0, r5
 8009458:	47b0      	blx	r6
 800945a:	2800      	cmp	r0, #0
 800945c:	dc08      	bgt.n	8009470 <__sflush_r+0xfc>
 800945e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009466:	81a3      	strh	r3, [r4, #12]
 8009468:	f04f 30ff 	mov.w	r0, #4294967295
 800946c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009470:	4407      	add	r7, r0
 8009472:	eba8 0800 	sub.w	r8, r8, r0
 8009476:	e7e7      	b.n	8009448 <__sflush_r+0xd4>
 8009478:	20400001 	.word	0x20400001

0800947c <_fflush_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	690b      	ldr	r3, [r1, #16]
 8009480:	4605      	mov	r5, r0
 8009482:	460c      	mov	r4, r1
 8009484:	b913      	cbnz	r3, 800948c <_fflush_r+0x10>
 8009486:	2500      	movs	r5, #0
 8009488:	4628      	mov	r0, r5
 800948a:	bd38      	pop	{r3, r4, r5, pc}
 800948c:	b118      	cbz	r0, 8009496 <_fflush_r+0x1a>
 800948e:	6a03      	ldr	r3, [r0, #32]
 8009490:	b90b      	cbnz	r3, 8009496 <_fflush_r+0x1a>
 8009492:	f7fe fa1b 	bl	80078cc <__sinit>
 8009496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0f3      	beq.n	8009486 <_fflush_r+0xa>
 800949e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094a0:	07d0      	lsls	r0, r2, #31
 80094a2:	d404      	bmi.n	80094ae <_fflush_r+0x32>
 80094a4:	0599      	lsls	r1, r3, #22
 80094a6:	d402      	bmi.n	80094ae <_fflush_r+0x32>
 80094a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094aa:	f7fe fb28 	bl	8007afe <__retarget_lock_acquire_recursive>
 80094ae:	4628      	mov	r0, r5
 80094b0:	4621      	mov	r1, r4
 80094b2:	f7ff ff5f 	bl	8009374 <__sflush_r>
 80094b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094b8:	07da      	lsls	r2, r3, #31
 80094ba:	4605      	mov	r5, r0
 80094bc:	d4e4      	bmi.n	8009488 <_fflush_r+0xc>
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	059b      	lsls	r3, r3, #22
 80094c2:	d4e1      	bmi.n	8009488 <_fflush_r+0xc>
 80094c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094c6:	f7fe fb1b 	bl	8007b00 <__retarget_lock_release_recursive>
 80094ca:	e7dd      	b.n	8009488 <_fflush_r+0xc>

080094cc <memmove>:
 80094cc:	4288      	cmp	r0, r1
 80094ce:	b510      	push	{r4, lr}
 80094d0:	eb01 0402 	add.w	r4, r1, r2
 80094d4:	d902      	bls.n	80094dc <memmove+0x10>
 80094d6:	4284      	cmp	r4, r0
 80094d8:	4623      	mov	r3, r4
 80094da:	d807      	bhi.n	80094ec <memmove+0x20>
 80094dc:	1e43      	subs	r3, r0, #1
 80094de:	42a1      	cmp	r1, r4
 80094e0:	d008      	beq.n	80094f4 <memmove+0x28>
 80094e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094ea:	e7f8      	b.n	80094de <memmove+0x12>
 80094ec:	4402      	add	r2, r0
 80094ee:	4601      	mov	r1, r0
 80094f0:	428a      	cmp	r2, r1
 80094f2:	d100      	bne.n	80094f6 <memmove+0x2a>
 80094f4:	bd10      	pop	{r4, pc}
 80094f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094fe:	e7f7      	b.n	80094f0 <memmove+0x24>

08009500 <_sbrk_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4d06      	ldr	r5, [pc, #24]	@ (800951c <_sbrk_r+0x1c>)
 8009504:	2300      	movs	r3, #0
 8009506:	4604      	mov	r4, r0
 8009508:	4608      	mov	r0, r1
 800950a:	602b      	str	r3, [r5, #0]
 800950c:	f7f8 fcd4 	bl	8001eb8 <_sbrk>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d102      	bne.n	800951a <_sbrk_r+0x1a>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	b103      	cbz	r3, 800951a <_sbrk_r+0x1a>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	20004e60 	.word	0x20004e60

08009520 <__assert_func>:
 8009520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009522:	4614      	mov	r4, r2
 8009524:	461a      	mov	r2, r3
 8009526:	4b09      	ldr	r3, [pc, #36]	@ (800954c <__assert_func+0x2c>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4605      	mov	r5, r0
 800952c:	68d8      	ldr	r0, [r3, #12]
 800952e:	b14c      	cbz	r4, 8009544 <__assert_func+0x24>
 8009530:	4b07      	ldr	r3, [pc, #28]	@ (8009550 <__assert_func+0x30>)
 8009532:	9100      	str	r1, [sp, #0]
 8009534:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009538:	4906      	ldr	r1, [pc, #24]	@ (8009554 <__assert_func+0x34>)
 800953a:	462b      	mov	r3, r5
 800953c:	f000 f870 	bl	8009620 <fiprintf>
 8009540:	f000 f880 	bl	8009644 <abort>
 8009544:	4b04      	ldr	r3, [pc, #16]	@ (8009558 <__assert_func+0x38>)
 8009546:	461c      	mov	r4, r3
 8009548:	e7f3      	b.n	8009532 <__assert_func+0x12>
 800954a:	bf00      	nop
 800954c:	2000001c 	.word	0x2000001c
 8009550:	08009d79 	.word	0x08009d79
 8009554:	08009d86 	.word	0x08009d86
 8009558:	08009db4 	.word	0x08009db4

0800955c <_calloc_r>:
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	fba1 5402 	umull	r5, r4, r1, r2
 8009562:	b934      	cbnz	r4, 8009572 <_calloc_r+0x16>
 8009564:	4629      	mov	r1, r5
 8009566:	f7ff f9a7 	bl	80088b8 <_malloc_r>
 800956a:	4606      	mov	r6, r0
 800956c:	b928      	cbnz	r0, 800957a <_calloc_r+0x1e>
 800956e:	4630      	mov	r0, r6
 8009570:	bd70      	pop	{r4, r5, r6, pc}
 8009572:	220c      	movs	r2, #12
 8009574:	6002      	str	r2, [r0, #0]
 8009576:	2600      	movs	r6, #0
 8009578:	e7f9      	b.n	800956e <_calloc_r+0x12>
 800957a:	462a      	mov	r2, r5
 800957c:	4621      	mov	r1, r4
 800957e:	f7fe fa40 	bl	8007a02 <memset>
 8009582:	e7f4      	b.n	800956e <_calloc_r+0x12>

08009584 <__ascii_mbtowc>:
 8009584:	b082      	sub	sp, #8
 8009586:	b901      	cbnz	r1, 800958a <__ascii_mbtowc+0x6>
 8009588:	a901      	add	r1, sp, #4
 800958a:	b142      	cbz	r2, 800959e <__ascii_mbtowc+0x1a>
 800958c:	b14b      	cbz	r3, 80095a2 <__ascii_mbtowc+0x1e>
 800958e:	7813      	ldrb	r3, [r2, #0]
 8009590:	600b      	str	r3, [r1, #0]
 8009592:	7812      	ldrb	r2, [r2, #0]
 8009594:	1e10      	subs	r0, r2, #0
 8009596:	bf18      	it	ne
 8009598:	2001      	movne	r0, #1
 800959a:	b002      	add	sp, #8
 800959c:	4770      	bx	lr
 800959e:	4610      	mov	r0, r2
 80095a0:	e7fb      	b.n	800959a <__ascii_mbtowc+0x16>
 80095a2:	f06f 0001 	mvn.w	r0, #1
 80095a6:	e7f8      	b.n	800959a <__ascii_mbtowc+0x16>

080095a8 <_realloc_r>:
 80095a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ac:	4607      	mov	r7, r0
 80095ae:	4614      	mov	r4, r2
 80095b0:	460d      	mov	r5, r1
 80095b2:	b921      	cbnz	r1, 80095be <_realloc_r+0x16>
 80095b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095b8:	4611      	mov	r1, r2
 80095ba:	f7ff b97d 	b.w	80088b8 <_malloc_r>
 80095be:	b92a      	cbnz	r2, 80095cc <_realloc_r+0x24>
 80095c0:	f7ff f906 	bl	80087d0 <_free_r>
 80095c4:	4625      	mov	r5, r4
 80095c6:	4628      	mov	r0, r5
 80095c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095cc:	f000 f841 	bl	8009652 <_malloc_usable_size_r>
 80095d0:	4284      	cmp	r4, r0
 80095d2:	4606      	mov	r6, r0
 80095d4:	d802      	bhi.n	80095dc <_realloc_r+0x34>
 80095d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095da:	d8f4      	bhi.n	80095c6 <_realloc_r+0x1e>
 80095dc:	4621      	mov	r1, r4
 80095de:	4638      	mov	r0, r7
 80095e0:	f7ff f96a 	bl	80088b8 <_malloc_r>
 80095e4:	4680      	mov	r8, r0
 80095e6:	b908      	cbnz	r0, 80095ec <_realloc_r+0x44>
 80095e8:	4645      	mov	r5, r8
 80095ea:	e7ec      	b.n	80095c6 <_realloc_r+0x1e>
 80095ec:	42b4      	cmp	r4, r6
 80095ee:	4622      	mov	r2, r4
 80095f0:	4629      	mov	r1, r5
 80095f2:	bf28      	it	cs
 80095f4:	4632      	movcs	r2, r6
 80095f6:	f7fe fa84 	bl	8007b02 <memcpy>
 80095fa:	4629      	mov	r1, r5
 80095fc:	4638      	mov	r0, r7
 80095fe:	f7ff f8e7 	bl	80087d0 <_free_r>
 8009602:	e7f1      	b.n	80095e8 <_realloc_r+0x40>

08009604 <__ascii_wctomb>:
 8009604:	4603      	mov	r3, r0
 8009606:	4608      	mov	r0, r1
 8009608:	b141      	cbz	r1, 800961c <__ascii_wctomb+0x18>
 800960a:	2aff      	cmp	r2, #255	@ 0xff
 800960c:	d904      	bls.n	8009618 <__ascii_wctomb+0x14>
 800960e:	228a      	movs	r2, #138	@ 0x8a
 8009610:	601a      	str	r2, [r3, #0]
 8009612:	f04f 30ff 	mov.w	r0, #4294967295
 8009616:	4770      	bx	lr
 8009618:	700a      	strb	r2, [r1, #0]
 800961a:	2001      	movs	r0, #1
 800961c:	4770      	bx	lr
	...

08009620 <fiprintf>:
 8009620:	b40e      	push	{r1, r2, r3}
 8009622:	b503      	push	{r0, r1, lr}
 8009624:	4601      	mov	r1, r0
 8009626:	ab03      	add	r3, sp, #12
 8009628:	4805      	ldr	r0, [pc, #20]	@ (8009640 <fiprintf+0x20>)
 800962a:	f853 2b04 	ldr.w	r2, [r3], #4
 800962e:	6800      	ldr	r0, [r0, #0]
 8009630:	9301      	str	r3, [sp, #4]
 8009632:	f000 f83f 	bl	80096b4 <_vfiprintf_r>
 8009636:	b002      	add	sp, #8
 8009638:	f85d eb04 	ldr.w	lr, [sp], #4
 800963c:	b003      	add	sp, #12
 800963e:	4770      	bx	lr
 8009640:	2000001c 	.word	0x2000001c

08009644 <abort>:
 8009644:	b508      	push	{r3, lr}
 8009646:	2006      	movs	r0, #6
 8009648:	f000 fa08 	bl	8009a5c <raise>
 800964c:	2001      	movs	r0, #1
 800964e:	f7f8 fbbb 	bl	8001dc8 <_exit>

08009652 <_malloc_usable_size_r>:
 8009652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009656:	1f18      	subs	r0, r3, #4
 8009658:	2b00      	cmp	r3, #0
 800965a:	bfbc      	itt	lt
 800965c:	580b      	ldrlt	r3, [r1, r0]
 800965e:	18c0      	addlt	r0, r0, r3
 8009660:	4770      	bx	lr

08009662 <__sfputc_r>:
 8009662:	6893      	ldr	r3, [r2, #8]
 8009664:	3b01      	subs	r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	b410      	push	{r4}
 800966a:	6093      	str	r3, [r2, #8]
 800966c:	da08      	bge.n	8009680 <__sfputc_r+0x1e>
 800966e:	6994      	ldr	r4, [r2, #24]
 8009670:	42a3      	cmp	r3, r4
 8009672:	db01      	blt.n	8009678 <__sfputc_r+0x16>
 8009674:	290a      	cmp	r1, #10
 8009676:	d103      	bne.n	8009680 <__sfputc_r+0x1e>
 8009678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800967c:	f000 b932 	b.w	80098e4 <__swbuf_r>
 8009680:	6813      	ldr	r3, [r2, #0]
 8009682:	1c58      	adds	r0, r3, #1
 8009684:	6010      	str	r0, [r2, #0]
 8009686:	7019      	strb	r1, [r3, #0]
 8009688:	4608      	mov	r0, r1
 800968a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800968e:	4770      	bx	lr

08009690 <__sfputs_r>:
 8009690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009692:	4606      	mov	r6, r0
 8009694:	460f      	mov	r7, r1
 8009696:	4614      	mov	r4, r2
 8009698:	18d5      	adds	r5, r2, r3
 800969a:	42ac      	cmp	r4, r5
 800969c:	d101      	bne.n	80096a2 <__sfputs_r+0x12>
 800969e:	2000      	movs	r0, #0
 80096a0:	e007      	b.n	80096b2 <__sfputs_r+0x22>
 80096a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a6:	463a      	mov	r2, r7
 80096a8:	4630      	mov	r0, r6
 80096aa:	f7ff ffda 	bl	8009662 <__sfputc_r>
 80096ae:	1c43      	adds	r3, r0, #1
 80096b0:	d1f3      	bne.n	800969a <__sfputs_r+0xa>
 80096b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080096b4 <_vfiprintf_r>:
 80096b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b8:	460d      	mov	r5, r1
 80096ba:	b09d      	sub	sp, #116	@ 0x74
 80096bc:	4614      	mov	r4, r2
 80096be:	4698      	mov	r8, r3
 80096c0:	4606      	mov	r6, r0
 80096c2:	b118      	cbz	r0, 80096cc <_vfiprintf_r+0x18>
 80096c4:	6a03      	ldr	r3, [r0, #32]
 80096c6:	b90b      	cbnz	r3, 80096cc <_vfiprintf_r+0x18>
 80096c8:	f7fe f900 	bl	80078cc <__sinit>
 80096cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096ce:	07d9      	lsls	r1, r3, #31
 80096d0:	d405      	bmi.n	80096de <_vfiprintf_r+0x2a>
 80096d2:	89ab      	ldrh	r3, [r5, #12]
 80096d4:	059a      	lsls	r2, r3, #22
 80096d6:	d402      	bmi.n	80096de <_vfiprintf_r+0x2a>
 80096d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096da:	f7fe fa10 	bl	8007afe <__retarget_lock_acquire_recursive>
 80096de:	89ab      	ldrh	r3, [r5, #12]
 80096e0:	071b      	lsls	r3, r3, #28
 80096e2:	d501      	bpl.n	80096e8 <_vfiprintf_r+0x34>
 80096e4:	692b      	ldr	r3, [r5, #16]
 80096e6:	b99b      	cbnz	r3, 8009710 <_vfiprintf_r+0x5c>
 80096e8:	4629      	mov	r1, r5
 80096ea:	4630      	mov	r0, r6
 80096ec:	f000 f938 	bl	8009960 <__swsetup_r>
 80096f0:	b170      	cbz	r0, 8009710 <_vfiprintf_r+0x5c>
 80096f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096f4:	07dc      	lsls	r4, r3, #31
 80096f6:	d504      	bpl.n	8009702 <_vfiprintf_r+0x4e>
 80096f8:	f04f 30ff 	mov.w	r0, #4294967295
 80096fc:	b01d      	add	sp, #116	@ 0x74
 80096fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009702:	89ab      	ldrh	r3, [r5, #12]
 8009704:	0598      	lsls	r0, r3, #22
 8009706:	d4f7      	bmi.n	80096f8 <_vfiprintf_r+0x44>
 8009708:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800970a:	f7fe f9f9 	bl	8007b00 <__retarget_lock_release_recursive>
 800970e:	e7f3      	b.n	80096f8 <_vfiprintf_r+0x44>
 8009710:	2300      	movs	r3, #0
 8009712:	9309      	str	r3, [sp, #36]	@ 0x24
 8009714:	2320      	movs	r3, #32
 8009716:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800971a:	f8cd 800c 	str.w	r8, [sp, #12]
 800971e:	2330      	movs	r3, #48	@ 0x30
 8009720:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80098d0 <_vfiprintf_r+0x21c>
 8009724:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009728:	f04f 0901 	mov.w	r9, #1
 800972c:	4623      	mov	r3, r4
 800972e:	469a      	mov	sl, r3
 8009730:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009734:	b10a      	cbz	r2, 800973a <_vfiprintf_r+0x86>
 8009736:	2a25      	cmp	r2, #37	@ 0x25
 8009738:	d1f9      	bne.n	800972e <_vfiprintf_r+0x7a>
 800973a:	ebba 0b04 	subs.w	fp, sl, r4
 800973e:	d00b      	beq.n	8009758 <_vfiprintf_r+0xa4>
 8009740:	465b      	mov	r3, fp
 8009742:	4622      	mov	r2, r4
 8009744:	4629      	mov	r1, r5
 8009746:	4630      	mov	r0, r6
 8009748:	f7ff ffa2 	bl	8009690 <__sfputs_r>
 800974c:	3001      	adds	r0, #1
 800974e:	f000 80a7 	beq.w	80098a0 <_vfiprintf_r+0x1ec>
 8009752:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009754:	445a      	add	r2, fp
 8009756:	9209      	str	r2, [sp, #36]	@ 0x24
 8009758:	f89a 3000 	ldrb.w	r3, [sl]
 800975c:	2b00      	cmp	r3, #0
 800975e:	f000 809f 	beq.w	80098a0 <_vfiprintf_r+0x1ec>
 8009762:	2300      	movs	r3, #0
 8009764:	f04f 32ff 	mov.w	r2, #4294967295
 8009768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800976c:	f10a 0a01 	add.w	sl, sl, #1
 8009770:	9304      	str	r3, [sp, #16]
 8009772:	9307      	str	r3, [sp, #28]
 8009774:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009778:	931a      	str	r3, [sp, #104]	@ 0x68
 800977a:	4654      	mov	r4, sl
 800977c:	2205      	movs	r2, #5
 800977e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009782:	4853      	ldr	r0, [pc, #332]	@ (80098d0 <_vfiprintf_r+0x21c>)
 8009784:	f7f6 fd2c 	bl	80001e0 <memchr>
 8009788:	9a04      	ldr	r2, [sp, #16]
 800978a:	b9d8      	cbnz	r0, 80097c4 <_vfiprintf_r+0x110>
 800978c:	06d1      	lsls	r1, r2, #27
 800978e:	bf44      	itt	mi
 8009790:	2320      	movmi	r3, #32
 8009792:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009796:	0713      	lsls	r3, r2, #28
 8009798:	bf44      	itt	mi
 800979a:	232b      	movmi	r3, #43	@ 0x2b
 800979c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097a0:	f89a 3000 	ldrb.w	r3, [sl]
 80097a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80097a6:	d015      	beq.n	80097d4 <_vfiprintf_r+0x120>
 80097a8:	9a07      	ldr	r2, [sp, #28]
 80097aa:	4654      	mov	r4, sl
 80097ac:	2000      	movs	r0, #0
 80097ae:	f04f 0c0a 	mov.w	ip, #10
 80097b2:	4621      	mov	r1, r4
 80097b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097b8:	3b30      	subs	r3, #48	@ 0x30
 80097ba:	2b09      	cmp	r3, #9
 80097bc:	d94b      	bls.n	8009856 <_vfiprintf_r+0x1a2>
 80097be:	b1b0      	cbz	r0, 80097ee <_vfiprintf_r+0x13a>
 80097c0:	9207      	str	r2, [sp, #28]
 80097c2:	e014      	b.n	80097ee <_vfiprintf_r+0x13a>
 80097c4:	eba0 0308 	sub.w	r3, r0, r8
 80097c8:	fa09 f303 	lsl.w	r3, r9, r3
 80097cc:	4313      	orrs	r3, r2
 80097ce:	9304      	str	r3, [sp, #16]
 80097d0:	46a2      	mov	sl, r4
 80097d2:	e7d2      	b.n	800977a <_vfiprintf_r+0xc6>
 80097d4:	9b03      	ldr	r3, [sp, #12]
 80097d6:	1d19      	adds	r1, r3, #4
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	9103      	str	r1, [sp, #12]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	bfbb      	ittet	lt
 80097e0:	425b      	neglt	r3, r3
 80097e2:	f042 0202 	orrlt.w	r2, r2, #2
 80097e6:	9307      	strge	r3, [sp, #28]
 80097e8:	9307      	strlt	r3, [sp, #28]
 80097ea:	bfb8      	it	lt
 80097ec:	9204      	strlt	r2, [sp, #16]
 80097ee:	7823      	ldrb	r3, [r4, #0]
 80097f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80097f2:	d10a      	bne.n	800980a <_vfiprintf_r+0x156>
 80097f4:	7863      	ldrb	r3, [r4, #1]
 80097f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80097f8:	d132      	bne.n	8009860 <_vfiprintf_r+0x1ac>
 80097fa:	9b03      	ldr	r3, [sp, #12]
 80097fc:	1d1a      	adds	r2, r3, #4
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	9203      	str	r2, [sp, #12]
 8009802:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009806:	3402      	adds	r4, #2
 8009808:	9305      	str	r3, [sp, #20]
 800980a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80098e0 <_vfiprintf_r+0x22c>
 800980e:	7821      	ldrb	r1, [r4, #0]
 8009810:	2203      	movs	r2, #3
 8009812:	4650      	mov	r0, sl
 8009814:	f7f6 fce4 	bl	80001e0 <memchr>
 8009818:	b138      	cbz	r0, 800982a <_vfiprintf_r+0x176>
 800981a:	9b04      	ldr	r3, [sp, #16]
 800981c:	eba0 000a 	sub.w	r0, r0, sl
 8009820:	2240      	movs	r2, #64	@ 0x40
 8009822:	4082      	lsls	r2, r0
 8009824:	4313      	orrs	r3, r2
 8009826:	3401      	adds	r4, #1
 8009828:	9304      	str	r3, [sp, #16]
 800982a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800982e:	4829      	ldr	r0, [pc, #164]	@ (80098d4 <_vfiprintf_r+0x220>)
 8009830:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009834:	2206      	movs	r2, #6
 8009836:	f7f6 fcd3 	bl	80001e0 <memchr>
 800983a:	2800      	cmp	r0, #0
 800983c:	d03f      	beq.n	80098be <_vfiprintf_r+0x20a>
 800983e:	4b26      	ldr	r3, [pc, #152]	@ (80098d8 <_vfiprintf_r+0x224>)
 8009840:	bb1b      	cbnz	r3, 800988a <_vfiprintf_r+0x1d6>
 8009842:	9b03      	ldr	r3, [sp, #12]
 8009844:	3307      	adds	r3, #7
 8009846:	f023 0307 	bic.w	r3, r3, #7
 800984a:	3308      	adds	r3, #8
 800984c:	9303      	str	r3, [sp, #12]
 800984e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009850:	443b      	add	r3, r7
 8009852:	9309      	str	r3, [sp, #36]	@ 0x24
 8009854:	e76a      	b.n	800972c <_vfiprintf_r+0x78>
 8009856:	fb0c 3202 	mla	r2, ip, r2, r3
 800985a:	460c      	mov	r4, r1
 800985c:	2001      	movs	r0, #1
 800985e:	e7a8      	b.n	80097b2 <_vfiprintf_r+0xfe>
 8009860:	2300      	movs	r3, #0
 8009862:	3401      	adds	r4, #1
 8009864:	9305      	str	r3, [sp, #20]
 8009866:	4619      	mov	r1, r3
 8009868:	f04f 0c0a 	mov.w	ip, #10
 800986c:	4620      	mov	r0, r4
 800986e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009872:	3a30      	subs	r2, #48	@ 0x30
 8009874:	2a09      	cmp	r2, #9
 8009876:	d903      	bls.n	8009880 <_vfiprintf_r+0x1cc>
 8009878:	2b00      	cmp	r3, #0
 800987a:	d0c6      	beq.n	800980a <_vfiprintf_r+0x156>
 800987c:	9105      	str	r1, [sp, #20]
 800987e:	e7c4      	b.n	800980a <_vfiprintf_r+0x156>
 8009880:	fb0c 2101 	mla	r1, ip, r1, r2
 8009884:	4604      	mov	r4, r0
 8009886:	2301      	movs	r3, #1
 8009888:	e7f0      	b.n	800986c <_vfiprintf_r+0x1b8>
 800988a:	ab03      	add	r3, sp, #12
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	462a      	mov	r2, r5
 8009890:	4b12      	ldr	r3, [pc, #72]	@ (80098dc <_vfiprintf_r+0x228>)
 8009892:	a904      	add	r1, sp, #16
 8009894:	4630      	mov	r0, r6
 8009896:	f7fd fbd7 	bl	8007048 <_printf_float>
 800989a:	4607      	mov	r7, r0
 800989c:	1c78      	adds	r0, r7, #1
 800989e:	d1d6      	bne.n	800984e <_vfiprintf_r+0x19a>
 80098a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098a2:	07d9      	lsls	r1, r3, #31
 80098a4:	d405      	bmi.n	80098b2 <_vfiprintf_r+0x1fe>
 80098a6:	89ab      	ldrh	r3, [r5, #12]
 80098a8:	059a      	lsls	r2, r3, #22
 80098aa:	d402      	bmi.n	80098b2 <_vfiprintf_r+0x1fe>
 80098ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098ae:	f7fe f927 	bl	8007b00 <__retarget_lock_release_recursive>
 80098b2:	89ab      	ldrh	r3, [r5, #12]
 80098b4:	065b      	lsls	r3, r3, #25
 80098b6:	f53f af1f 	bmi.w	80096f8 <_vfiprintf_r+0x44>
 80098ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098bc:	e71e      	b.n	80096fc <_vfiprintf_r+0x48>
 80098be:	ab03      	add	r3, sp, #12
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	462a      	mov	r2, r5
 80098c4:	4b05      	ldr	r3, [pc, #20]	@ (80098dc <_vfiprintf_r+0x228>)
 80098c6:	a904      	add	r1, sp, #16
 80098c8:	4630      	mov	r0, r6
 80098ca:	f7fd fe55 	bl	8007578 <_printf_i>
 80098ce:	e7e4      	b.n	800989a <_vfiprintf_r+0x1e6>
 80098d0:	08009d5e 	.word	0x08009d5e
 80098d4:	08009d68 	.word	0x08009d68
 80098d8:	08007049 	.word	0x08007049
 80098dc:	08009691 	.word	0x08009691
 80098e0:	08009d64 	.word	0x08009d64

080098e4 <__swbuf_r>:
 80098e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e6:	460e      	mov	r6, r1
 80098e8:	4614      	mov	r4, r2
 80098ea:	4605      	mov	r5, r0
 80098ec:	b118      	cbz	r0, 80098f6 <__swbuf_r+0x12>
 80098ee:	6a03      	ldr	r3, [r0, #32]
 80098f0:	b90b      	cbnz	r3, 80098f6 <__swbuf_r+0x12>
 80098f2:	f7fd ffeb 	bl	80078cc <__sinit>
 80098f6:	69a3      	ldr	r3, [r4, #24]
 80098f8:	60a3      	str	r3, [r4, #8]
 80098fa:	89a3      	ldrh	r3, [r4, #12]
 80098fc:	071a      	lsls	r2, r3, #28
 80098fe:	d501      	bpl.n	8009904 <__swbuf_r+0x20>
 8009900:	6923      	ldr	r3, [r4, #16]
 8009902:	b943      	cbnz	r3, 8009916 <__swbuf_r+0x32>
 8009904:	4621      	mov	r1, r4
 8009906:	4628      	mov	r0, r5
 8009908:	f000 f82a 	bl	8009960 <__swsetup_r>
 800990c:	b118      	cbz	r0, 8009916 <__swbuf_r+0x32>
 800990e:	f04f 37ff 	mov.w	r7, #4294967295
 8009912:	4638      	mov	r0, r7
 8009914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	6922      	ldr	r2, [r4, #16]
 800991a:	1a98      	subs	r0, r3, r2
 800991c:	6963      	ldr	r3, [r4, #20]
 800991e:	b2f6      	uxtb	r6, r6
 8009920:	4283      	cmp	r3, r0
 8009922:	4637      	mov	r7, r6
 8009924:	dc05      	bgt.n	8009932 <__swbuf_r+0x4e>
 8009926:	4621      	mov	r1, r4
 8009928:	4628      	mov	r0, r5
 800992a:	f7ff fda7 	bl	800947c <_fflush_r>
 800992e:	2800      	cmp	r0, #0
 8009930:	d1ed      	bne.n	800990e <__swbuf_r+0x2a>
 8009932:	68a3      	ldr	r3, [r4, #8]
 8009934:	3b01      	subs	r3, #1
 8009936:	60a3      	str	r3, [r4, #8]
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	1c5a      	adds	r2, r3, #1
 800993c:	6022      	str	r2, [r4, #0]
 800993e:	701e      	strb	r6, [r3, #0]
 8009940:	6962      	ldr	r2, [r4, #20]
 8009942:	1c43      	adds	r3, r0, #1
 8009944:	429a      	cmp	r2, r3
 8009946:	d004      	beq.n	8009952 <__swbuf_r+0x6e>
 8009948:	89a3      	ldrh	r3, [r4, #12]
 800994a:	07db      	lsls	r3, r3, #31
 800994c:	d5e1      	bpl.n	8009912 <__swbuf_r+0x2e>
 800994e:	2e0a      	cmp	r6, #10
 8009950:	d1df      	bne.n	8009912 <__swbuf_r+0x2e>
 8009952:	4621      	mov	r1, r4
 8009954:	4628      	mov	r0, r5
 8009956:	f7ff fd91 	bl	800947c <_fflush_r>
 800995a:	2800      	cmp	r0, #0
 800995c:	d0d9      	beq.n	8009912 <__swbuf_r+0x2e>
 800995e:	e7d6      	b.n	800990e <__swbuf_r+0x2a>

08009960 <__swsetup_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4b29      	ldr	r3, [pc, #164]	@ (8009a08 <__swsetup_r+0xa8>)
 8009964:	4605      	mov	r5, r0
 8009966:	6818      	ldr	r0, [r3, #0]
 8009968:	460c      	mov	r4, r1
 800996a:	b118      	cbz	r0, 8009974 <__swsetup_r+0x14>
 800996c:	6a03      	ldr	r3, [r0, #32]
 800996e:	b90b      	cbnz	r3, 8009974 <__swsetup_r+0x14>
 8009970:	f7fd ffac 	bl	80078cc <__sinit>
 8009974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009978:	0719      	lsls	r1, r3, #28
 800997a:	d422      	bmi.n	80099c2 <__swsetup_r+0x62>
 800997c:	06da      	lsls	r2, r3, #27
 800997e:	d407      	bmi.n	8009990 <__swsetup_r+0x30>
 8009980:	2209      	movs	r2, #9
 8009982:	602a      	str	r2, [r5, #0]
 8009984:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009988:	81a3      	strh	r3, [r4, #12]
 800998a:	f04f 30ff 	mov.w	r0, #4294967295
 800998e:	e033      	b.n	80099f8 <__swsetup_r+0x98>
 8009990:	0758      	lsls	r0, r3, #29
 8009992:	d512      	bpl.n	80099ba <__swsetup_r+0x5a>
 8009994:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009996:	b141      	cbz	r1, 80099aa <__swsetup_r+0x4a>
 8009998:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800999c:	4299      	cmp	r1, r3
 800999e:	d002      	beq.n	80099a6 <__swsetup_r+0x46>
 80099a0:	4628      	mov	r0, r5
 80099a2:	f7fe ff15 	bl	80087d0 <_free_r>
 80099a6:	2300      	movs	r3, #0
 80099a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80099aa:	89a3      	ldrh	r3, [r4, #12]
 80099ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80099b0:	81a3      	strh	r3, [r4, #12]
 80099b2:	2300      	movs	r3, #0
 80099b4:	6063      	str	r3, [r4, #4]
 80099b6:	6923      	ldr	r3, [r4, #16]
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	f043 0308 	orr.w	r3, r3, #8
 80099c0:	81a3      	strh	r3, [r4, #12]
 80099c2:	6923      	ldr	r3, [r4, #16]
 80099c4:	b94b      	cbnz	r3, 80099da <__swsetup_r+0x7a>
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80099cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099d0:	d003      	beq.n	80099da <__swsetup_r+0x7a>
 80099d2:	4621      	mov	r1, r4
 80099d4:	4628      	mov	r0, r5
 80099d6:	f000 f883 	bl	8009ae0 <__smakebuf_r>
 80099da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099de:	f013 0201 	ands.w	r2, r3, #1
 80099e2:	d00a      	beq.n	80099fa <__swsetup_r+0x9a>
 80099e4:	2200      	movs	r2, #0
 80099e6:	60a2      	str	r2, [r4, #8]
 80099e8:	6962      	ldr	r2, [r4, #20]
 80099ea:	4252      	negs	r2, r2
 80099ec:	61a2      	str	r2, [r4, #24]
 80099ee:	6922      	ldr	r2, [r4, #16]
 80099f0:	b942      	cbnz	r2, 8009a04 <__swsetup_r+0xa4>
 80099f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80099f6:	d1c5      	bne.n	8009984 <__swsetup_r+0x24>
 80099f8:	bd38      	pop	{r3, r4, r5, pc}
 80099fa:	0799      	lsls	r1, r3, #30
 80099fc:	bf58      	it	pl
 80099fe:	6962      	ldrpl	r2, [r4, #20]
 8009a00:	60a2      	str	r2, [r4, #8]
 8009a02:	e7f4      	b.n	80099ee <__swsetup_r+0x8e>
 8009a04:	2000      	movs	r0, #0
 8009a06:	e7f7      	b.n	80099f8 <__swsetup_r+0x98>
 8009a08:	2000001c 	.word	0x2000001c

08009a0c <_raise_r>:
 8009a0c:	291f      	cmp	r1, #31
 8009a0e:	b538      	push	{r3, r4, r5, lr}
 8009a10:	4605      	mov	r5, r0
 8009a12:	460c      	mov	r4, r1
 8009a14:	d904      	bls.n	8009a20 <_raise_r+0x14>
 8009a16:	2316      	movs	r3, #22
 8009a18:	6003      	str	r3, [r0, #0]
 8009a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1e:	bd38      	pop	{r3, r4, r5, pc}
 8009a20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009a22:	b112      	cbz	r2, 8009a2a <_raise_r+0x1e>
 8009a24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a28:	b94b      	cbnz	r3, 8009a3e <_raise_r+0x32>
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f000 f830 	bl	8009a90 <_getpid_r>
 8009a30:	4622      	mov	r2, r4
 8009a32:	4601      	mov	r1, r0
 8009a34:	4628      	mov	r0, r5
 8009a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a3a:	f000 b817 	b.w	8009a6c <_kill_r>
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d00a      	beq.n	8009a58 <_raise_r+0x4c>
 8009a42:	1c59      	adds	r1, r3, #1
 8009a44:	d103      	bne.n	8009a4e <_raise_r+0x42>
 8009a46:	2316      	movs	r3, #22
 8009a48:	6003      	str	r3, [r0, #0]
 8009a4a:	2001      	movs	r0, #1
 8009a4c:	e7e7      	b.n	8009a1e <_raise_r+0x12>
 8009a4e:	2100      	movs	r1, #0
 8009a50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009a54:	4620      	mov	r0, r4
 8009a56:	4798      	blx	r3
 8009a58:	2000      	movs	r0, #0
 8009a5a:	e7e0      	b.n	8009a1e <_raise_r+0x12>

08009a5c <raise>:
 8009a5c:	4b02      	ldr	r3, [pc, #8]	@ (8009a68 <raise+0xc>)
 8009a5e:	4601      	mov	r1, r0
 8009a60:	6818      	ldr	r0, [r3, #0]
 8009a62:	f7ff bfd3 	b.w	8009a0c <_raise_r>
 8009a66:	bf00      	nop
 8009a68:	2000001c 	.word	0x2000001c

08009a6c <_kill_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4d07      	ldr	r5, [pc, #28]	@ (8009a8c <_kill_r+0x20>)
 8009a70:	2300      	movs	r3, #0
 8009a72:	4604      	mov	r4, r0
 8009a74:	4608      	mov	r0, r1
 8009a76:	4611      	mov	r1, r2
 8009a78:	602b      	str	r3, [r5, #0]
 8009a7a:	f7f8 f995 	bl	8001da8 <_kill>
 8009a7e:	1c43      	adds	r3, r0, #1
 8009a80:	d102      	bne.n	8009a88 <_kill_r+0x1c>
 8009a82:	682b      	ldr	r3, [r5, #0]
 8009a84:	b103      	cbz	r3, 8009a88 <_kill_r+0x1c>
 8009a86:	6023      	str	r3, [r4, #0]
 8009a88:	bd38      	pop	{r3, r4, r5, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20004e60 	.word	0x20004e60

08009a90 <_getpid_r>:
 8009a90:	f7f8 b982 	b.w	8001d98 <_getpid>

08009a94 <__swhatbuf_r>:
 8009a94:	b570      	push	{r4, r5, r6, lr}
 8009a96:	460c      	mov	r4, r1
 8009a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a9c:	2900      	cmp	r1, #0
 8009a9e:	b096      	sub	sp, #88	@ 0x58
 8009aa0:	4615      	mov	r5, r2
 8009aa2:	461e      	mov	r6, r3
 8009aa4:	da0d      	bge.n	8009ac2 <__swhatbuf_r+0x2e>
 8009aa6:	89a3      	ldrh	r3, [r4, #12]
 8009aa8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009aac:	f04f 0100 	mov.w	r1, #0
 8009ab0:	bf14      	ite	ne
 8009ab2:	2340      	movne	r3, #64	@ 0x40
 8009ab4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ab8:	2000      	movs	r0, #0
 8009aba:	6031      	str	r1, [r6, #0]
 8009abc:	602b      	str	r3, [r5, #0]
 8009abe:	b016      	add	sp, #88	@ 0x58
 8009ac0:	bd70      	pop	{r4, r5, r6, pc}
 8009ac2:	466a      	mov	r2, sp
 8009ac4:	f000 f848 	bl	8009b58 <_fstat_r>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	dbec      	blt.n	8009aa6 <__swhatbuf_r+0x12>
 8009acc:	9901      	ldr	r1, [sp, #4]
 8009ace:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009ad2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ad6:	4259      	negs	r1, r3
 8009ad8:	4159      	adcs	r1, r3
 8009ada:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ade:	e7eb      	b.n	8009ab8 <__swhatbuf_r+0x24>

08009ae0 <__smakebuf_r>:
 8009ae0:	898b      	ldrh	r3, [r1, #12]
 8009ae2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ae4:	079d      	lsls	r5, r3, #30
 8009ae6:	4606      	mov	r6, r0
 8009ae8:	460c      	mov	r4, r1
 8009aea:	d507      	bpl.n	8009afc <__smakebuf_r+0x1c>
 8009aec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	6123      	str	r3, [r4, #16]
 8009af4:	2301      	movs	r3, #1
 8009af6:	6163      	str	r3, [r4, #20]
 8009af8:	b003      	add	sp, #12
 8009afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009afc:	ab01      	add	r3, sp, #4
 8009afe:	466a      	mov	r2, sp
 8009b00:	f7ff ffc8 	bl	8009a94 <__swhatbuf_r>
 8009b04:	9f00      	ldr	r7, [sp, #0]
 8009b06:	4605      	mov	r5, r0
 8009b08:	4639      	mov	r1, r7
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f7fe fed4 	bl	80088b8 <_malloc_r>
 8009b10:	b948      	cbnz	r0, 8009b26 <__smakebuf_r+0x46>
 8009b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b16:	059a      	lsls	r2, r3, #22
 8009b18:	d4ee      	bmi.n	8009af8 <__smakebuf_r+0x18>
 8009b1a:	f023 0303 	bic.w	r3, r3, #3
 8009b1e:	f043 0302 	orr.w	r3, r3, #2
 8009b22:	81a3      	strh	r3, [r4, #12]
 8009b24:	e7e2      	b.n	8009aec <__smakebuf_r+0xc>
 8009b26:	89a3      	ldrh	r3, [r4, #12]
 8009b28:	6020      	str	r0, [r4, #0]
 8009b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b2e:	81a3      	strh	r3, [r4, #12]
 8009b30:	9b01      	ldr	r3, [sp, #4]
 8009b32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b36:	b15b      	cbz	r3, 8009b50 <__smakebuf_r+0x70>
 8009b38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f000 f81d 	bl	8009b7c <_isatty_r>
 8009b42:	b128      	cbz	r0, 8009b50 <__smakebuf_r+0x70>
 8009b44:	89a3      	ldrh	r3, [r4, #12]
 8009b46:	f023 0303 	bic.w	r3, r3, #3
 8009b4a:	f043 0301 	orr.w	r3, r3, #1
 8009b4e:	81a3      	strh	r3, [r4, #12]
 8009b50:	89a3      	ldrh	r3, [r4, #12]
 8009b52:	431d      	orrs	r5, r3
 8009b54:	81a5      	strh	r5, [r4, #12]
 8009b56:	e7cf      	b.n	8009af8 <__smakebuf_r+0x18>

08009b58 <_fstat_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4d07      	ldr	r5, [pc, #28]	@ (8009b78 <_fstat_r+0x20>)
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4604      	mov	r4, r0
 8009b60:	4608      	mov	r0, r1
 8009b62:	4611      	mov	r1, r2
 8009b64:	602b      	str	r3, [r5, #0]
 8009b66:	f7f8 f97f 	bl	8001e68 <_fstat>
 8009b6a:	1c43      	adds	r3, r0, #1
 8009b6c:	d102      	bne.n	8009b74 <_fstat_r+0x1c>
 8009b6e:	682b      	ldr	r3, [r5, #0]
 8009b70:	b103      	cbz	r3, 8009b74 <_fstat_r+0x1c>
 8009b72:	6023      	str	r3, [r4, #0]
 8009b74:	bd38      	pop	{r3, r4, r5, pc}
 8009b76:	bf00      	nop
 8009b78:	20004e60 	.word	0x20004e60

08009b7c <_isatty_r>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	4d06      	ldr	r5, [pc, #24]	@ (8009b98 <_isatty_r+0x1c>)
 8009b80:	2300      	movs	r3, #0
 8009b82:	4604      	mov	r4, r0
 8009b84:	4608      	mov	r0, r1
 8009b86:	602b      	str	r3, [r5, #0]
 8009b88:	f7f8 f97e 	bl	8001e88 <_isatty>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	d102      	bne.n	8009b96 <_isatty_r+0x1a>
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	b103      	cbz	r3, 8009b96 <_isatty_r+0x1a>
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	bd38      	pop	{r3, r4, r5, pc}
 8009b98:	20004e60 	.word	0x20004e60

08009b9c <_init>:
 8009b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9e:	bf00      	nop
 8009ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba2:	bc08      	pop	{r3}
 8009ba4:	469e      	mov	lr, r3
 8009ba6:	4770      	bx	lr

08009ba8 <_fini>:
 8009ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009baa:	bf00      	nop
 8009bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bae:	bc08      	pop	{r3}
 8009bb0:	469e      	mov	lr, r3
 8009bb2:	4770      	bx	lr
